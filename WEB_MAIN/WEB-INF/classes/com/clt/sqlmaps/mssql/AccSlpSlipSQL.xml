<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="acc.slp.slip">
	
	<typeAlias alias="SlipVO" 		type="com.clt.apps.fis.acc.slp.slip.dto.SlipVO"/>		<!-- SLIP   -->
	<typeAlias alias="AcctVO" 		type="com.clt.apps.fis.acc.slp.slip.dto.AcctVO"/>		<!-- ACCOUNTING INTERFACE   -->
	<typeAlias alias="TrdpVO" 		type="com.clt.apps.fis.acc.slp.slip.dto.TrdpVO"/>		<!-- TRADE PARTNER INTERFACE   -->
	<typeAlias alias="SlipErrVO" 	type="com.clt.apps.fis.acc.slp.slip.dto.SlipErrVO"/>	<!-- SLIP VERIFY ERROR LIST   -->
	<typeAlias alias="BlockListVO" 	type="com.clt.apps.fis.acc.slp.slip.dto.BlockListVO"/>	<!-- Block LIST (BL, Invoice, Deposit/Payment  -->
	<typeAlias alias="BlockLogVO" 	type="com.clt.apps.fis.acc.slp.slip.dto.BlockLogVO"/>   <!-- Block Log  -->
	
	
	<!-- Slip Master DT_SEQ   -->
    <select id="selectSLIP_DT_SEQ_MAX" parameterClass="java.util.HashMap" resultClass="String">
        SELECT  isnull(max(dt_seq)+1, 1)
          FROM  tb_slip_mst
         WHERE  post_dt = #post_dt#
    </select>
    
    <!-- Slip Detaile PK생성   -->
    <select id="selectSLIP_DTL_SEQ_MAX" parameterClass="java.util.HashMap" resultClass="String">
        SELECT  isnull(max(slip_seq)+1, 1)
          FROM  tb_slip_dtl
    </select>
    
    
	<select id="searchLastInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT TOP 1
			   POST_DT
			  ,ACCT_DT 
			  ,RGST_USRID + ' - ' + CONVERT(VARCHAR,RGST_TMS, 120) AS RGST_INFO   
		 FROM TB_SLIP_MST 
		WHERE SLIP_TP != 'SL'
		ORDER BY POST_DT DESC
	</select>
	
	<select id="searchSlipLastInfo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT TOP 1
			   POST_DT
			  ,ACCT_DT 
			  ,RGST_USRID + ' - ' + CONVERT(VARCHAR,RGST_TMS, 120) AS RGST_INFO   
		 FROM TB_SLIP_MST 
		WHERE SLIP_TP != 'SL' 
		  AND NOT (SLIP_TP = 'EY' AND DT_SEQ = 1)
		ORDER BY POST_DT DESC
	</select>
	
	<!-- 해당년월의 마감유무를 조회한다.   -->
	<select id="searchMonMagamInfo" parameterClass="java.util.HashMap" resultClass="String">
		SELECT CASE WHEN COUNT(SLIP_NO)  > 0 THEN 'Y'
		            ELSE 'N'
	           END AS MAGAM_YN
          FROM TB_SLIP_MST
         WHERE POST_DT BETWEEN SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112),1,4) + #monVal# + '01' AND CONVERT(VARCHAR, dateadd(M, 1, SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112),1,4) + #monVal# + '01') - datepart(day, dateadd(month, 1, SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112),1,4) + #monVal# + '01')), 112)
           AND SLIP_TP != 'SL'
	</select>
	
	<!-- 해당년월의 CLOSE유무를 조회한다.   -->
	<select id="searchMonCloseInfo" parameterClass="java.util.HashMap" resultClass="String">
		SELECT CASE WHEN COUNT(D.INV_SEQ)  > 0 THEN 'Y'
                    ELSE 'N'
               END AS CLOSE_YN
          FROM TB_INV_DTL D
              ,TB_INV M 
         WHERE D.INV_SEQ = M.INV_SEQ
           AND M.CMB_INV_SEQ IS NULL
           AND INV_POST_DT BETWEEN SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112),1,4) + #monVal# + '01' AND CONVERT(VARCHAR, dateadd(M, 1, SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112),1,4) + #monVal# + '01') - datepart(day, dateadd(month, 1, SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112),1,4) + #monVal# + '01')), 112)
           AND D.CLT_CMPL_FLG = 'Y'
           AND ISNULL(D.DELT_FLG,'N') = 'N'
	</select>
	
	
	<!-- GENERAL JOURNAL (SLIP_MST) UPDATE   -->
    <update id="update2_1" parameterClass="java.util.HashMap">
    	UPDATE tb_slip_mst
    	   SET ACCT_DT = #s_enddt#
    	 WHERE POST_DT BETWEEN #s_strdt# AND #s_enddt#
    	   AND SLIP_TP   = 'SL'
    	   AND DELT_FLG != 'Y'
   	       <isNotEmpty property="slip_no">
		   	AND SLIP_NO = #slip_no#
		   </isNotEmpty>
    </update>
    
    <!-- GENERAL JOURNAL (SLIP_DTL) UPDATE   -->
    <!-- FOR UPDATE G/L CODE FOR INTERFACING WITH EXTERNAL ACCOUNTING SYSTEM   -->
    <update id="update2_1_DETAIL" parameterClass="java.util.HashMap">
    	With TableC(SLIP_NO) AS
		(
			SELECT SLIP_NO
			  FROM TB_SLIP_MST
		     WHERE POST_DT BETWEEN #s_strdt# AND #s_enddt#
		       AND SLIP_TP   = 'SL'
		       AND DELT_FLG != 'Y'
		       <isNotEmpty property="slip_no">
		   	    AND SLIP_NO = #slip_no#
		       </isNotEmpty>
		)
		UPDATE TB_SLIP_DTL 
		   SET RESERVE_FIELD01 = (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = GL_NO)
		  FROM TB_SLIP_DTL A join TableC C
		    ON A.SLIP_NO = C.SLIP_NO
    </update>
    
    
    <!-- Slip Master 정보를 INSERT 한다.   -->
    <insert id="insertSlipMst" parameterClass="SlipVO">
    	INSERT INTO TB_SLIP_MST(
			 slip_no
			,slip_tp
			,slip_2nd_tp
			,ref_no
			,post_dt
			,RESERVE_FIELD01
			,dt_seq
			,g_debit
			,g_credit
			,curr_cd
			,rmk
			,delt_flg
			,p_ofc_cd
			,rgst_usrid
			,rgst_ofc_cd
			,rgst_tms
			,modi_usrid
			,modi_ofc_cd
			,modi_tms
			,acct_dt
			,jnr_yn
			,jnr_dt
			,cls_yn
			,cls_dt
		)VALUES(
			 #slip_no#
			,#slip_tp#
			,#slip_2nd_tp#
			,#ref_no#
			,#post_dt#
			,#inv_dt#
			,#dt_seq#
			,#g_debit#
			,#g_credit#
			,#curr_cd#
			,#rmk#
			,'N'
			,#p_ofc_cd#
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,#proc_usrid#
			,#proc_ofccd#
			,GETUTCDATE()
			,#acct_dt#
			,#jnr_yn#
			,#jnr_dt#
			,#cls_yn#
			,#cls_dt#
		)
    </insert>
    
    
    <!-- Slip Detail 정보를 INSERT 한다.   -->
    <insert id="insertSlipDtl" parameterClass="SlipVO">
    	INSERT INTO TB_SLIP_DTL(
			 slip_no
			,slip_seq
			,gl_no
			,reserve_field01
			,com_tp
			,com_cd
			,com_nm
			,gl_sub
			,debit
			,credit
			,curr_cd
			,xcrt
			,ttl_debit
			,ttl_credit
			,slip_desc
			,p_ofc_cd
			,vat_yn
			,ref_seq
			,rgst_usrid
			,rgst_ofc_cd
			,rgst_tms
			,modi_usrid
			,modi_ofc_cd
			,modi_tms
		)VALUES(
			 #slip_no#
			,#slip_seq#
			,#gl_no#
			,#acct_gl_no#
			,#com_tp#
			,#com_cd#
			,#com_nm#
			,#gl_sub#
			,#debit#
			,#credit#
			,#curr_cd#
			,#xcrt#
			,#debit#
			,#credit#
			,#slip_desc#
			,#p_ofc_cd#
			,#vat_yn#
			,#ref_seq#
			,#proc_usrid#
			,#proc_ofccd#
			,getdate()
			,#proc_usrid#
			,#proc_ofccd#
			,GETUTCDATE()
		)
    </insert>
    
    
    
    
    
    <!-- SLIP_MST 2_2 대상데이터 조회   -->
    <select id="select2_2_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
				I.INV_SEQ 									AS REF_NO,
				ID.INV_POST_DT 								AS POST_DT,
				ID.INV_DT									AS INV_DT,
				ID.INV_SUM_AMT 								AS G_DEBIT,
				(SELECT SUM(INV_SUM_AMT) FROM TB_FRT WHERE INV_SEQ = I.INV_SEQ AND ISNULL(DELT_FLG,'N') != 'Y') AS G_CREDIT,
				ID.INV_APLY_CURR_CD 						AS CURR_CD,
				ISNULL(I.INV_RMK,'')+' Local Invoice No: ' + ISNULL(ID.INV_NO,'') AS RMK,
				I.OFC_CD 									AS P_OFC_CD,
				I.SELL_BUY_TP_CD							AS SELL_BUY_TP_CD
		  FROM
				TB_INV I,
				TB_INV_DTL ID
				WHERE 1=1
				AND ID.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
				AND I.SELL_BUY_TP_CD IN ('S')
				AND I.INV_SEQ = ID.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(ID.DELT_FLG,'N') != 'Y'
				<isEqual property="f_range_flg" compareValue="Y">
					AND ISNULL(ID.JNR_YN,'N') != 'Y'
				</isEqual>
				AND ISNULL(I.TAX_BIL_FLG,'N') != 'Y'
    </select>
    
    <!-- SLIP_DETAIL 2_2 대상데이터 조회 LOCAL INVOICE  -->
    <select id="select2_2_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<!--  
		SELECT
			A.INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
		 FROM
			(
				SELECT
					I.INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
					'C' AS COM_TP,
					I.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					D.INV_SUM_AMT AS DEBIT,
					0 AS CREDIT,
					D.INV_APLY_CURR_CD AS CURR_CD,
					1 AS XCRT,
					D.INV_SUM_AMT AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'Local Invoice No: '+D.INV_NO AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ
				FROM
				TB_INV I,
				TB_INV_DTL D
				WHERE 1=1
				AND I.INV_SEQ = D.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				
				UNION ALL
				
				SELECT
					I.INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					I.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					F.INV_AMT AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					F.INV_AMT AS TTL_CREDIT,
					F.FRT_CD_NM +' (Local Invoice No: '+D.INV_NO+')' AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ	
				FROM
				TB_FRT F,
				TB_INV I,
				TB_INV_DTL D
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'	
				
				UNION ALL
				
				SELECT
					I.INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(I.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					SUM(F.INV_VAT_AMT) AS CREDIT,
					MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
					'(VAT) (Local Invoice No: '+I.INV_SEQ+')' AS SLIP_DESC,
					MAX(I.OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ	
				FROM
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_INV_DTL D,
				TB_FRT_CD FC
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')
			GROUP BY I.INV_SEQ
				
			) A
			WHERE A.INV_SEQ = #inv_seq#
			ORDER BY INV_SEQ, SLIP_SEQ ASC
    	  -->
    	
    	SELECT  
    			MAX(X.INV_SEQ)	   AS INV_SEQ,
				MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
				X.GL_NO       AS GL_NO,
				MAX(X.COM_TP)      AS COM_TP,
				MAX(X.COM_CD)      AS COM_CD,
				MAX(X.COM_NM)      AS COM_NM,
				MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
				SUM(X.DEBIT)       AS DEBIT,
				SUM(X.CREDIT)      AS CREDIT,
				MAX(X.CURR_CD)     AS CURR_CD,
				MAX(X.XCRT)        AS XCRT,
				SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
				SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
				MAX(X.SLIP_DESC)   AS SLIP_DESC,
				MAX(X.P_OFC_CD)    AS P_OFC_CD,
				MAX(X.VAT_YN)      AS VAT_YN,
				MAX(X.REF_SEQ)     AS REF_SEQ,
				X.ACCT_GL_NO       AS ACCT_GL_NO,
				X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  	FROM(
			SELECT
				A.INV_SEQ,
				ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
					 ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				A.DEBIT,
				A.CREDIT,
				A.CURR_CD,
				A.XCRT,
				A.TTL_DEBIT,
				A.TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE ISNULL((SELECT ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO),'XXXXX')
				END AS ACCT_GL_NO,
				CASE WHEN DEBIT != 0 THEN 'D'
			         ELSE 'C'
			    END SELL_BUY_TP_CD
			FROM
				(
					SELECT
						I.INV_SEQ,
						1 AS SLIP_SEQ,
						(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						D.INV_SUM_AMT AS DEBIT,
						0 AS CREDIT,
						D.INV_APLY_CURR_CD AS CURR_CD,
						1 AS XCRT,
						D.INV_SUM_AMT AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						'Local Invoice No: '+D.INV_NO AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						I.INV_SEQ AS REF_SEQ
					FROM
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND I.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					
					UNION ALL
					
					SELECT
						I.INV_SEQ,
						2 AS SLIP_SEQ,
						(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						0 AS DEBIT,
						F.INV_AMT AS CREDIT,
						F.INV_CURR_CD AS CURR_CD,
						1 AS XCRT,
						0 AS TTL_DEBIT,
						F.INV_AMT AS TTL_CREDIT,
						F.FRT_CD_NM +' (Local Invoice No: '+D.INV_NO+')' AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ	
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'	
					
					UNION ALL
					
					<isEqual property="proc_ofccd" compareValue="TYO">
						SELECT
							I.INV_SEQ,
							3 AS SLIP_SEQ,
							ISNULL((SELECT GL_VAT_REV FROM TB_OFC WHERE OFC_CD=MAX(I.OFC_CD)),'XXXXX') AS GL_NO,
							'C' AS COM_TP,
							MAX(I.TRDP_CD) AS COM_CD,
							(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
							NULL AS GL_SUB,
							0 AS DEBIT,
							SUM(F.INV_VAT_AMT) AS CREDIT,
							MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
							1 AS XCRT,
							0 AS TTL_DEBIT,
							SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
							'(VAT) (Local Invoice No: '+I.INV_SEQ+')' AS SLIP_DESC,
							MAX(I.OFC_CD) AS P_OFC_CD,
							'Y' AS VAT_YN,
							I.INV_SEQ AS REF_SEQ	
						FROM
						TB_FRT F,
						TB_INV I,
						TB_INV_DTL D,
						TB_FRT_CD FC
						WHERE 1=1
						AND F.INV_SEQ = I.INV_SEQ
						AND F.INV_SEQ = D.INV_SEQ
						AND F.FRT_CD  = FC.FRT_CD
						AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
						AND ISNULL(I.DELT_FLG,'N') != 'Y'
						AND ISNULL(D.DELT_FLG,'N') != 'Y'
						AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--						AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
					GROUP BY I.INV_SEQ
					</isEqual>
					
					<isNotEqual property="proc_ofccd" compareValue="TYO">
						SELECT
							I.INV_SEQ,
							3 AS SLIP_SEQ,
							ISNULL((SELECT GL_VAT_REV FROM TB_OFC WHERE OFC_CD=MAX(I.OFC_CD)),'XXXXX') AS GL_NO,
							'C' AS COM_TP,
							MAX(I.TRDP_CD) AS COM_CD,
							(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
							NULL AS GL_SUB,
							0 AS DEBIT,
							SUM(F.INV_VAT_AMT) AS CREDIT,
							MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
							1 AS XCRT,
							0 AS TTL_DEBIT,
							SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
							'(VAT) (Local Invoice No: '+I.INV_SEQ+')' AS SLIP_DESC,
							MAX(I.OFC_CD) AS P_OFC_CD,
							'Y' AS VAT_YN,
							I.INV_SEQ AS REF_SEQ	
						FROM
						TB_FRT F,
						TB_INV I,
						TB_TRDP_VAT_OPT V,
						TB_INV_DTL D,
						TB_FRT_CD FC
						WHERE 1=1
						AND F.INV_SEQ = I.INV_SEQ
						AND F.INV_SEQ = D.INV_SEQ
						AND F.FRT_CD  = FC.FRT_CD
						AND I.TRDP_CD = V.TRDP_CD 
						AND V.AR_VAT_LINE = 'Y'
						AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
						AND ISNULL(I.DELT_FLG,'N') != 'Y'
						AND ISNULL(D.DELT_FLG,'N') != 'Y'
						AND ISNULL(F.DELT_FLG,'N') != 'Y'
						<!--  AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
					GROUP BY I.INV_SEQ
					</isNotEqual>
				) A
				WHERE A.INV_SEQ = #inv_seq#
		) X
		
		GROUP BY X.GL_NO, X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.INV_SEQ), MAX(X.SLIP_SEQ) ASC
		
		
		
    </select>
    
    
    
    
    
    
    <!-- SLIP_MST 2_3 대상데이터 조회   -->
    <select id="select2_3_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			I.INV_SEQ 							AS REF_NO,
			ID.INV_POST_DT 						AS POST_DT,
			ID.INV_DT							AS INV_DT,
			ID.INV_SUM_AMT 						AS G_DEBIT,
			ID.INV_SUM_AMT 						AS G_CREDIT,
			ID.INV_APLY_CURR_CD					AS CURR_CD,
			ISNULL(I.INV_RMK,'')+' CR/DB No: ' + ISNULL(ID.INV_NO,'') 	AS RMK,
			'N' 								AS DELT_FLG,
			I.OFC_CD 							AS P_OFC_CD,
			I.SELL_BUY_TP_CD
		 FROM
			TB_INV I,
			TB_INV_DTL ID
			WHERE 1=1
			AND ID.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
			AND I.SELL_BUY_TP_CD IN ('D', 'C')
			AND I.INV_SEQ = ID.INV_SEQ
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(ID.DELT_FLG,'N') != 'Y'
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(ID.JNR_YN,'N') != 'Y'
			</isEqual>
			AND ISNULL(I.TAX_BIL_FLG,'N') != 'Y'
    </select>
    
    <!-- SLIP_DETAIL 2_3 대상데이터 조회 DEBIT/CREDIT  -->
    <select id="select2_3_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<!--  
    	SELECT
				A.INV_SEQ,
				ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				A.DEBIT,
				A.CREDIT,
				A.CURR_CD,
				A.XCRT,
				A.TTL_DEBIT,
				A.TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO,
				CASE WHEN DEBIT != 0 THEN 'D'
					 ELSE 'C'
			    END SELL_BUY_TP_CD
			FROM
				(
					SELECT
						I.INV_SEQ,
						1 AS SLIP_SEQ,
						(SELECT GL_AGENT_AR FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						(CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT
							  ELSE 0
						END) AS DEBIT,
						(CASE WHEN I.SELL_BUY_TP_CD = 'C' THEN D.INV_SUM_AMT
							  ELSE 0
						END) AS CREDIT,	
						D.INV_APLY_CURR_CD AS CURR_CD,
						1 AS XCRT,
						(CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT
							  ELSE 0
						END) AS TTL_DEBIT,
						(CASE WHEN I.SELL_BUY_TP_CD = 'C' THEN D.INV_SUM_AMT
							  ELSE 0
						END) AS TTL_CREDIT,	
						'CR/DB No: '+D.INV_NO AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						I.INV_SEQ AS REF_SEQ
					FROM
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND I.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
				
					UNION ALL
				
					SELECT
						I.INV_SEQ,
						2 AS SLIP_SEQ,
						(SELECT GL_CD_PRNR FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,	
						F.CR_AMT AS DEBIT,
						F.INV_SUM_AMT AS CREDIT,		
						F.INV_CURR_CD AS CURR_CD,
						1 AS XCRT,
						F.CR_AMT 		AS TTL_DEBIT,
						F.INV_SUM_AMT 	AS TTL_CREDIT,	
						F.FRT_CD_NM +' (CR/DB No: '+D.INV_NO+')' AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
				) A
				WHERE A.INV_SEQ = #inv_seq#
		  -->		
    	
    	<!--  
    	SELECT  
    			MAX(X.INV_SEQ)	   AS INV_SEQ,
				MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
				MAX(X.GL_NO)       AS GL_NO,
				MAX(X.COM_TP)      AS COM_TP,
				MAX(X.COM_CD)      AS COM_CD,
				MAX(X.COM_NM)      AS COM_NM,
				MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
				SUM(X.DEBIT)       AS DEBIT,
				SUM(X.CREDIT)      AS CREDIT,
				MAX(X.CURR_CD)     AS CURR_CD,
				MAX(X.XCRT)        AS XCRT,
				SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
				SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
				MAX(X.SLIP_DESC)   AS SLIP_DESC,
				MAX(X.P_OFC_CD)    AS P_OFC_CD,
				MAX(X.VAT_YN)      AS VAT_YN,
				MAX(X.REF_SEQ)     AS REF_SEQ,
				X.ACCT_GL_NO       AS ACCT_GL_NO,
				X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  	FROM(		
		
			SELECT
				A.INV_SEQ,
				ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				A.DEBIT,
				A.CREDIT,
				A.CURR_CD,
				A.XCRT,
				A.TTL_DEBIT,
				A.TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO,
				CASE WHEN DEBIT != 0 THEN 'D'
					 ELSE 'C'
			    END SELL_BUY_TP_CD
			FROM
				(
					SELECT
						I.INV_SEQ,
						1 AS SLIP_SEQ,
						(SELECT GL_AGENT_AR FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						(CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT
							  ELSE 0
						END) AS DEBIT,
						(CASE WHEN I.SELL_BUY_TP_CD = 'C' THEN D.INV_SUM_AMT
							  ELSE 0
						END) AS CREDIT,	
						D.INV_APLY_CURR_CD AS CURR_CD,
						1 AS XCRT,
						(CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT
							  ELSE 0
						END) AS TTL_DEBIT,
						(CASE WHEN I.SELL_BUY_TP_CD = 'C' THEN D.INV_SUM_AMT
							  ELSE 0
						END) AS TTL_CREDIT,	
						'CR/DB No: '+D.INV_NO AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						I.INV_SEQ AS REF_SEQ
					FROM
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND I.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
				
					UNION ALL
				
					SELECT
						I.INV_SEQ,
						2 AS SLIP_SEQ,
						(SELECT GL_CD_PRNR FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,	
						F.CR_AMT AS DEBIT,
						F.INV_SUM_AMT AS CREDIT,		
						F.INV_CURR_CD AS CURR_CD,
						1 AS XCRT,
						F.CR_AMT 		AS TTL_DEBIT,
						F.INV_SUM_AMT 	AS TTL_CREDIT,	
						F.FRT_CD_NM +' (CR/DB No: '+D.INV_NO+')' AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
				) A
				WHERE A.INV_SEQ = #inv_seq#
		) X
		
		GROUP BY X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.INV_SEQ), MAX(X.SLIP_SEQ) ASC
		  -->
		
		<!-- 
		SELECT  
    			MAX(X.INV_SEQ)	   AS INV_SEQ,
				MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
				X.GL_NO       AS GL_NO,
				MAX(X.COM_TP)      AS COM_TP,
				MAX(X.COM_CD)      AS COM_CD,
				MAX(X.COM_NM)      AS COM_NM,
				MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
				SUM(X.DEBIT)       AS DEBIT,
				SUM(X.CREDIT)      AS CREDIT,
				MAX(X.CURR_CD)     AS CURR_CD,
				MAX(X.XCRT)        AS XCRT,
				SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
				SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
				MAX(X.SLIP_DESC)   AS SLIP_DESC,
				MAX(X.P_OFC_CD)    AS P_OFC_CD,
				MAX(X.VAT_YN)      AS VAT_YN,
				MAX(X.REF_SEQ)     AS REF_SEQ,
				X.ACCT_GL_NO       AS ACCT_GL_NO,
				X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  	FROM(		
		
			SELECT
				A.INV_SEQ,
				ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				A.DEBIT,
				A.CREDIT,
				A.CURR_CD,
				A.XCRT,
				A.TTL_DEBIT,
				A.TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO,
				CASE WHEN DEBIT != 0 THEN 'D'
					 ELSE 'C'
			    END SELL_BUY_TP_CD
			FROM
				(
					SELECT
						I.INV_SEQ,
						1 AS SLIP_SEQ,
						(SELECT GL_AGENT_AR FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						<isEqual property="proc_ofccd" compareValue="TYO">
						CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT 
						     WHEN I.SELL_BUY_TP_CD = 'C' THEN D.INV_SUM_AMT * -1
						END  AS DEBIT,
						0 AS CREDIT,	
						</isEqual>
						<isNotEqual property="proc_ofccd" compareValue="TYO">
						0 AS DEBIT,
						(CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT * -1
							  ELSE D.INV_SUM_AMT
						END) AS CREDIT,	
						</isNotEqual>
						D.INV_APLY_CURR_CD AS CURR_CD,
						1 AS XCRT,
						<isEqual property="proc_ofccd" compareValue="TYO">
						CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT 
						     WHEN I.SELL_BUY_TP_CD = 'C' THEN D.INV_SUM_AMT * -1
						END  AS TTL_DEBIT,
						0 AS TTL_CREDIT,	
						</isEqual>
						<isNotEqual property="proc_ofccd" compareValue="TYO">
						0 AS TTL_DEBIT,
						(CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT * -1
							  ELSE D.INV_SUM_AMT
						END) AS TTL_CREDIT,	
						</isNotEqual>
						
						'CR/DB No: '+D.INV_NO AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						I.INV_SEQ AS REF_SEQ
					FROM
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND I.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
				
					UNION ALL
				
					SELECT
						I.INV_SEQ,
						2 AS SLIP_SEQ,
						(SELECT GL_CD_PRNR FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,	
						<isEqual property="proc_ofccd" compareValue="TYO">
						CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.CR_AMT 
						     ELSE F.INV_SUM_AMT * 1 
						END AS DEBIT,
						CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.INV_SUM_AMT
						     ELSE F.CR_AMT * -1 
						END AS CREDIT,		
						</isEqual>
						<isNotEqual property="proc_ofccd" compareValue="TYO">
						CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.INV_SUM_AMT * -1
						     ELSE F.CR_AMT 
						END AS DEBIT,
						CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.CR_AMT * -1
						     ELSE F.INV_SUM_AMT 
						END AS CREDIT,
						</isNotEqual>
						F.INV_CURR_CD AS CURR_CD,
						1 AS XCRT,
						<isEqual property="proc_ofccd" compareValue="TYO">
						CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.CR_AMT
						     ELSE F.INV_SUM_AMT * -1 
						END AS TTL_DEBIT,
						CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.INV_SUM_AMT
						     ELSE F.CR_AMT * -1 
						END AS TTL_CREDIT,		
						</isEqual>
						<isNotEqual property="proc_ofccd" compareValue="TYO">
						CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.INV_SUM_AMT * -1
						     ELSE F.CR_AMT 
						END AS TTL_DEBIT,
						CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.CR_AMT * -1
						     ELSE F.INV_SUM_AMT 
						END AS TTL_CREDIT,
						</isNotEqual>	
						F.FRT_CD_NM +' (CR/DB No: '+D.INV_NO+')' AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
				) A
				WHERE A.INV_SEQ = #inv_seq#
		) X
		
		GROUP BY X.GL_NO, X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.INV_SEQ), MAX(X.SLIP_SEQ) ASC
		   -->
		 
		 <!-- 2013.01.22   -->
		 SELECT  
    			MAX(X.INV_SEQ)	   AS INV_SEQ,
				MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
				X.GL_NO       AS GL_NO,
				MAX(X.COM_TP)      AS COM_TP,
				MAX(X.COM_CD)      AS COM_CD,
				MAX(X.COM_NM)      AS COM_NM,
				MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
				SUM(X.DEBIT)       AS DEBIT,
				SUM(X.CREDIT)      AS CREDIT,
				MAX(X.CURR_CD)     AS CURR_CD,
				MAX(X.XCRT)        AS XCRT,
				SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
				SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
				MAX(X.SLIP_DESC)   AS SLIP_DESC,
				MAX(X.P_OFC_CD)    AS P_OFC_CD,
				MAX(X.VAT_YN)      AS VAT_YN,
				MAX(X.REF_SEQ)     AS REF_SEQ,
				X.ACCT_GL_NO       AS ACCT_GL_NO,
				X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  	FROM(		
		
			SELECT
				A.INV_SEQ,
				ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				A.DEBIT,
				A.CREDIT,
				A.CURR_CD,
				A.XCRT,
				A.TTL_DEBIT,
				A.TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE ISNULL((SELECT ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO),'XXXXX')
				END AS ACCT_GL_NO,
				CASE WHEN DEBIT != 0 THEN 'D'
					 ELSE 'C'
			    END SELL_BUY_TP_CD
			FROM
				(
					SELECT
                          I.INV_SEQ,
                          1 AS SLIP_SEQ,
                          (SELECT GL_AGENT_AR FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
                          'C' AS COM_TP,
                          I.TRDP_CD AS COM_CD,
                         (SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
                          NULL AS GL_SUB,
                 
                          CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT 
                               ELSE 0
                          END  AS DEBIT,                                                                                                  
                          CASE WHEN I.SELL_BUY_TP_CD = 'C' THEN D.INV_SUM_AMT 
                                                         ELSE 0                                             
                          END  AS CREDIT, 
                      
                          D.INV_APLY_CURR_CD AS CURR_CD,
                          1 AS XCRT,
                  
                        CASE WHEN I.SELL_BUY_TP_CD = 'D' THEN D.INV_SUM_AMT 
                               ELSE 0
                        END  AS TTL_DEBIT,
                        CASE WHEN I.SELL_BUY_TP_CD = 'C' THEN D.INV_SUM_AMT 
                                                       ELSE 0                                             
                        END AS TTL_CREDIT,                                                                                                               
                      'D/C No: '+D.INV_NO AS SLIP_DESC,
                      I.OFC_CD AS P_OFC_CD,
                      '' AS VAT_YN,
                      I.INV_SEQ AS REF_SEQ
                   FROM
                   TB_INV I,
                   TB_INV_DTL D
                   WHERE 1=1
                   AND I.INV_SEQ = D.INV_SEQ
                   AND ISNULL(I.DELT_FLG,'N') != 'Y'
                   AND ISNULL(D.DELT_FLG,'N') != 'Y'

                   UNION ALL
             
                   SELECT
                          I.INV_SEQ,
                          2 AS SLIP_SEQ,
                          (SELECT GL_CD_PRNR FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
                          'C' AS COM_TP,
                          I.TRDP_CD AS COM_CD,
                         (SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
                          NULL AS GL_SUB,     
                         
                          CASE WHEN F.SELL_BUY_TP_CD = 'C' THEN F.CR_AMT 
                               ELSE 0
                          END AS DEBIT,
                                                                  
                          CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.INV_SUM_AMT
                               ELSE 0
                          END AS CREDIT,             
                          F.INV_CURR_CD AS CURR_CD,
                          1 AS XCRT,
                         
                          CASE WHEN F.SELL_BUY_TP_CD = 'C' THEN F.CR_AMT 
                               ELSE 0
                          END AS TTL_DEBIT,
                          CASE WHEN F.SELL_BUY_TP_CD = 'D' THEN F.INV_SUM_AMT
                               ELSE 0
                          END AS TTL_CREDIT,         
                       
                        
                         F.FRT_CD_NM +' (D/C No: '+D.INV_NO+')' AS SLIP_DESC,
                          I.OFC_CD AS P_OFC_CD,
                          '' AS VAT_YN,
                          CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ
                   FROM
                   TB_FRT F,
                   TB_INV I,
                   TB_INV_DTL D
                   WHERE 1=1
                   AND F.INV_SEQ = I.INV_SEQ
                   AND F.INV_SEQ = D.INV_SEQ
                   AND ISNULL(I.DELT_FLG,'N') != 'Y'
                   AND ISNULL(D.DELT_FLG,'N') != 'Y'
                   AND ISNULL(F.DELT_FLG,'N') != 'Y'

				) A
				WHERE A.INV_SEQ = #inv_seq#
		) X
		
		GROUP BY X.GL_NO, X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.INV_SEQ), MAX(X.SLIP_SEQ) ASC
		 
    </select>
    
    
    
    
    <!-- SLIP_MST 2_4 대상데이터 조회   -->
    <select id="select2_4_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			'3' AS SLIP_2ND_TP,
			I.INV_SEQ AS REF_NO,
			ID.INV_POST_DT AS POST_DT,
			ID.INV_DT	   AS INV_DT,
			( SELECT SUM(INV_SUM_AMT) FROM TB_FRT WHERE INV_SEQ = I.INV_SEQ AND ISNULL(DELT_FLG,'N') != 'Y' ) AS G_DEBIT,
			ID.INV_SUM_AMT AS G_CREDIT,
			ID.INV_APLY_CURR_CD	AS CURR_CD,
			ISNULL(I.INV_RMK,'')+' A/P No: ' + ISNULL(ID.BUY_INV_NO,'') AS RMK,
			'N' AS DELT_FLG,
			I.OFC_CD AS P_OFC_CD
		 FROM
			TB_INV I,
			TB_INV_DTL ID
			WHERE 1=1
			AND ID.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
			AND I.SELL_BUY_TP_CD IN ('B')
			AND I.INV_SEQ = ID.INV_SEQ
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(ID.DELT_FLG,'N') != 'Y'
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(ID.JNR_YN,'N') != 'Y'
			</isEqual>
			AND ISNULL(I.TAX_BIL_FLG,'N') != 'Y'
    </select>
    
    <!-- SLIP_DETAIL 2_4 대상데이터 조회 A/P   -->
    <select id="select2_4_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<!--  
    	SELECT
			A.INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
			                             ELSE ACCT_GL_CD
			                        END
			             FROM TB_GL_CD 
			            WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
			FROM
			(
				SELECT
					I.INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
					'C' AS COM_TP,
					I.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					D.INV_SUM_AMT AS CREDIT,
					D.INV_APLY_CURR_CD AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					D.INV_SUM_AMT AS TTL_CREDIT,
					'A/P Invoice No: '+D.BUY_INV_NO AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ
				FROM
				TB_INV I,
				TB_INV_DTL D
				WHERE 1=1
				AND I.INV_SEQ = D.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				
				UNION ALL
				
				SELECT
					I.INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					I.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					F.INV_AMT AS DEBIT,
					0 AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					F.INV_AMT AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					F.FRT_CD_NM +' (A/P Invoice No: '+D.BUY_INV_NO+')' AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ
				FROM
				TB_FRT F,
				TB_INV I,
				TB_INV_DTL D
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
			
				UNION ALL
				
				SELECT
					I.INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'CO') AS GL_NO,
					'C' AS COM_TP,
					MAX(I.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_VAT_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'(VAT) (A/P Invoice No: '+I.INV_SEQ+')' AS SLIP_DESC,
					MAX(I.OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ	
				FROM
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_INV_DTL D,
				TB_FRT_CD FC
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AP_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')
			GROUP BY I.INV_SEQ
				
			) A
			WHERE A.INV_SEQ = #inv_seq#
			ORDER BY A.INV_SEQ, A.SLIP_SEQ ASC
		
		  -->
	 
	 SELECT  	
			MAX(X.INV_SEQ)	   AS INV_SEQ,
			MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
			X.GL_NO       AS GL_NO,
			MAX(X.COM_TP)      AS COM_TP,
			MAX(X.COM_CD)      AS COM_CD,
			MAX(X.COM_NM)      AS COM_NM,
			MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
			SUM(X.DEBIT)       AS DEBIT,
			SUM(X.CREDIT)      AS CREDIT,
			MAX(X.CURR_CD)     AS CURR_CD,
			MAX(X.XCRT)        AS XCRT,
			SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
			SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
			MAX(X.SLIP_DESC)   AS SLIP_DESC,
			MAX(X.P_OFC_CD)    AS P_OFC_CD,
			MAX(X.VAT_YN)      AS VAT_YN,
			MAX(X.REF_SEQ)     AS REF_SEQ,
			X.ACCT_GL_NO       AS ACCT_GL_NO,
			X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  FROM(
		SELECT
			A.INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE ISNULL((SELECT ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO),'XXXXX') 
			END AS ACCT_GL_NO,
			CASE WHEN DEBIT != 0 THEN 'D'
				 ELSE 'C'
		    END SELL_BUY_TP_CD
			FROM
			(
				SELECT
					I.INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
					'C' AS COM_TP,
					I.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					D.INV_SUM_AMT AS CREDIT,
					D.INV_APLY_CURR_CD AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					D.INV_SUM_AMT AS TTL_CREDIT,
					'A/P Invoice No: '+D.BUY_INV_NO AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ
				FROM
				TB_INV I,
				TB_INV_DTL D
				WHERE 1=1
				AND I.INV_SEQ = D.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				
				UNION ALL
				
				SELECT
					I.INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					I.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					F.INV_AMT AS DEBIT,
					0 AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					F.INV_AMT AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					F.FRT_CD_NM +' (A/P Invoice No: '+D.BUY_INV_NO+')' AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ
				FROM
				TB_FRT F,
				TB_INV I,
				TB_INV_DTL D
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
			
				UNION ALL
				
				<isEqual property="proc_ofccd" compareValue="TYO">
					SELECT
						I.INV_SEQ,
						3 AS SLIP_SEQ,
						ISNULL((SELECT GL_VAT_COST FROM TB_OFC WHERE OFC_CD=MAX(I.OFC_CD)),'XXXXX') AS GL_NO,
						'C' AS COM_TP,
						MAX(I.TRDP_CD) AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
						NULL AS GL_SUB,
						SUM(F.INV_VAT_AMT) AS DEBIT,
						0 AS CREDIT,
						MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
						1 AS XCRT,
						SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						'(VAT) (A/P Invoice No: '+I.INV_SEQ+')' AS SLIP_DESC,
						MAX(I.OFC_CD) AS P_OFC_CD,
						'Y' AS VAT_YN,
						I.INV_SEQ AS REF_SEQ	
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D,
					TB_FRT_CD FC
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--					AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
				GROUP BY I.INV_SEQ
				</isEqual>
				
				<isNotEqual property="proc_ofccd" compareValue="TYO">
					SELECT
						I.INV_SEQ,
						3 AS SLIP_SEQ,
						ISNULL((SELECT GL_VAT_COST FROM TB_OFC WHERE OFC_CD=MAX(I.OFC_CD)),'XXXXX') AS GL_NO,
						'C' AS COM_TP,
						MAX(I.TRDP_CD) AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
						NULL AS GL_SUB,
						SUM(F.INV_VAT_AMT) AS DEBIT,
						0 AS CREDIT,
						MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
						1 AS XCRT,
						SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						'(VAT) (A/P Invoice No: '+I.INV_SEQ+')' AS SLIP_DESC,
						MAX(I.OFC_CD) AS P_OFC_CD,
						'Y' AS VAT_YN,
						I.INV_SEQ AS REF_SEQ	
					FROM
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_INV_DTL D,
					TB_FRT_CD FC
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AP_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--					AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
				GROUP BY I.INV_SEQ
				</isNotEqual>
				
				
			) A
			WHERE A.INV_SEQ = #inv_seq#
		) X
		GROUP BY X.GL_NO, X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.INV_SEQ), MAX(X.SLIP_SEQ) ASC

    </select>
    
    
    
    
    
    
    
    <!-- SLIP_MST 2_5 대상데이터 조회   -->
    <select id="select2_5_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			JNR_NO AS REF_NO,
			POST_DT AS POST_DT,
			CLR_DT	AS INV_DT,
			AMT AS G_DEBIT,
			AMT AS G_CREDIT,
			CURR_CD AS CURR_CD,
			ISNULL(RMK,'') AS RMK,
			P_OFC_CD AS P_OFC_CD
		 FROM TB_JNR_MST
			WHERE 1=1
			AND JNR_TP IN ('D','B')
			AND ISNULL(DELT_FLG,'N') != 'Y'
			AND ISNULL(VOID_YN,'N')  != 'Y'
			AND POST_DT BETWEEN #s_strdt# AND #s_enddt#
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(JNR_YN,'N') != 'Y'
			</isEqual>
    </select>
    
    <!-- SLIP_DETAIL 2_5 대상데이터 조회 Deposit  -->
    <select id="select2_5_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<![CDATA[
    	SELECT
			ROW_NUMBER()OVER(PARTITION BY A.JNR_NO ORDER BY A.JNR_NO) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE ISNULL((SELECT ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO),'XXXXX')
			END AS ACCT_GL_NO,
			CASE WHEN A.CREDIT < 0 THEN 'D'
				 WHEN A.DEBIT  < 0 THEN 'C'
				 ELSE CASE WHEN A.CREDIT != 0 THEN 'C'
				           ELSE 'D'
				      END
			END AS SELL_BUY_TP_CD
			]]>
			FROM
			(
				SELECT 
					M.JNR_NO,	
					<!-- 
					CASE WHEN D.GL_NO = '10220' THEN '10230'
					     ELSE D.GL_NO
					END AS GL_NO,
					CASE WHEN D.GL_NO = '10220' THEN 'B'
					     ELSE 'C' 
					END AS COM_TP,
					CASE WHEN D.GL_NO = '10220' THEN 'SEL1'
					     ELSE TRDP_CD 
					END AS COM_CD,
					CASE WHEN D.GL_NO = '10220' THEN (SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = 'SEL1')
					     ELSE (SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)
					END AS COM_NM,
					   -->
					D.GL_NO,
					'C' AS COM_TP,
					TRDP_CD AS COM_CD,
					RCVD_FM_NM AS COM_NM,
					NULL AS GL_SUB,
					(CASE
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('C','B') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('C','B') THEN D.PAY_AMT
						ELSE 0
					END)  AS DEBIT,
					(CASE
							WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('C','B') OR
							(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('C','B') THEN 0
						ELSE D.PAY_AMT
					END) AS CREDIT,
					D.CURR_CD,
					D.XCRT,
					(CASE
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('C','B') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('C','B') THEN D.TTL_PAY_AMT
						ELSE 0
					END) AS TTL_DEBIT,
					(CASE
							WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('C','B') OR
							(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('C','B') THEN 0
						ELSE D.TTL_PAY_AMT
					END) AS TTL_CREDIT,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) + '(' + D.INV_NO + ')' AS SLIP_DESC,
					M.P_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					D.INV_SEQ AS REF_SEQ
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
				UNION ALL
				
				SELECT 
					M.JNR_NO,
					(SELECT GL_CD FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS GL_NO,
					'B' AS COM_TP,
					M.BANK_SEQ AS COM_CD,
					(SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS COM_NM,
					NULL AS GL_SUB,
					(CASE 
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('C','B') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('C','B') THEN 0
						ELSE D.PAY_AMT
					END) AS DEBIT,
					
					(CASE 
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('C','B') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('C','B') THEN D.PAY_AMT
						ELSE 0
					END) AS CREDIT,
					D.CURR_CD,
					D.XCRT,					
					(CASE 
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('C','B') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('C','B') THEN 0
						ELSE D.TTL_PAY_AMT
					END) AS TTL_DEBIT,					
					(CASE 
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('C') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('C') THEN D.TTL_PAY_AMT
						ELSE 0
					END) AS TTL_CREDIT,					
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) + '(CK No: '+M.CHK_NO+')' AS SLIP_DESC,
					M.P_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					D.INV_SEQ AS REF_SEQ	
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
			) A
			WHERE A.JNR_NO = #jnr_no#
		
		
	<!--	
	SELECT  MAX(X.JNR_NO)	   AS JNR_NO,
			MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
			MAX(X.GL_NO)       AS GL_NO,
			MAX(X.COM_TP)      AS COM_TP,
			MAX(X.COM_CD)      AS COM_CD,
			MAX(X.COM_NM)      AS COM_NM,
			MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
			SUM(X.DEBIT)       AS DEBIT,
			SUM(X.CREDIT)      AS CREDIT,
			MAX(X.CURR_CD)     AS CURR_CD,
			MAX(X.XCRT)        AS XCRT,
			SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
			SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
			MAX(X.SLIP_DESC)   AS SLIP_DESC,
			MAX(X.P_OFC_CD)    AS P_OFC_CD,
			MAX(X.VAT_YN)      AS VAT_YN,
			MAX(X.REF_SEQ)     AS REF_SEQ,
			X.ACCT_GL_NO       AS ACCT_GL_NO,
			X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  FROM(	
			SELECT
				<![CDATA[
				A.JNR_NO,
				ROW_NUMBER()OVER(PARTITION BY A.JNR_NO ORDER BY A.JNR_NO) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
					 ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				CASE WHEN A.CREDIT < 0 THEN A.CREDIT
					 WHEN A.DEBIT  < 0 THEN 0
					 ELSE A.DEBIT
				END AS DEBIT,
				CASE WHEN A.DEBIT  < 0 THEN A.DEBIT
					 WHEN A.CREDIT < 0 THEN 0
					 ELSE A.CREDIT
				END AS CREDIT,
				A.CURR_CD,
				A.XCRT,
				CASE WHEN A.TTL_CREDIT < 0 THEN A.TTL_CREDIT
					 WHEN A.TTL_DEBIT  < 0 THEN 0
					 ELSE A.TTL_DEBIT
				END AS TTL_DEBIT,
				CASE WHEN A.TTL_DEBIT  < 0 THEN A.TTL_DEBIT
					 WHEN A.TTL_CREDIT < 0 THEN 0
					 ELSE A.TTL_CREDIT
				END AS TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO,
				CASE WHEN A.CREDIT < 0 THEN 'D'
					 WHEN A.DEBIT  < 0 THEN 'C'
					 ELSE CASE WHEN A.CREDIT != 0 THEN 'C'
					           ELSE 'D'
					      END
				END AS SELL_BUY_TP_CD
				]]>
			FROM
				(
					SELECT 
						M.JNR_NO,	
						CASE WHEN D.GL_NO = '10220' THEN '10230'
							 ELSE D.GL_NO
						END AS GL_NO,
						CASE WHEN D.GL_NO = '10220' THEN 'B'
							 ELSE 'C' 
						END AS COM_TP,
						CASE WHEN D.GL_NO = '10220' THEN 'SEL1'
							 ELSE TRDP_CD 
						END AS COM_CD,
						CASE WHEN D.GL_NO = '10220' THEN (SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = 'SEL1')
							 ELSE RCVD_FM_NM 
						END AS COM_NM,
						NULL AS GL_SUB,
						0 AS DEBIT,
						(CASE WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.PAY_AMT * -1
							  ELSE D.PAY_AMT
						END) AS CREDIT,
						D.CURR_CD,
						D.XCRT,
						0 AS TTL_DEBIT,
						(CASE WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.TTL_PAY_AMT * -1
							  ELSE D.TTL_PAY_AMT
						END) AS TTL_CREDIT,
						D.INV_NO+' (CK No: '+M.CHK_NO+')' AS SLIP_DESC,
						M.P_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						D.INV_SEQ AS REF_SEQ
					FROM
					TB_JNR_MST M,
					TB_JNR_DTL D
					WHERE 1=1
					AND M.JNR_NO = D.JNR_NO
					AND ISNULL(M.DELT_FLG, 'N') = 'N'
					AND ISNULL(D.DELT_FLG, 'N') = 'N'
					UNION ALL
					
					SELECT 
						M.JNR_NO,
						(SELECT GL_CD FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS GL_NO,
						'B' AS COM_TP,
						M.BANK_SEQ AS COM_CD,
						(SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS COM_NM,
						NULL AS GL_SUB,
						(CASE WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.PAY_AMT * -1
							  ELSE D.PAY_AMT
						END) AS DEBIT,
						0 AS CREDIT,
						D.CURR_CD,
						D.XCRT,
						(CASE WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.TTL_PAY_AMT * -1
							  ELSE D.TTL_PAY_AMT
						END) AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						'CK No: '+M.CHK_NO AS SLIP_DESC,
						M.P_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						D.INV_SEQ AS REF_SEQ	
					FROM
					TB_JNR_MST M,
					TB_JNR_DTL D
					WHERE 1=1
					AND M.JNR_NO = D.JNR_NO
					AND ISNULL(M.DELT_FLG, 'N') = 'N'
					AND ISNULL(D.DELT_FLG, 'N') = 'N'
				) A
				WHERE
				A.JNR_NO = #jnr_no#
		) X
		
		GROUP BY X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.JNR_NO), MAX(X.SLIP_SEQ) ASC		
		  -->
    </select>
    
    
    
    <!-- SLIP_MST 2_6 대상데이터 조회   -->
    <select id="select2_6_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			JNR_NO AS REF_NO,
			POST_DT AS POST_DT,
			CLR_DT	AS INV_DT,
			AMT AS G_DEBIT,
			AMT AS G_CREDIT,
			CURR_CD AS CURR_CD,
			ISNULL(RMK,'') AS RMK,
			P_OFC_CD AS P_OFC_CD
		 FROM TB_JNR_MST
			WHERE 1=1
			AND JNR_TP IN ('C', 'V')
			AND ISNULL(DELT_FLG,'N') != 'Y'
			AND ISNULL(VOID_YN,'N') != 'Y'
			AND POST_DT BETWEEN #s_strdt# AND #s_enddt#
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(JNR_YN,'N') != 'Y'
			</isEqual>
    </select>
    
    <!-- SLIP_DETAIL 2_6 대상데이터 조회  CHECK  -->
    <select id="select2_6_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<![CDATA[
    	SELECT
			ROW_NUMBER()OVER(PARTITION BY A.JNR_NO ORDER BY A.JNR_NO) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE ISNULL((SELECT ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO),'XXXXX') 
			END AS ACCT_GL_NO,
			CASE WHEN A.CREDIT < 0 THEN 'D'
				 WHEN A.DEBIT  < 0 THEN 'C'
				 ELSE CASE WHEN A.CREDIT != 0 THEN 'C'
				           ELSE 'D'
				      END
			END AS SELL_BUY_TP_CD
			]]>
		 FROM
			(
				SELECT 
					M.JNR_NO,	
					D.GL_NO,
					'C' AS COM_TP,
					TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					(CASE 
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('D','S') OR 
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('D','S') THEN 0
						ELSE D.PAY_AMT
					END) AS DEBIT,
					
					(CASE 
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('D','S') OR 
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('D','S') THEN D.PAY_AMT
						ELSE 0
					END) AS CREDIT,
					D.CURR_CD,
					D.XCRT,
					(CASE 
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('D','S') OR 
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('D','S') THEN 0
						ELSE D.TTL_PAY_AMT
					END) AS TTL_DEBIT,
					(CASE 
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('D','S') OR 
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('D','S') THEN D.TTL_PAY_AMT
						ELSE 0
					END) AS TTL_CREDIT,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) + '(' + D.INV_NO + ')' AS SLIP_DESC,
					M.P_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					D.INV_SEQ AS REF_SEQ
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO	
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
				
				UNION ALL
					
				SELECT 
					M.JNR_NO,
					(SELECT GL_CD FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS GL_NO,
					'B' AS COM_TP,
					M.BANK_SEQ AS COM_CD,
					(SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS COM_NM,
					NULL AS GL_SUB,
					(CASE
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('D','S') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('D','S') THEN D.PAY_AMT
						ELSE 0
					END) AS DEBIT,
					
					(CASE
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('D','S') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('D','S') THEN 0
						ELSE D.PAY_AMT
					END) AS CREDIT,
					D.CURR_CD,
					D.XCRT,
					(CASE
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('D','S') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('D','S') THEN D.TTL_PAY_AMT
						ELSE 0
					END) AS TTL_DEBIT,
					
					(CASE
						WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('D','S') OR
						(SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR, CMB_INV_SEQ) = D.INV_SEQ) IN ('D','S') THEN 0
						ELSE D.TTL_PAY_AMT
					END) AS TTL_CREDIT,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) + '(CK No: '+M.CHK_NO+')' AS SLIP_DESC,
					M.P_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					D.INV_SEQ AS REF_SEQ	
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
			) A
			WHERE A.JNR_NO = #jnr_no#
		
		
		
		<!--  
		SELECT  MAX(X.JNR_NO)	   AS JNR_NO,
				MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
				MAX(X.GL_NO)       AS GL_NO,
				MAX(X.COM_TP)      AS COM_TP,
				MAX(X.COM_CD)      AS COM_CD,
				MAX(X.COM_NM)      AS COM_NM,
				MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
				SUM(X.DEBIT)       AS DEBIT,
				SUM(X.CREDIT)      AS CREDIT,
				MAX(X.CURR_CD)     AS CURR_CD,
				MAX(X.XCRT)        AS XCRT,
				SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
				SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
				MAX(X.SLIP_DESC)   AS SLIP_DESC,
				MAX(X.P_OFC_CD)    AS P_OFC_CD,
				MAX(X.VAT_YN)      AS VAT_YN,
				MAX(X.REF_SEQ)     AS REF_SEQ,
				X.ACCT_GL_NO       AS ACCT_GL_NO,
				X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  	FROM(			
			SELECT
				<![CDATA[
				A.JNR_NO,
				ROW_NUMBER()OVER(PARTITION BY A.JNR_NO ORDER BY A.JNR_NO) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
					 ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				CASE WHEN A.CREDIT < 0 THEN A.CREDIT
					 WHEN A.DEBIT  < 0 THEN 0
					 ELSE A.DEBIT
				END AS DEBIT,
				CASE WHEN A.DEBIT  < 0 THEN A.DEBIT
					 WHEN A.CREDIT < 0 THEN 0
					 ELSE A.CREDIT
				END AS CREDIT,
				A.CURR_CD,
				A.XCRT,
				CASE WHEN A.TTL_CREDIT < 0 THEN A.TTL_CREDIT
					 WHEN A.TTL_DEBIT  < 0 THEN 0
					 ELSE A.TTL_DEBIT
				END AS TTL_DEBIT,
				CASE WHEN A.TTL_DEBIT  < 0 THEN A.TTL_DEBIT
					 WHEN A.TTL_CREDIT < 0 THEN 0
					 ELSE A.TTL_CREDIT
				END AS TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO,
				CASE WHEN A.CREDIT < 0 THEN 'D'
					 WHEN A.DEBIT  < 0 THEN 'C'
					 ELSE CASE WHEN A.CREDIT != 0 THEN 'C'
					           ELSE 'D'
					      END
				END AS SELL_BUY_TP_CD
				]]>
			 FROM
				(
					SELECT 
						M.JNR_NO,	
						D.GL_NO,
						'C' AS COM_TP,
						TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						(CASE WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.PAY_AMT * -1
							  ELSE D.PAY_AMT
						END) AS DEBIT,	
						0 AS CREDIT,
						D.CURR_CD,
						D.XCRT,
						(CASE WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.TTL_PAY_AMT * -1
							  ELSE D.TTL_PAY_AMT
						END) AS TTL_DEBIT,	
						0 AS TTL_CREDIT,
						D.INV_NO+' (CK No: '+M.CHK_NO+')' AS SLIP_DESC,
						M.P_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						D.INV_SEQ AS REF_SEQ
					FROM
					TB_JNR_MST M,
					TB_JNR_DTL D
					WHERE 1=1
					AND M.JNR_NO = D.JNR_NO	
					AND ISNULL(M.DELT_FLG, 'N') = 'N'
					AND ISNULL(D.DELT_FLG, 'N') = 'N'
					
					UNION ALL
						
					SELECT 
						M.JNR_NO,
						(SELECT GL_CD FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS GL_NO,
						'B' AS COM_TP,
						M.BANK_SEQ AS COM_CD,
						(SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS COM_NM,
						NULL AS GL_SUB,
						0 AS DEBIT,
						(CASE WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.PAY_AMT * -1
							  ELSE D.PAY_AMT
						END) AS CREDIT,
						D.CURR_CD,
						D.XCRT,
						0 AS TTL_DEBIT,
						(CASE WHEN D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.TTL_PAY_AMT * -1
							  ELSE D.TTL_PAY_AMT
						END) AS TTL_CREDIT,	
						'CK No: '+M.CHK_NO AS SLIP_DESC,
						M.P_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						D.INV_SEQ AS REF_SEQ	
					FROM
					TB_JNR_MST M,
					TB_JNR_DTL D
					WHERE 1=1
					AND M.JNR_NO = D.JNR_NO
					AND ISNULL(M.DELT_FLG, 'N') = 'N'
					AND ISNULL(D.DELT_FLG, 'N') = 'N'
				) A
				WHERE
				A.JNR_NO = #jnr_no#
		) X
		GROUP BY X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.JNR_NO), MAX(X.SLIP_SEQ) ASC		
		  -->			
    </select>
    
    
    
    
    <!-- SLIP_MST 2_7 대상데이터 조회   -->
    <select id="select2_7_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			(CASE WHEN JNR_TP = 'D' THEN 'DP'
				  WHEN JNR_TP = 'C' THEN 'CK'
			END) AS SLIP_TP,
			(CASE WHEN JNR_TP = 'D' THEN '5'
				  WHEN JNR_TP = 'C' THEN '8'
			END) AS SLIP_2ND_TP,
			JNR_NO AS REF_NO,
			POST_DT AS POST_DT,
			CLR_DT	AS INV_DT,
			AMT AS G_DEBIT,
			AMT AS G_CREDIT,
			CURR_CD AS CURR_CD,
			ISNULL(RMK,'') AS RMK,
			P_OFC_CD AS P_OFC_CD
		 FROM TB_JNR_MST
			WHERE 1=1
			AND ISNULL(DELT_FLG,'N') != 'Y'
			AND ISNULL(VOID_YN,'N')   = 'Y'
			AND VOID_DT BETWEEN #s_strdt# AND #s_enddt#
			AND JNR_TP IN ('D','C')
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(JNR_YN,'N') != 'Y'
			</isEqual>
    </select>
    
    
    
    <!-- SLIP_DETAIL 2_7 대상데이터 조회  VOID   -->
    <select id="select2_7_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<![CDATA[
    	SELECT
			ROW_NUMBER()OVER(PARTITION BY A.JNR_NO ORDER BY A.JNR_NO) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE ISNULL((SELECT ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO),'XXXXX') 
			END AS ACCT_GL_NO,
			CASE WHEN A.CREDIT < 0 THEN 'D'
				 WHEN A.DEBIT  < 0 THEN 'C'
				 ELSE CASE WHEN A.CREDIT != 0 THEN 'C'
				           ELSE 'D'
				      END
			END AS SELL_BUY_TP_CD
			]]>				
			FROM
			(
				SELECT 
					M.JNR_NO,	
					D.GL_NO,
					'C' AS COM_TP,
					TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					(CASE
						WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.PAY_AMT			
						WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  0
						WHEN M.JNR_TP = 'D' THEN D.PAY_AMT
						ELSE 0
					END) AS DEBIT,	
				
					(CASE
						WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.PAY_AMT
						WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  0
						WHEN M.JNR_TP = 'C' THEN D.PAY_AMT
						ELSE 0
					END) AS CREDIT,		
					D.CURR_CD,
					D.XCRT,
					(CASE
						WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND
							(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.TTL_PAY_AMT
						WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  0
						 WHEN M.JNR_TP = 'D' THEN D.TTL_PAY_AMT
						 ELSE 0
					END) AS TTL_DEBIT,	
				
					(CASE
						WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.TTL_PAY_AMT				
						WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND
							(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN 0
						WHEN M.JNR_TP = 'C' THEN D.TTL_PAY_AMT
						ELSE 0
					END) AS TTL_CREDIT,	
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) + '(' + D.INV_NO + ')' AS SLIP_DESC,
					M.P_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					D.INV_SEQ AS REF_SEQ
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO	
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
				
				UNION ALL	
				
				SELECT 
					M.JNR_NO,
					(SELECT GL_CD FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS GL_NO,
					'B' AS COM_TP,
					M.BANK_SEQ AS COM_CD,
					(SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS COM_NM,
					NULL AS GL_SUB,
					(CASE
						WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.PAY_AMT				
						WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  0
						WHEN M.JNR_TP = 'C' THEN D.PAY_AMT
						ELSE 0
					END) AS DEBIT,
					(CASE	
						WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN D.PAY_AMT
						WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN 0
						WHEN M.JNR_TP = 'D' THEN D.PAY_AMT
						ELSE 0
					END) AS CREDIT,	
					D.CURR_CD,
					D.XCRT,
					(CASE
					WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND
					(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.TTL_PAY_AMT			
					WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND
					(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  0
					WHEN M.JNR_TP = 'C' THEN D.TTL_PAY_AMT
					ELSE 0
					END) AS DEBIT,
					(CASE
					WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND
					(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.TTL_PAY_AMT			
						WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND
						(SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  0
						WHEN M.JNR_TP = 'D' THEN D.TTL_PAY_AMT
						ELSE 0
					END) AS CREDIT,	
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) + '(CK No: '+M.CHK_NO+')' AS SLIP_DESC,
					M.P_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					D.INV_SEQ AS REF_SEQ	
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
			) A
			WHERE A.JNR_NO = #jnr_no#
		
		
		
		<!--  
		SELECT  MAX(X.JNR_NO)	   AS JNR_NO,
				MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
				MAX(X.GL_NO)       AS GL_NO,
				MAX(X.COM_TP)      AS COM_TP,
				MAX(X.COM_CD)      AS COM_CD,
				MAX(X.COM_NM)      AS COM_NM,
				MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
				SUM(X.DEBIT)       AS DEBIT,
				SUM(X.CREDIT)      AS CREDIT,
				MAX(X.CURR_CD)     AS CURR_CD,
				MAX(X.XCRT)        AS XCRT,
				SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
				SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
				MAX(X.SLIP_DESC)   AS SLIP_DESC,
				MAX(X.P_OFC_CD)    AS P_OFC_CD,
				MAX(X.VAT_YN)      AS VAT_YN,
				MAX(X.REF_SEQ)     AS REF_SEQ,
				X.ACCT_GL_NO       AS ACCT_GL_NO,
				X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  FROM(		
	
			SELECT	
				<![CDATA[
				A.JNR_NO,
				ROW_NUMBER()OVER(PARTITION BY A.JNR_NO ORDER BY A.JNR_NO) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
					 ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				CASE WHEN A.CREDIT < 0 THEN A.CREDIT
					 WHEN A.DEBIT  < 0 THEN 0
					 ELSE A.DEBIT
				END AS DEBIT,
				CASE WHEN A.DEBIT  < 0 THEN A.DEBIT
					 WHEN A.CREDIT < 0 THEN 0
					 ELSE A.CREDIT
				END AS CREDIT,
				A.CURR_CD,
				A.XCRT,
				CASE WHEN A.TTL_CREDIT < 0 THEN A.TTL_CREDIT
					 WHEN A.TTL_DEBIT  < 0 THEN 0
					 ELSE A.TTL_DEBIT
				END AS TTL_DEBIT,
				CASE WHEN A.TTL_DEBIT  < 0 THEN A.TTL_DEBIT
					 WHEN A.TTL_CREDIT < 0 THEN 0
					 ELSE A.TTL_CREDIT
				END AS TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO,
				CASE WHEN A.CREDIT < 0 THEN 'D'
					 WHEN A.DEBIT  < 0 THEN 'C'
					 ELSE CASE WHEN A.CREDIT != 0 THEN 'C'
					           ELSE 'D'
					      END
				END AS SELL_BUY_TP_CD
				]]>
			FROM
				(
					SELECT 
						M.JNR_NO,	
						D.GL_NO,
						'C' AS COM_TP,
						TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						(CASE WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.PAY_AMT * -1
							  WHEN M.JNR_TP = 'D' THEN D.PAY_AMT
							  ELSE 0
						END) AS DEBIT,	
					
						(CASE WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.PAY_AMT * -1
							  WHEN M.JNR_TP = 'C' THEN D.PAY_AMT
							  ELSE 0
						END) AS CREDIT,		
						D.CURR_CD,
						D.XCRT,
						(CASE WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.TTL_PAY_AMT * -1
							  WHEN M.JNR_TP = 'D' THEN D.TTL_PAY_AMT
							  ELSE 0
						END) AS TTL_DEBIT,	
					
						(CASE WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.TTL_PAY_AMT * -1
							  WHEN M.JNR_TP = 'C' THEN D.TTL_PAY_AMT
							  ELSE 0
						END) AS TTL_CREDIT,	
						D.INV_NO+' (CK No: '+M.CHK_NO+')' AS SLIP_DESC,
						M.P_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						D.INV_SEQ AS REF_SEQ
					FROM
					TB_JNR_MST M,
					TB_JNR_DTL D
					WHERE 1=1
					AND M.JNR_NO = D.JNR_NO	
					AND ISNULL(M.DELT_FLG, 'N') = 'N'
					AND ISNULL(D.DELT_FLG, 'N') = 'N'
					
					UNION ALL	
					
					SELECT 
						M.JNR_NO,
						(SELECT GL_CD FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS GL_NO,
						'B' AS COM_TP,
						M.BANK_SEQ AS COM_CD,
						(SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS COM_NM,
						NULL AS GL_SUB,
						(CASE WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.PAY_AMT * -1
							  WHEN M.JNR_TP = 'C' THEN D.PAY_AMT
							  ELSE 0
						END) AS DEBIT,
						(CASE WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.PAY_AMT * -1
							  WHEN M.JNR_TP = 'D' THEN D.PAY_AMT
							  ELSE 0
						END) AS CREDIT,	
						D.CURR_CD,
						D.XCRT,
						(CASE WHEN M.JNR_TP = 'C' AND D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('S','D') THEN  D.TTL_PAY_AMT * -1
							  WHEN M.JNR_TP = 'C' THEN D.TTL_PAY_AMT
							  ELSE 0
						END) AS DEBIT,
						(CASE WHEN M.JNR_TP = 'D' AND D.INP_TYPE = 'S' AND (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = D.INV_SEQ) IN ('B','C') THEN  D.TTL_PAY_AMT * -1
							  WHEN M.JNR_TP = 'D' THEN D.TTL_PAY_AMT
							  ELSE 0
						END) AS CREDIT,	
						'CK No: '+M.CHK_NO AS SLIP_DESC,
						M.P_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						D.INV_SEQ AS REF_SEQ	
					FROM
					TB_JNR_MST M,
					TB_JNR_DTL D
					WHERE 1=1
					AND M.JNR_NO = D.JNR_NO
					AND ISNULL(M.DELT_FLG, 'N') = 'N'
					AND ISNULL(D.DELT_FLG, 'N') = 'N'
				) A
				WHERE
				A.JNR_NO = #jnr_no#
		) X
		GROUP BY X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.JNR_NO), MAX(X.SLIP_SEQ) ASC	
		  -->				
    </select>
    
    
    
    
    
    
    
    
    <!-- SLIP_MST 2_8 대상데이터 조회 A/P 마감후 변경건   -->
    <select id="select2_8_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			I.INV_SEQ AS REF_NO,
			F.INV_POST_DT AS POST_DT,
			ID.INV_DT	  AS INV_DT,
			F.INV_SUM_AMT AS G_DEBIT,
			F.INV_SUM_AMT AS G_CREDIT,
			ID.INV_APLY_CURR_CD AS CURR_CD,
			ISNULL(I.INV_RMK,'')+' A/P No: ' + ISNULL(ID.BUY_INV_NO,'') AS RMK,
			I.OFC_CD AS P_OFC_CD,
			I.INV_SEQ,
			F.FRT_SEQ
		 FROM
			TB_INV I,
			TB_INV_DTL ID,
			TB_FRT F
			WHERE 1=1
			AND I.INV_SEQ = ID.INV_SEQ
			AND I.INV_SEQ = F.INV_SEQ
			AND F.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
			AND I.SELL_BUY_TP_CD IN ('B')
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(ID.DELT_FLG,'N') != 'Y'
			AND ISNULL(F.DELT_FLG,'N') != 'Y'
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(ID.JNR_YN,'N') = 'Y'
			</isEqual>
			AND ISNULL(I.TAX_BIL_FLG,'N') != 'Y'
			AND F.CFM_FLG IS NULL
    </select>
    
    <!-- SLIP_DETAIL 2_8 대상데이터 조회 A/P 마감후 변경건   -->
    <select id="select2_8_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	SELECT
			A.INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				 ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE ISNULL((SELECT ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO),'XXXXX')  
			END AS ACCT_GL_NO
		FROM
		(
			SELECT
				I.INV_SEQ,
				1 AS SLIP_SEQ,
				(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
				'C' AS COM_TP,
				I.TRDP_CD AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
				NULL AS GL_SUB,
				0 AS DEBIT,
				F.INV_SUM_AMT AS CREDIT,
				D.INV_APLY_CURR_CD AS CURR_CD,
				1 AS XCRT,
				0 AS TTL_DEBIT,
				F.INV_SUM_AMT AS TTL_CREDIT,
				'A/P Invoice No: '+D.BUY_INV_NO AS SLIP_DESC,
				I.OFC_CD AS P_OFC_CD,
				'' AS VAT_YN,
				CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ,
				CONVERT(VARCHAR, F.FRT_SEQ) AS FRT_SEQ
			FROM
			TB_INV I,
			TB_INV_DTL D,
			TB_FRT F
			WHERE 1=1
			AND I.INV_SEQ = D.INV_SEQ
			AND I.INV_SEQ = F.INV_SEQ
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(D.DELT_FLG,'N') != 'Y'
			AND ISNULL(F.DELT_FLG,'N') != 'Y'
			
			UNION ALL
			
			SELECT
				I.INV_SEQ,
				2 AS SLIP_SEQ,
				(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
				'C' AS COM_TP,
				I.TRDP_CD AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
				NULL AS GL_SUB,
				F.INV_AMT AS DEBIT,
				0 AS CREDIT,
				F.INV_CURR_CD AS CURR_CD,
				1 AS XCRT,
				F.INV_AMT AS TTL_DEBIT,
				0 AS TTL_CREDIT,
				F.FRT_CD_NM +' (A/P Invoice No: '+D.BUY_INV_NO+')' AS SLIP_DESC,
				I.OFC_CD AS P_OFC_CD,
				'' AS VAT_YN,
				CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ,
				CONVERT(VARCHAR, F.FRT_SEQ) AS FRT_SEQ
			FROM
			TB_FRT F,
			TB_INV I,
			TB_INV_DTL D
			WHERE 1=1
			AND F.INV_SEQ = I.INV_SEQ
			AND F.INV_SEQ = D.INV_SEQ
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(D.DELT_FLG,'N') != 'Y'	
			AND ISNULL(F.DELT_FLG,'N') != 'Y'
			
			UNION ALL 
			
			<isEqual property="proc_ofccd" compareValue="TYO">
				SELECT
					I.INV_SEQ,
					3 AS SLIP_SEQ,
					ISNULL((SELECT GL_VAT_COST FROM TB_OFC WHERE OFC_CD=MAX(I.OFC_CD)),'XXXXX') AS GL_NO,
					'C' AS COM_TP,
					MAX(I.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_VAT_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'(A/P Invoice No: '+I.INV_SEQ+')' AS SLIP_DESC,
					MAX(I.OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ,
					'' AS FRT_SEQ
				FROM
				TB_FRT F,
				TB_INV I,
				TB_INV_DTL D,
				TB_FRT_CD FC
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'	
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--				AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')  -->
			GROUP BY I.INV_SEQ		
			</isEqual>
			
			<isNotEqual property="proc_ofccd" compareValue="TYO">
				SELECT
					I.INV_SEQ,
					3 AS SLIP_SEQ,
					ISNULL((SELECT GL_VAT_COST FROM TB_OFC WHERE OFC_CD=MAX(I.OFC_CD)),'XXXXX') AS GL_NO,
					'C' AS COM_TP,
					MAX(I.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_VAT_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'(A/P Invoice No: '+I.INV_SEQ+')' AS SLIP_DESC,
					MAX(I.OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ,
					'' AS FRT_SEQ
				FROM
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_INV_DTL D,
				TB_FRT_CD FC
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AP_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'	
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--				AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
			GROUP BY I.INV_SEQ		
			</isNotEqual>	
			
		) A
		WHERE 1=1
		AND A.INV_SEQ = #inv_seq#
		AND CONVERT(VARCHAR,A.FRT_SEQ) = #frt_seq#
		ORDER BY A.INV_SEQ, A.SLIP_SEQ ASC
    </select>
    
    
    
    
    
    
    <!-- SLIP_MST 2_9 대상데이터 조회   -->
    <select id="select2_9_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			I.INV_SEQ AS REF_NO,
			ID.INV_POST_DT AS POST_DT,
			ID.INV_DT	   AS INV_DT,
			(SELECT SUM(INV_SUM_AMT) FROM TB_FRT WHERE INV_SEQ = I.INV_SEQ AND ISNULL(DELT_FLG,'N') != 'Y') AS G_DEBIT,
			ID.INV_SUM_AMT AS G_CREDIT,
			ID.INV_APLY_CURR_CD AS CURR_CD,
			ISNULL(I.INV_RMK,'')+' A/P No: ' + ISNULL(ID.BUY_INV_NO,'') AS RMK,
			I.OFC_CD AS P_OFC_CD,
			ID.INV_SEQ
		 FROM
			TB_INV I,
			TB_INV_DTL ID
			WHERE 1=1
			AND I.SELL_BUY_TP_CD IN ('B')
			AND I.INV_SEQ = ID.INV_SEQ
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(ID.DELT_FLG,'N') != 'Y'
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(ID.CLT_CMPL_FLG,'N') = 'Y'
			</isEqual>
			AND EXISTS (SELECT FRT_SEQ 
			              FROM TB_FRT 
			             WHERE INV_SEQ = ID.INV_SEQ 
			               AND INV_POST_DT BETWEEN #s_strdt# AND #s_enddt# 
			               AND ISNULL(DELT_FLG,'N') != 'Y'
			            )
			AND ISNULL(I.TAX_BIL_FLG,'N') != 'Y'
			<![CDATA[
			AND ID.INV_POST_DT < #s_strdt#
			]]>
    </select>
    
    <!-- SLIP_DETAIL 2_9 대상데이터 조회 A/P 변경 회계용   -->
    <select id="select2_9_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<!--  
    	SELECT
			A.INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
			                             ELSE ACCT_GL_CD
			                        END
			             FROM TB_GL_CD 
			            WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO,
			CASE WHEN DEBIT != 0 THEN 'D'
				 ELSE 'C'
		    END SELL_BUY_TP_CD
			FROM
			(
				SELECT
					I.INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
					'C' AS COM_TP,
					I.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					D.INV_SUM_AMT AS CREDIT,
					D.INV_APLY_CURR_CD AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					D.INV_SUM_AMT AS TTL_CREDIT,
					'A/P Invoice No: '+D.BUY_INV_NO+ ' (Adjusted)' AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ
				FROM
				TB_INV I,
				TB_INV_DTL D
				WHERE 1=1
				AND I.INV_SEQ = D.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				
				UNION ALL
				
				SELECT
					I.INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					I.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					F.INV_AMT AS DEBIT,
					0 AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					F.INV_AMT AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					F.FRT_CD_NM +' (A/P Invoice No: '+D.BUY_INV_NO+')'+' (Adjusted)' AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ
				FROM
				TB_FRT F,
				TB_INV I,
				TB_INV_DTL D
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
			
				UNION ALL
				
				SELECT
					I.INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'CO') AS GL_NO,
					'C' AS COM_TP,
					MAX(I.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_VAT_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'(VAT) (A/P Invoice No: '+I.INV_SEQ+')'+ ' (Adjusted)' AS SLIP_DESC,
					MAX(I.OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					I.INV_SEQ AS REF_SEQ	
				FROM
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_INV_DTL D,
				TB_FRT_CD FC
				WHERE 1=1
				AND F.INV_SEQ = I.INV_SEQ
				AND F.INV_SEQ = D.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AP_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(D.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')
			GROUP BY I.INV_SEQ

			) A
			WHERE A.INV_SEQ = #inv_seq#
			ORDER BY A.INV_SEQ, A.SLIP_SEQ ASC
		
		  -->
		
		SELECT  MAX(X.INV_SEQ)	   AS INV_SEQ,
				MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
				X.GL_NO       AS GL_NO,
				MAX(X.COM_TP)      AS COM_TP,
				MAX(X.COM_CD)      AS COM_CD,
				MAX(X.COM_NM)      AS COM_NM,
				MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
				SUM(X.DEBIT)       AS DEBIT,
				SUM(X.CREDIT)      AS CREDIT,
				MAX(X.CURR_CD)     AS CURR_CD,
				MAX(X.XCRT)        AS XCRT,
				SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
				SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
				MAX(X.SLIP_DESC)   AS SLIP_DESC,
				MAX(X.P_OFC_CD)    AS P_OFC_CD,
				MAX(X.VAT_YN)      AS VAT_YN,
				MAX(X.REF_SEQ)     AS REF_SEQ,
				X.ACCT_GL_NO       AS ACCT_GL_NO,
				X.SELL_BUY_TP_CD   AS SELL_BUY_TP_CD
	  	FROM(

			SELECT
				A.INV_SEQ,
				ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
					 ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				A.DEBIT,
				A.CREDIT,
				A.CURR_CD,
				A.XCRT,
				A.TTL_DEBIT,
				A.TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO,
				CASE WHEN DEBIT != 0 THEN 'D'
					 ELSE 'C'
			    END SELL_BUY_TP_CD
				FROM
				(
					SELECT
						I.INV_SEQ,
						1 AS SLIP_SEQ,
						(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						0 AS DEBIT,
						D.INV_SUM_AMT AS CREDIT,
						D.INV_APLY_CURR_CD AS CURR_CD,
						1 AS XCRT,
						0 AS TTL_DEBIT,
						D.INV_SUM_AMT AS TTL_CREDIT,
						'A/P Invoice No: '+D.BUY_INV_NO+ ' (Adjusted)' AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						I.INV_SEQ AS REF_SEQ
					FROM
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND I.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					
					UNION ALL
					
					SELECT
						I.INV_SEQ,
						2 AS SLIP_SEQ,
						(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						'C' AS COM_TP,
						I.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						F.INV_AMT AS DEBIT,
						0 AS CREDIT,
						F.INV_CURR_CD AS CURR_CD,
						1 AS XCRT,
						F.INV_AMT AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						F.FRT_CD_NM +' (A/P Invoice No: '+D.BUY_INV_NO+')'+' (Adjusted)' AS SLIP_DESC,
						I.OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						CONVERT(VARCHAR, F.FRT_SEQ) AS REF_SEQ
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
				
					UNION ALL
					
					<isEqual property="proc_ofccd" compareValue="TYO">
						SELECT
							I.INV_SEQ,
							3 AS SLIP_SEQ,
							(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'CO') AS GL_NO,
							'C' AS COM_TP,
							MAX(I.TRDP_CD) AS COM_CD,
							(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
							NULL AS GL_SUB,
							SUM(F.INV_VAT_AMT) AS DEBIT,
							0 AS CREDIT,
							MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
							1 AS XCRT,
							SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
							0 AS TTL_CREDIT,
							'(VAT) (A/P Invoice No: '+I.INV_SEQ+')'+ ' (Adjusted)' AS SLIP_DESC,
							MAX(I.OFC_CD) AS P_OFC_CD,
							'Y' AS VAT_YN,
							I.INV_SEQ AS REF_SEQ	
						FROM
						TB_FRT F,
						TB_INV I,
						TB_INV_DTL D,
						TB_FRT_CD FC
						WHERE 1=1
						AND F.INV_SEQ = I.INV_SEQ
						AND F.INV_SEQ = D.INV_SEQ
						AND F.FRT_CD  = FC.FRT_CD
						AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
						AND ISNULL(I.DELT_FLG,'N') != 'Y'
						AND ISNULL(D.DELT_FLG,'N') != 'Y'
						AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--						AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
					GROUP BY I.INV_SEQ
					</isEqual>
					
					
					<isNotEqual property="proc_ofccd" compareValue="TYO">
						SELECT
							I.INV_SEQ,
							3 AS SLIP_SEQ,
							(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'CO') AS GL_NO,
							'C' AS COM_TP,
							MAX(I.TRDP_CD) AS COM_CD,
							(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
							NULL AS GL_SUB,
							SUM(F.INV_VAT_AMT) AS DEBIT,
							0 AS CREDIT,
							MAX(D.INV_APLY_CURR_CD) AS CURR_CD,
							1 AS XCRT,
							SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
							0 AS TTL_CREDIT,
							'(VAT) (A/P Invoice No: '+I.INV_SEQ+')'+ ' (Adjusted)' AS SLIP_DESC,
							MAX(I.OFC_CD) AS P_OFC_CD,
							'Y' AS VAT_YN,
							I.INV_SEQ AS REF_SEQ	
						FROM
						TB_FRT F,
						TB_INV I,
						TB_TRDP_VAT_OPT V,
						TB_INV_DTL D,
						TB_FRT_CD FC
						WHERE 1=1
						AND F.INV_SEQ = I.INV_SEQ
						AND F.INV_SEQ = D.INV_SEQ
						AND F.FRT_CD  = FC.FRT_CD
						AND I.TRDP_CD = V.TRDP_CD 
						AND V.AP_VAT_LINE = 'Y'
						AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
						AND ISNULL(I.DELT_FLG,'N') != 'Y'
						AND ISNULL(D.DELT_FLG,'N') != 'Y'
						AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--						AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
					GROUP BY I.INV_SEQ
					</isNotEqual>
					
				) A
				WHERE A.INV_SEQ = #inv_seq#
		) X
		GROUP BY X.GL_NO, X.ACCT_GL_NO, SELL_BUY_TP_CD
		ORDER BY MAX(X.INV_SEQ), MAX(X.SLIP_SEQ) ASC				
		
    </select>
    
    
    
    
    <!-- SLIP_MST 2_10_1 대상데이터 조회   -->
    <select id="select2_10_1" parameterClass="java.util.HashMap" resultClass="String">
    	SELECT 
			CONVERT(VARCHAR, C.CMB_INV_SEQ) AS CMB_INV_SEQ
		  FROM
			TB_CMB_INV C,
			TB_INV I
		 WHERE 1=1
		   AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
		   AND I.DELT_FLG = 'N'
		   AND C.INV_DT BETWEEN #s_strdt# AND #s_enddt# 
		   AND ISNULL(C.DELT_FLG,'N') != 'Y'
		   AND C.SELL_BUY_TP_CD = 'S'
		   <isEqual property="f_range_flg" compareValue="Y">
		   	   AND ISNULL(I.CLT_CMPL_FLG, 'N') != 'Y'
		   </isEqual>
		 GROUP BY C.CMB_INV_SEQ
    </select>
    
    <!-- SLIP_MST 2_10_2 대상데이터 조회   -->
    <select id="select2_10_2" parameterClass="String" resultClass="java.util.HashMap">
    	<![CDATA[
    	SELECT
			CONVERT(VARCHAR, A.CMB_INV_SEQ) AS CMB_INV_SEQ, 
			CONVERT(VARCHAR, MAX(A.GUA_YN)) AS GUA,
			CONVERT(VARCHAR, MAX(A.YNG_YN)) AS YNG
		  FROM
			(
				SELECT
				C.CMB_INV_SEQ,
				F.INV_SEQ, F.INV_AMT, F.INV_VAT_AMT,
				(CASE WHEN ISNULL(F.INV_VAT_AMT,0) > 0 AND F.INV_AMT > 0 THEN 1 ELSE 0 END) AS GUA_YN,
				(CASE WHEN ISNULL(F.INV_VAT_AMT,0) = 0 AND F.INV_AMT > 0 THEN 1 ELSE 0 END) AS YNG_YN
				FROM
				TB_CMB_INV C,
				TB_INV I,
				TB_FRT F
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND I.INV_SEQ = F.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') <> 'Y'
				AND ISNULL(F.DELT_FLG,'N') <> 'Y'
				AND C.CMB_INV_SEQ = #value#
			) A
		 GROUP BY A.CMB_INV_SEQ
		 ]]>
    </select>
    
    
    <!-- SLIP_MST 2_10 과세 대상데이터 조회   -->
    <select id="select2_10_MST_GUA" parameterClass="String" resultClass="SlipVO">
    	SELECT 
			C.CMB_INV_SEQ AS REF_NO,
			MAX(C.INV_DT) AS POST_DT,
			MAX(C.INV_DT) AS INV_DT,
			SUM(F.INV_SUM_AMT) AS G_DEBIT,
			SUM(F.INV_SUM_AMT) AS G_CREDIT,
			MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
			'Combined A/R Invoice No (TAXABLE): ' + MAX(C.INV_NO) AS RMK,
			'N' AS DELT_FLG,
			MAX(C.RGST_OFC_CD) AS P_OFC_CD
			FROM
			TB_CMB_INV C,
			TB_INV I,
			TB_FRT F
			WHERE 1=1
			AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.INV_SEQ = F.INV_SEQ
			AND CONVERT(VARCHAR, C.CMB_INV_SEQ) = #value#
			AND ISNULL(F.INV_VAT_AMT,0) != 0
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(C.DELT_FLG,'N') != 'Y'
			AND ISNULL(F.DELT_FLG,'N') != 'Y'
	 	GROUP BY C.CMB_INV_SEQ
    </select>
    
    
    
    
    <!-- SLIP_DETAIL 2_10 과세 대상데이터 조회 COMBINE LOCAL INVOICE  -->
    <select id="select2_10_DETAIL_GUA" parameterClass="String" resultClass="SlipVO">
    	
    	SELECT
			A.CMB_INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
			FROM
			(
				SELECT
					C.CMB_INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = MAX(C.RGST_OFC_CD)) AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_SUM_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_SUM_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'Combined Local Invoice No (TAXABLE): '+MAX(C.INV_NO) AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_INV I,
				TB_FRT F
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND I.INV_SEQ = F.INV_SEQ
				AND ISNULL(F.INV_VAT_AMT,0) != 0
				AND ISNULL(C.DELT_FLG,'N') != 'Y'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				GROUP BY C.CMB_INV_SEQ

				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					F.INV_AMT AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					F.INV_AMT AS TTL_CREDIT,
					F.FRT_CD_NM +' (Combined A/R Invoice No: '+C.INV_NO+')' AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					F.FRT_SEQ AS REF_SEQ	
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) != 0				
				
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					SUM(F.INV_VAT_AMT) AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
					'(VAT) (Combined A/R Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_FRT_CD FC
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) != 0
			GROUP BY C.CMB_INV_SEQ
			) A
			WHERE A.CMB_INV_SEQ = #value#
			ORDER BY A.CMB_INV_SEQ, A.SLIP_SEQ ASC
			
    </select>
    
    
    
    
    <!-- SLIP_MST 2_10 영세 대상데이터 조회   -->
    <select id="select2_10_MST_YNG" parameterClass="java.util.HashMap" resultClass="String">
    	SELECT 
			C.CMB_INV_SEQ AS REF_NO,
			MAX(C.INV_DT) AS POST_DT,
			MAX(C.INV_DT) AS INV_DT,
			SUM(F.INV_SUM_AMT) AS G_DEBIT,
			SUM(F.INV_SUM_AMT) AS G_CREDIT,
			MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
			'Combined A/R Invoice No (NONE TAXABLE): ' + MAX(C.INV_NO) AS RMK,
			'N' AS DELT_FLG,
			MAX(C.RGST_OFC_CD) AS P_OFC_CD
			FROM
			TB_CMB_INV C,
			TB_INV I,
			TB_FRT F
			WHERE 1=1
			AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.INV_SEQ = F.INV_SEQ
			AND C.CMB_INV_SEQ = #value#
			AND ISNULL(F.INV_VAT_AMT,0) = 0
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(C.DELT_FLG,'N') != 'Y'
			AND ISNULL(F.DELT_FLG,'N') != 'Y'
	 	GROUP BY C.CMB_INV_SEQ
    </select>
    
    
    <!-- SLIP_DETAIL 2_10 영세 대상데이터 조회 COMBINE LOCAL INVOICE  -->
    <select id="select2_10_DETAIL_YNG" parameterClass="String" resultClass="SlipVO">
    	
    	SELECT
			A.CMB_INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
			FROM
			(
				SELECT
					C.CMB_INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = MAX(C.RGST_OFC_CD)) AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_SUM_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_SUM_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'Combined Local Invoice No (NONE TAXABLE): '+MAX(C.INV_NO) AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_INV I,
				TB_FRT F
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND I.INV_SEQ = F.INV_SEQ
				AND ISNULL(F.INV_VAT_AMT,0) != 0
				AND ISNULL(C.DELT_FLG,'N') != 'Y'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				GROUP BY C.CMB_INV_SEQ

				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					F.INV_AMT AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					F.INV_AMT AS TTL_CREDIT,
					F.FRT_CD_NM +' (Combined A/R Invoice No: '+C.INV_NO+')' AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					F.FRT_SEQ AS REF_SEQ	
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) != 0				
				
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					SUM(F.INV_VAT_AMT) AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
					'(VAT) (Combined Local Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_FRT_CD FC
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) = 0
			GROUP BY C.CMB_INV_SEQ
			) A
			WHERE A.CMB_INV_SEQ = #value#
			ORDER BY A.CMB_INV_SEQ, A.SLIP_SEQ ASC
    </select>
    
    
    
    <!-- SLIP_MST 2_11_1 대상데이터 조회   -->
    <select id="select2_11_1" parameterClass="java.util.HashMap" resultClass="String">
    	SELECT 
			CONVERT(VARCHAR, C.CMB_INV_SEQ) AS CMB_INV_SEQ
		  FROM
			TB_CMB_INV C,
			TB_INV I
		 WHERE 1=1
		   AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
		   AND I.DELT_FLG = 'N'
		   AND C.INV_DT BETWEEN #s_strdt# AND #s_enddt# 
		   AND ISNULL(C.DELT_FLG,'N') != 'Y'
		   AND C.SELL_BUY_TP_CD = 'B'
		   <isEqual property="f_range_flg" compareValue="Y">
		   	   AND ISNULL(I.CLT_CMPL_FLG, 'N') != 'Y'
		   </isEqual>
		 GROUP BY C.CMB_INV_SEQ
    </select>
    
    
    
    <!-- SLIP_MST 2_11_2 대상데이터 조회   -->
    <select id="select2_11_2" parameterClass="String" resultClass="java.util.HashMap">
    	<![CDATA[
    	SELECT
			CONVERT(VARCHAR, A.CMB_INV_SEQ) AS CMB_INV_SEQ,
			CONVERT(VARCHAR, MAX(A.GUA_YN)) AS GUA,
			CONVERT(VARCHAR, MAX(A.YNG_YN)) AS YNG
		  FROM
			(
				SELECT
					C.CMB_INV_SEQ,
					F.INV_SEQ, F.INV_AMT, F.INV_VAT_AMT,
					(CASE WHEN ISNULL(F.INV_VAT_AMT,0) > 0 AND F.INV_AMT > 0 THEN 1 ELSE 0 END) AS GUA_YN,
					(CASE WHEN ISNULL(F.INV_VAT_AMT,0) = 0 AND F.INV_AMT > 0 THEN 1 ELSE 0 END) AS YNG_YN
				FROM
				TB_CMB_INV C,
				TB_INV I,
				TB_FRT F
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND I.INV_SEQ = F.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') <> 'Y'
				AND ISNULL(F.DELT_FLG,'N') <> 'Y'
				AND C.CMB_INV_SEQ = #value#
			) A
		 GROUP BY A.CMB_INV_SEQ
		 ]]>
    </select>
    
    
    
    <!-- SLIP_MST 2_11 과세 대상데이터 조회   -->
    <select id="select2_11_MST_GUA" parameterClass="String" resultClass="SlipVO">
    	
    	SELECT 
			C.CMB_INV_SEQ AS REF_NO,
			MAX(C.INV_DT) AS POST_DT,
			MAX(C.INV_DT) AS INV_DT,
			SUM(F.INV_SUM_AMT) AS G_DEBIT,
			SUM(F.INV_SUM_AMT) AS G_CREDIT,
			MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
			'Combined Invoice No (TAXABLE): ' + MAX(C.INV_NO) AS RMK,
			'N' AS DELT_FLG,
			MAX(C.RGST_OFC_CD) AS P_OFC_CD
			FROM
			TB_CMB_INV C,
			TB_INV I,
			TB_FRT F
			WHERE 1=1
			AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.INV_SEQ = F.INV_SEQ
			AND C.CMB_INV_SEQ = #value#
			AND ISNULL(F.INV_VAT_AMT,0) != 0
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(C.DELT_FLG,'N') != 'Y'
			AND ISNULL(F.DELT_FLG,'N') != 'Y'
	 	GROUP BY C.CMB_INV_SEQ
	 	
    </select>
    
    
    
    
    <!-- SLIP_DETAIL 2_11 과세 대상데이터 조회 COMBINE A/P  -->
    <select id="select2_11_DETAIL_GUA" parameterClass="String" resultClass="SlipVO">
    	
    	SELECT
			A.CMB_INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
			FROM
			(
				SELECT
					C.CMB_INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = MAX(C.RGST_OFC_CD)) AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					SUM(F.INV_SUM_AMT) AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					SUM(F.INV_SUM_AMT) AS TTL_CREDIT,
					'Combined Invoice No (TAXABLE): '+MAX(C.INV_NO) AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_INV I,
				TB_FRT F
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND I.INV_SEQ = F.INV_SEQ
				AND ISNULL(F.INV_VAT_AMT,0) != 0
				AND ISNULL(C.DELT_FLG,'N') != 'Y'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				GROUP BY C.CMB_INV_SEQ

				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					F.INV_AMT AS DEBIT,
					0 AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					F.INV_AMT AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					F.FRT_CD_NM +' (Combined Invoice No: '+C.INV_NO+')' AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					F.FRT_SEQ AS REF_SEQ	
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) != 0				
				
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_VAT_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'(VAT) (Combined Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_FRT_CD FC
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) != 0
			GROUP BY C.CMB_INV_SEQ
			) A
			WHERE A.CMB_INV_SEQ = #value#
			ORDER BY A.CMB_INV_SEQ, A.SLIP_SEQ ASC
    </select>
    
    
    <!-- SLIP_MST 2_11 영세 대상데이터 조회   -->
    <select id="select2_11_MST_YNG" parameterClass="String" resultClass="SlipVO">
    	
    	SELECT 
			C.CMB_INV_SEQ AS REF_NO,
			MAX(C.INV_DT) AS POST_DT,
			MAX(C.INV_DT) AS INV_DT,
			SUM(F.INV_SUM_AMT) AS G_DEBIT,
			SUM(F.INV_SUM_AMT) AS G_CREDIT,
			MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
			'Combined Invoice No (NONE TAXABLE): ' + MAX(C.INV_NO) AS RMK,
			'N' AS DELT_FLG,
			MAX(C.RGST_OFC_CD) AS P_OFC_CD
			FROM
			TB_CMB_INV C,
			TB_INV I,
			TB_FRT F
			WHERE 1=1
			AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.INV_SEQ = F.INV_SEQ
			AND C.CMB_INV_SEQ = #value#
			AND ISNULL(F.INV_VAT_AMT,0) = 0
			AND ISNULL(I.DELT_FLG,'N') != 'Y'
			AND ISNULL(C.DELT_FLG,'N') != 'Y'
			AND ISNULL(F.DELT_FLG,'N') != 'Y'
	 	GROUP BY C.CMB_INV_SEQ
    </select>
    
    
    <!-- SLIP_DETAIL 2_11 영세 대상데이터 조회 COMBINE A/P  -->
    <select id="select2_11_DETAIL_YNG" parameterClass="String" resultClass="SlipVO">
    	
    	SELECT
			A.CMB_INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
			FROM
			(
				SELECT
					C.CMB_INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = MAX(C.RGST_OFC_CD)) AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_SUM_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					SUM(F.INV_SUM_AMT) AS TTL_CREDIT,
					'Combined Invoice No (NONE TAXABLE): '+MAX(C.INV_NO) AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_INV I,
				TB_FRT F
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND I.INV_SEQ = F.INV_SEQ
				AND ISNULL(F.INV_VAT_AMT,0) = 0
				AND ISNULL(C.DELT_FLG,'N') != 'Y'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				GROUP BY C.CMB_INV_SEQ

				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					F.INV_AMT AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					F.INV_AMT AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					F.FRT_CD_NM +' (Combined Invoice No: '+C.INV_NO+')' AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					F.FRT_SEQ AS REF_SEQ	
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) = 0				
				
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					SUM(F.INV_VAT_AMT) AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'(VAT) (Combined Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_FRT_CD FC
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) = 0
			GROUP BY C.CMB_INV_SEQ
			) A
			WHERE A.CMB_INV_SEQ = #value#
			ORDER BY A.CMB_INV_SEQ, A.SLIP_SEQ ASC
    </select>
    
    
    <!-- SLIP_MST 2_12 대상데이터 조회   -->
    <select id="select2_12_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			C.CMB_INV_SEQ AS REF_NO,
			MAX(C.INV_DT) AS POST_DT,
			MAX(C.INV_DT) AS INV_DT,
			MAX(C.INV_SUM_AMT) AS G_DEBIT,
			MAX(C.INV_SUM_AMT) AS G_CREDIT,
			MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
			'Combined CR/DB No: ' + MAX(C.INV_NO) AS RMK,
			'N' AS DELT_FLG,
			MAX(C.RGST_OFC_CD) AS P_OFC_CD
			FROM
			TB_CMB_INV C,
			TB_INV I,
			TB_INV_DTL ID
			WHERE 1=1
			AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.INV_SEQ = ID.INV_SEQ			
			AND I.DELT_FLG = 'N'
			AND C.INV_DT BETWEEN #s_strdt# AND #s_enddt# 
			AND ISNULL(C.DELT_FLG,'N') != 'Y'
			AND C.SELL_BUY_TP_CD IN ('D','C')
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(ID.JNR_YN, 'N') != 'Y'
			</isEqual>
		GROUP BY C.CMB_INV_SEQ
		
    </select>
    
    
    
    
    
    
    
    
    
    
    
    
    <!-- SLIP_MST 2_10 대상데이터 조회   -->
    <select id="select2_10_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	SELECT 
			C.CMB_INV_SEQ AS REF_NO,
			MAX(C.INV_DT) AS POST_DT,
			MAX(C.INV_DT) AS INV_DT,
			MAX(C.INV_SUM_AMT) AS G_DEBIT,
			(SELECT SUM(INV_TTL_SUM_AMT) FROM TB_INV WHERE CMB_INV_SEQ = C.CMB_INV_SEQ AND ISNULL(DELT_FLG,'N') != 'Y') AS G_CREDIT,
			MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
			'Combined Local Invoice No: ' + MAX(C.INV_NO) AS RMK,
			'N' AS DELT_FLG,
			MAX(C.RGST_OFC_CD) AS P_OFC_CD
			FROM
			TB_CMB_INV C,
			TB_INV I,
			TB_INV_DTL ID
			WHERE 1=1
			AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.INV_SEQ = ID.INV_SEQ			
			AND I.DELT_FLG = 'N'
			AND C.INV_DT BETWEEN #s_strdt# AND #s_enddt# 
			AND ISNULL(C.DELT_FLG,'N') != 'Y'
			AND C.SELL_BUY_TP_CD = 'S'
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(ID.JNR_YN, 'N') != 'Y'
			</isEqual>				
	 	GROUP BY C.CMB_INV_SEQ
    </select>
    
    
    
    
    <!-- SLIP_DETAIL 2_10 대상데이터 조회 COMBINE LOCAL INVOICE  -->
    <select id="select2_10_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<!--  
    	SELECT
			A.CMB_INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
			FROM
			(
				SELECT
					C.CMB_INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = C.RGST_OFC_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					C.INV_SUM_AMT AS DEBIT,
					0 AS CREDIT,
					C.INV_APLY_CURR_CD AS CURR_CD,
					1 AS XCRT,
					C.INV_SUM_AMT AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'Combined Invoice No: '+C.INV_NO AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C
				WHERE 1=1
				AND ISNULL(C.DELT_FLG,'N') != 'Y'
				
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					F.INV_AMT AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					F.INV_AMT AS TTL_CREDIT,
					F.FRT_CD_NM +' (Combined Local Invoice No: '+C.INV_NO+')' AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					F.FRT_SEQ AS REF_SEQ	
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'	
				
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					SUM(F.INV_VAT_AMT) AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
					'(VAT) (Combined Local Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_FRT_CD FC
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) != 0
			GROUP BY C.CMB_INV_SEQ
				
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					SUM(F.INV_VAT_AMT) AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
					'(VAT) (Combined Local Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_FRT_CD FC
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) = 0
			GROUP BY C.CMB_INV_SEQ
			
			
			) A
			WHERE A.CMB_INV_SEQ = #inv_seq#
			ORDER BY A.CMB_INV_SEQ, A.SLIP_SEQ ASC
		  -->
		
		
	SELECT  MAX(X.CMB_INV_SEQ) 	AS CMB_INV_SEQ,
			MAX(X.SLIP_SEQ)    	AS SLIP_SEQ,
			X.GL_NO       	AS GL_NO,
			MAX(X.COM_TP)      	AS COM_TP,
			MAX(X.COM_CD)      	AS COM_CD,
			MAX(X.COM_NM)      	AS COM_NM,
			MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
			SUM(X.DEBIT)       	AS DEBIT,
			SUM(X.CREDIT)      	AS CREDIT,
			MAX(X.CURR_CD)     	AS CURR_CD,
			MAX(X.XCRT)        	AS XCRT,
			SUM(X.TTL_DEBIT)   	AS TTL_DEBIT,
			SUM(X.TTL_CREDIT)  	AS TTL_CREDIT,
			MAX(X.SLIP_DESC)   	AS SLIP_DESC,
			MAX(X.P_OFC_CD)    	AS P_OFC_CD,
			MAX(X.VAT_YN)      	AS VAT_YN,
			MAX(X.REF_SEQ)     	AS REF_SEQ,
			X.ACCT_GL_NO       	AS ACCT_GL_NO
     FROM(
			SELECT
				A.CMB_INV_SEQ,
				ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				A.DEBIT,
				A.CREDIT,
				A.CURR_CD,
				A.XCRT,
				A.TTL_DEBIT,
				A.TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO
				FROM
				(
					SELECT
						C.CMB_INV_SEQ,
						1 AS SLIP_SEQ,
						(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = C.RGST_OFC_CD) AS GL_NO,
						'C' AS COM_TP,
						C.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						C.INV_SUM_AMT AS DEBIT,
						0 AS CREDIT,
						C.INV_APLY_CURR_CD AS CURR_CD,
						1 AS XCRT,
						C.INV_SUM_AMT AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						'Combined Invoice No: '+C.INV_NO AS SLIP_DESC,
						C.RGST_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						C.CMB_INV_SEQ AS REF_SEQ
					FROM
					TB_CMB_INV C
					WHERE 1=1
					AND ISNULL(C.DELT_FLG,'N') != 'Y'
					
					UNION ALL
					
					SELECT
						C.CMB_INV_SEQ,
						2 AS SLIP_SEQ,
						(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						'C' AS COM_TP,
						C.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						0 AS DEBIT,
						F.INV_AMT AS CREDIT,
						F.INV_CURR_CD AS CURR_CD,
						1 AS XCRT,
						0 AS TTL_DEBIT,
						F.INV_AMT AS TTL_CREDIT,
						F.FRT_CD_NM +' (Combined Local Invoice No: '+C.INV_NO+')' AS SLIP_DESC,
						C.RGST_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						F.FRT_SEQ AS REF_SEQ	
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'	
					
					UNION ALL
					
					SELECT
						C.CMB_INV_SEQ,
						3 AS SLIP_SEQ,
						(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
						'C' AS COM_TP,
						MAX(C.TRDP_CD) AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
						NULL AS GL_SUB,
						0 AS DEBIT,
						SUM(F.INV_VAT_AMT) AS CREDIT,
						MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
						1 AS XCRT,
						0 AS TTL_DEBIT,
						SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
						'(VAT) (Combined Local Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
						MAX(C.RGST_OFC_CD) AS P_OFC_CD,
						'Y' AS VAT_YN,
						C.CMB_INV_SEQ AS REF_SEQ
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_FRT_CD FC
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AR_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
					AND F.FRT_CD NOT IN ('TAXB')
					AND ISNULL(I.DELT_FLG,'N')  != 'Y'
					AND ISNULL(F.DELT_FLG,'N')  != 'Y'
					AND ISNULL(F.INV_VAT_AMT,0) != 0
				GROUP BY C.CMB_INV_SEQ
				
					UNION ALL
					
					SELECT
						C.CMB_INV_SEQ,
						3 AS SLIP_SEQ,
						(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
						'C' AS COM_TP,
						MAX(C.TRDP_CD) AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
						NULL AS GL_SUB,
						0 AS DEBIT,
						SUM(F.INV_VAT_AMT) AS CREDIT,
						MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
						1 AS XCRT,
						0 AS TTL_DEBIT,
						SUM(F.INV_VAT_AMT) AS TTL_CREDIT,
						'(VAT) (Combined Local Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
						MAX(C.RGST_OFC_CD) AS P_OFC_CD,
						'Y' AS VAT_YN,
						C.CMB_INV_SEQ AS REF_SEQ
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_FRT_CD FC
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AR_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
					AND F.FRT_CD NOT IN ('TAXB')
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.INV_VAT_AMT,0) = 0
				GROUP BY C.CMB_INV_SEQ
					
				) A
				WHERE CONVERT(VARCHAR, C.CMB_INV_SEQ) = #inv_seq#
			) X
		
		GROUP BY X.GL_NO, X.ACCT_GL_NO
		ORDER BY MAX(X.CMB_INV_SEQ), MAX(X.SLIP_SEQ) ASC
    </select>
    
    
    
    <!-- SLIP_MST 2_11 대상데이터 조회   -->
    <select id="select2_11_MST" parameterClass="java.util.HashMap" resultClass="SlipVO">
		SELECT 
			C.CMB_INV_SEQ AS REF_NO,
			MAX(C.INV_DT) AS POST_DT,
			MAX(C.INV_DT) AS INV_DT,
			(SELECT SUM(INV_TTL_SUM_AMT) FROM TB_INV WHERE CMB_INV_SEQ = C.CMB_INV_SEQ AND ISNULL(DELT_FLG,'N') != 'Y') AS G_DEBIT,
			MAX(C.INV_SUM_AMT) AS G_CREDIT,
			MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
			'Combined A/P No: ' + MAX(C.BUY_INV_NO) AS RMK,
			'N' AS DELT_FLG,
			MAX(C.RGST_OFC_CD) AS P_OFC_CD
		 FROM
			TB_CMB_INV C,
			TB_INV I,
			TB_INV_DTL ID
			WHERE 1=1
			AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.INV_SEQ = ID.INV_SEQ
			AND I.DELT_FLG = 'N'
			AND C.INV_DT BETWEEN #s_strdt# AND #s_enddt# 
			AND ISNULL(C.DELT_FLG,'N') != 'Y'
			<isEqual property="f_range_flg" compareValue="Y">
				AND ISNULL(ID.JNR_YN, 'N') != 'Y'
			</isEqual>
			AND C.SELL_BUY_TP_CD = 'B'
		GROUP BY C.CMB_INV_SEQ
    </select>
    
    
    
    
    <!-- SLIP_DETAIL 2_11 대상데이터 조회 COMBINE A/P  -->
    <select id="select2_11_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	<!-- 
    	SELECT
			A.CMB_INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
			FROM
			(
				SELECT
					C.CMB_INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = C.RGST_OFC_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					0 AS DEBIT,
					C.INV_SUM_AMT AS CREDIT,
					C.INV_APLY_CURR_CD AS CURR_CD,
					1 AS XCRT,
					0 AS TTL_DEBIT,
					C.INV_SUM_AMT AS TTL_CREDIT,
					'Combined A/P Invoice No: '+C.BUY_INV_NO AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C
				WHERE 1=1
				AND ISNULL(C.DELT_FLG,'N') != 'Y'
				
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					F.INV_AMT AS DEBIT,
					0 AS CREDIT,
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					F.INV_AMT AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					F.FRT_CD_NM +' (Combined A/P No: '+C.BUY_INV_NO+')' AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					F.FRT_SEQ AS REF_SEQ	
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
			
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_VAT_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'(VAT) (Combined Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_FRT_CD FC
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) != 0
			GROUP BY C.CMB_INV_SEQ
			
				UNION ALL
				
				SELECT
					C.CMB_INV_SEQ,
					3 AS SLIP_SEQ,
					(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
					'C' AS COM_TP,
					MAX(C.TRDP_CD) AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
					NULL AS GL_SUB,
					SUM(F.INV_VAT_AMT) AS DEBIT,
					0 AS CREDIT,
					MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
					1 AS XCRT,
					SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
					0 AS TTL_CREDIT,
					'(VAT) (Combined Invoice No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
					MAX(C.RGST_OFC_CD) AS P_OFC_CD,
					'Y' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I,
				TB_TRDP_VAT_OPT V,
				TB_FRT_CD FC
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND F.FRT_CD  = FC.FRT_CD
				AND I.TRDP_CD = V.TRDP_CD 
				AND V.AR_VAT_LINE = 'Y'
				AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.INV_VAT_AMT,0) = 0
			GROUP BY C.CMB_INV_SEQ

			) A
			WHERE A.CMB_INV_SEQ = #inv_seq#
			ORDER BY A.CMB_INV_SEQ, A.SLIP_SEQ ASC
		  -->
		
		
		
		
	SELECT  MAX(X.CMB_INV_SEQ) AS CMB_INV_SEQ,
			MAX(X.SLIP_SEQ)    AS SLIP_SEQ,
			X.GL_NO       AS GL_NO,
			MAX(X.COM_TP)      AS COM_TP,
			MAX(X.COM_CD)      AS COM_CD,
			MAX(X.COM_NM)      AS COM_NM,
			MAX(ISNULL(X.GL_SUB,'')) AS GL_SUB,
			SUM(X.DEBIT)       AS DEBIT,
			SUM(X.CREDIT)      AS CREDIT,
			MAX(X.CURR_CD)     AS CURR_CD,
			MAX(X.XCRT)        AS XCRT,
			SUM(X.TTL_DEBIT)   AS TTL_DEBIT,
			SUM(X.TTL_CREDIT)  AS TTL_CREDIT,
			MAX(X.SLIP_DESC)   AS SLIP_DESC,
			MAX(X.P_OFC_CD)    AS P_OFC_CD,
			MAX(X.VAT_YN)      AS VAT_YN,
			MAX(X.REF_SEQ)     AS REF_SEQ,
			X.ACCT_GL_NO       AS ACCT_GL_NO
	  FROM(	SELECT
				A.CMB_INV_SEQ,
				ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE A.GL_NO
				END AS GL_NO,
				A.COM_TP,
				A.COM_CD,
				A.COM_NM,
				A.GL_SUB,
				A.DEBIT,
				A.CREDIT,
				A.CURR_CD,
				A.XCRT,
				A.TTL_DEBIT,
				A.TTL_CREDIT,
				A.SLIP_DESC,
				A.P_OFC_CD,
				A.VAT_YN,
				A.REF_SEQ,
				CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
				     ELSE (SELECT TOP 1 CASE WHEN (ACCT_GL_CD = '30500' OR ACCT_GL_CD = '12700') AND A.DEBIT = 0 AND A.CREDIT = 0 THEN ACCT_GL_CD + '_1'
				                             ELSE ACCT_GL_CD
				                        END
				             FROM TB_GL_CD 
				            WHERE GL_CD = A.GL_NO) 
				END AS ACCT_GL_NO
				FROM
				(
					SELECT
						C.CMB_INV_SEQ,
						1 AS SLIP_SEQ,
						(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = C.RGST_OFC_CD) AS GL_NO,
						'C' AS COM_TP,
						C.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						0 AS DEBIT,
						C.INV_SUM_AMT AS CREDIT,
						C.INV_APLY_CURR_CD AS CURR_CD,
						1 AS XCRT,
						0 AS TTL_DEBIT,
						C.INV_SUM_AMT AS TTL_CREDIT,
						'Combined A/P Invoice No: '+C.BUY_INV_NO AS SLIP_DESC,
						C.RGST_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						C.CMB_INV_SEQ AS REF_SEQ
					FROM
					TB_CMB_INV C
					WHERE 1=1
					AND ISNULL(C.DELT_FLG,'N') != 'Y'
					
					UNION ALL
					
					SELECT
						C.CMB_INV_SEQ,
						2 AS SLIP_SEQ,
						(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						'C' AS COM_TP,
						C.TRDP_CD AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
						NULL AS GL_SUB,
						F.INV_AMT AS DEBIT,
						0 AS CREDIT,
						F.INV_CURR_CD AS CURR_CD,
						1 AS XCRT,
						F.INV_AMT AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						F.FRT_CD_NM +' (Combined A/P No: '+C.BUY_INV_NO+')' AS SLIP_DESC,
						C.RGST_OFC_CD AS P_OFC_CD,
						'' AS VAT_YN,
						F.FRT_SEQ AS REF_SEQ	
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
				
					UNION ALL
					
					SELECT
						C.CMB_INV_SEQ,
						3 AS SLIP_SEQ,
						(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'CO') AS GL_NO,
						'C' AS COM_TP,
						MAX(C.TRDP_CD) AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
						NULL AS GL_SUB,
						SUM(F.INV_VAT_AMT) AS DEBIT,
						0 AS CREDIT,
						MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
						1 AS XCRT,
						SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						'(VAT) (Combined A/P No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
						MAX(C.RGST_OFC_CD) AS P_OFC_CD,
						'Y' AS VAT_YN,
						C.CMB_INV_SEQ AS REF_SEQ
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_FRT_CD FC
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AP_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
					AND F.FRT_CD NOT IN ('TAXB')
					AND ISNULL(I.DELT_FLG,'N')  != 'Y'
					AND ISNULL(F.DELT_FLG,'N')  != 'Y'
					AND ISNULL(F.INV_VAT_AMT,0) != 0
				GROUP BY C.CMB_INV_SEQ
				
				
					UNION ALL
					
					SELECT
						C.CMB_INV_SEQ,
						3 AS SLIP_SEQ,
						(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'CO') AS GL_NO,
						'C' AS COM_TP,
						MAX(C.TRDP_CD) AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
						NULL AS GL_SUB,
						SUM(F.INV_VAT_AMT) AS DEBIT,
						0 AS CREDIT,
						MAX(C.INV_APLY_CURR_CD) AS CURR_CD,
						1 AS XCRT,
						SUM(F.INV_VAT_AMT) AS TTL_DEBIT,
						0 AS TTL_CREDIT,
						'(VAT) (Combined A/P No: '+CONVERT(VARCHAR, MAX(C.INV_NO))+')' AS SLIP_DESC,
						MAX(C.RGST_OFC_CD) AS P_OFC_CD,
						'Y' AS VAT_YN,
						C.CMB_INV_SEQ AS REF_SEQ
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_FRT_CD FC
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AP_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
					AND F.FRT_CD NOT IN ('TAXB')
					AND ISNULL(I.DELT_FLG,'N')  != 'Y'
					AND ISNULL(F.DELT_FLG,'N')  != 'Y'
					AND ISNULL(F.INV_VAT_AMT,0)  = 0
				GROUP BY C.CMB_INV_SEQ
				
				) A
				WHERE CMB_INV_SEQ = #inv_seq#
			) X
		
		GROUP BY X.GL_NO, X.ACCT_GL_NO
		ORDER BY MAX(X.CMB_INV_SEQ), MAX(X.SLIP_SEQ) ASC
		
    </select>
    
    
    
    
    
    
    
    
    
    
    <!-- SLIP_DETAIL 2_12 대상데이터 조회 COMBINE DEBIT/CREDIT   -->
    <select id="select2_12_DETAIL" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	SELECT
			A.CMB_INV_SEQ,
			ROW_NUMBER()OVER(ORDER BY A.SLIP_SEQ) AS SLIP_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE A.GL_NO
			END AS GL_NO,
			A.COM_TP,
			A.COM_CD,
			A.COM_NM,
			A.GL_SUB,
			A.DEBIT,
			A.CREDIT,
			A.CURR_CD,
			A.XCRT,
			A.TTL_DEBIT,
			A.TTL_CREDIT,
			A.SLIP_DESC,
			A.P_OFC_CD,
			A.VAT_YN,
			A.REF_SEQ,
			CASE WHEN (A.GL_NO IS NULL OR A.GL_NO = '') THEN 'XXXXX'
			     ELSE (SELECT TOP 1 ACCT_GL_CD FROM TB_GL_CD WHERE GL_CD = A.GL_NO) 
			END AS ACCT_GL_NO
			FROM
			(
				SELECT
					C.CMB_INV_SEQ,
					1 AS SLIP_SEQ,
					(SELECT GL_AGENT_AR FROM TB_OFC WHERE OFC_CD = C.RGST_OFC_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,
					(CASE
						WHEN C.SELL_BUY_TP_CD = 'D' THEN C.INV_SUM_AMT
						ELSE 0
					END) AS DEBIT,
					(CASE
						WHEN C.SELL_BUY_TP_CD = 'C' THEN C.INV_SUM_AMT
						ELSE 0
					END) AS CREDIT,	
					C.INV_APLY_CURR_CD AS CURR_CD,
					1 AS XCRT,
					(CASE
						WHEN C.SELL_BUY_TP_CD = 'D' THEN C.INV_SUM_AMT
						ELSE 0
					END) AS TTL_DEBIT,
					(CASE
						WHEN C.SELL_BUY_TP_CD = 'C' THEN C.INV_SUM_AMT
						ELSE 0
					END) AS TTL_CREDIT,	
					'CR/DB No: '+C.INV_NO AS SLIP_DESC,
					C.RGST_OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					C.CMB_INV_SEQ AS REF_SEQ
				FROM
				TB_CMB_INV C
				WHERE 1=1
				AND ISNULL(C.DELT_FLG,'N') != 'Y'
			
				UNION ALL
			
				SELECT
					C.CMB_INV_SEQ,
					2 AS SLIP_SEQ,
					(SELECT GL_CD_PRNR FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
					'C' AS COM_TP,
					C.TRDP_CD AS COM_CD,
					(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
					NULL AS GL_SUB,	
					F.CR_AMT AS DEBIT,
					F.INV_SUM_AMT AS CREDIT,		
					F.INV_CURR_CD AS CURR_CD,
					1 AS XCRT,
					F.CR_AMT AS TTL_DEBIT,
					F.INV_SUM_AMT AS TTL_CREDIT,	
					F.FRT_CD_NM +' (CR/DB No: '+C.INV_NO+')' AS SLIP_DESC,
					I.OFC_CD AS P_OFC_CD,
					'' AS VAT_YN,
					F.FRT_SEQ AS REF_SEQ	
				FROM
				TB_CMB_INV C,
				TB_FRT F,
				TB_INV I
				WHERE 1=1
				AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
				AND F.INV_SEQ = I.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(F.DELT_FLG,'N') != 'Y'
			) A
			WHERE A.CMB_INV_SEQ = #inv_seq#
			ORDER BY A.CMB_INV_SEQ, A.SLIP_SEQ ASC
    </select>
    
    
    <!-- INVOICE MASTER 마감처리를 한다. CLT_CMPL_FLG UPDATE   -->
    <insert id="updateInv_Mst_Magam" parameterClass="java.util.HashMap">
    	UPDATE TB_INV
    	   SET CLT_CMPL_FLG = 	'Y'
    	 WHERE INV_SEQ = #inv_seq#
    </insert>
    
    <!-- INVOICE DETAIL 마감처리를 한다. CLT_CMPL_FLG UPDATE   -->
    <insert id="updateInv_Dtl_Magam" parameterClass="java.util.HashMap">
    	UPDATE TB_INV_DTL
    	   SET CLT_CMPL_FLG = 	'Y'
    	      ,BLOCK_DT 	= 	#s_enddt#
    	      ,JNR_YN 		= 	'Y'
    	      ,JNR_DT 		= 	#s_enddt#
			    ,modi_tms			= GETUTCDATE()
    	 WHERE INV_SEQ = #inv_seq#
    </insert>
    
    
    <!-- JOURNAL 마감처리를 한다. CLT_CMPL_FLG UPDATE   -->
    <insert id="updateJnr_Magam" parameterClass="java.util.HashMap">
    	UPDATE TB_JNR_MST
    	   SET CLT_CMPL_FLG = 'Y'
    	   	  ,BLOCK_DT 	= 	#s_enddt#
    	      ,JNR_YN 		= 	'Y'
    	      ,JNR_DT 		= 	#s_enddt# 
    	 WHERE JNR_NO = #jnr_no#
    </insert>
    
    
    <!-- FREIGHT 마감처리를 한다. CFM_FLG = 'Y' UPDATE   -->
    <insert id="updateFrt_Magam" parameterClass="java.util.HashMap">
    	UPDATE TB_FRT
    	   SET CFM_FLG 	= 'Y'
    	 WHERE INV_SEQ = #inv_seq#
    </insert>
    
    
    <!-- INVOICE 에 매핑되어있는 BL 데이터 조회   -->
    <select id="selectINV_BL_LIST" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT DISTINCT(B.INTG_BL_SEQ) AS INTG_BL_SEQ
    	      ,B.BIZ_CLSS_CD
		  FROM TB_INTG_BL B
		      ,TB_FRT F
		      ,TB_INV I
		WHERE 1=1
		  AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
		  AND F.INV_SEQ = I.INV_SEQ
		  AND I.INV_SEQ = #inv_seq#    
		  AND B.DELT_FLG = 'N'
		  AND F.DELT_FLG = 'N'
		  AND I.DELT_FLG = 'N'
				  
		UNION ALL
		
		SELECT DISTINCT(O.OTH_SEQ) AS INTG_BL_SEQ
    	      ,'O' AS BIZ_CLSS_CD
		  FROM TB_OTH_SALES O
		      ,TB_FRT F
		      ,TB_INV I
		WHERE 1=1
		  AND O.OTH_SEQ = F.OTH_SEQ
		  AND F.INV_SEQ = I.INV_SEQ
		  AND I.INV_SEQ = #inv_seq#    
		  AND O.DELT_FLG = 'N'
		  AND F.DELT_FLG = 'N'
		  AND I.DELT_FLG = 'N'	  
    </select>
    
    
    <!-- BL 데이터 조회   -->
    <select id="selectBL_LIST" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT INTG_BL_SEQ
    	  FROM TB_INTG_BL
		WHERE post_dt BETWEEN #s_strdt# AND #s_enddt#
		  AND delt_flg = 'N'
    </select>
    
    <!-- BL 데이터 조회   -->
    <select id="selectOther_BL_LIST" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT OTH_SEQ
    	  FROM TB_OTH_SALES
		WHERE post_dt BETWEEN #s_strdt# AND #s_enddt#
		  AND delt_flg = 'N'
    </select>
    
    
    <!-- JOURNAL 에 매핑되어있는 BL 데이터 조회   -->
    <select id="selectJNR_BL_LIST" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT DISTINCT(B.INTG_BL_SEQ) AS INTG_BL_SEQ
		  FROM TB_INTG_BL B
		      ,TB_FRT F
		      ,TB_INV_DTL D
		      ,TB_JNR_DTL J
		WHERE 1=1
		  AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
		  AND F.INV_SEQ = D.INV_SEQ
		  AND D.INV_SEQ = J.INV_SEQ
		  AND J.JNR_NO  = #jnr_no#
		  AND ISNULL(J.DELT_FLG, 'N') = 'N'
    </select>
    
    
    <!-- B/L 마감처리를 한다. BL_STS_CD UPDATE   -->
    <insert id="updateBl_Magam" parameterClass="java.util.HashMap">
    	UPDATE TB_INTG_BL
    	   SET BL_STS_CD = 'HF'
    	 WHERE INTG_BL_SEQ = #intg_bl_seq#
    </insert>
    
    
    <!-- COMBINE INVOICE 마감처리를 한다. INV_STS_CD = 'IE' UPDATE   -->
    <insert id="updateCmb_Inv_Magam" parameterClass="java.util.HashMap">
    	UPDATE TB_CMB_INV
    	   SET INV_STS_CD = 'IE'
    	 WHERE CMB_INV_SEQ = #inv_seq#
    </insert>
    
    
     <!-- COMBINE에 연결되어있는 INVOICE 데이터 조회   -->
    <select id="selectCmbInvList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT inv_seq
		  FROM TB_INV
		 WHERE 1=1
		   AND CMB_INV_SEQ  = #inv_seq#
		   AND DELT_FLG = 'N'
    </select>
    
    
    
    <!-- SLIP CANCEL   -->
    
    <!-- SLIP CANCEL 대상데이터 조회   -->
    <select id="selectCANCEL_SLIP_LIST" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	SELECT SLIP_NO
		      ,SLIP_TP
		      ,SLIP_2ND_TP
		      ,REF_NO 
		  FROM TB_SLIP_MST
		 WHERE 1 = 1
		 <isEqual property="f_oneDay" compareValue="Y">
		 	AND POST_DT = #f_proc_dt#
		 </isEqual> 
		 <isEqual property="f_oneDay" compareValue="N">
		 <![CDATA[ 
		   AND POST_DT > #f_proc_dt#
		 ]]>
		 </isEqual>
		   AND DELT_FLG = 'N'
		   AND SLIP_TP != 'EY'
    </select>
    
    
    <!-- SLIP CANCEL BL 대상데이터 조회   -->
    <select id="selectCANCEL_BL_LIST" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT INTG_BL_SEQ 
    	      ,BIZ_CLSS_CD
		  FROM TB_INTG_BL
		 WHERE 1 = 1
		 <isEqual property="f_oneDay" compareValue="Y">
		 	AND POST_DT = #f_proc_dt#
		 </isEqual> 
		 <isEqual property="f_oneDay" compareValue="N">
		 <![CDATA[ 
		   AND POST_DT > #f_proc_dt#
		 ]]>
		 </isEqual>
		   AND DELT_FLG = 'N'
    </select>
    
    
    <!-- INVOICE MASTER CLT_CMPL_FLG UPDATE   -->
    <update id="updateINV_CLT_CMPL_FLG" parameterClass="java.util.HashMap">
    	UPDATE TB_INV
		   SET CLT_CMPL_FLG = 'N'
		 WHERE INV_SEQ = #inv_seq#
		   AND CLT_CMPL_FLG = 'Y'
    </update>
    
    
    <!-- INVOICE DETAIL CLT_CMPL_FLG UPDATE   -->
    <update id="updateINV_DTL_CLT_CMPL_FLG" parameterClass="java.util.HashMap">
    	UPDATE TB_INV_DTL
		   SET CLT_CMPL_FLG = 'N'
			    ,modi_tms			= GETUTCDATE()
		 WHERE INV_SEQ = #inv_seq#
		   AND CLT_CMPL_FLG = 'Y'
    </update>
    
    <!-- FREIGHT CFM_FLG UPDATE   -->
    <update id="updateFRT_CFM_FLG" parameterClass="java.util.HashMap">
    	UPDATE TB_FRT
		   SET CFM_FLG = NULL
		 WHERE INV_SEQ = #inv_seq#
		   AND CFM_FLG = 'Y'
		   <![CDATA[ 
		   AND INV_POST_DT > #f_proc_dt#
		   ]]>
    </update>
    
    
    <!-- FREIGHT CFM_FLG UPDATE SLIP LIST 용  -->
    <update id="updateFRT_CFM_FLG_SLIP_LIST" parameterClass="java.util.HashMap">
    	UPDATE TB_FRT
		   SET CFM_FLG = NULL
		 WHERE INV_SEQ = #inv_seq#
		   AND CFM_FLG = 'Y'

    </update>
    
    
    <!-- B/L 마감CANCEL 처리를 한다. BL_STS_CD UPDATE   -->
    <update id="updateBl_Magam_Cancel" parameterClass="java.util.HashMap">
    	UPDATE TB_INTG_BL
    	   SET BL_STS_CD = #bl_sts_cd#
    	 WHERE INTG_BL_SEQ = #intg_bl_seq#
    </update>
    
    
    <!-- JOURNAL MASTER CLT_CMPL_FLG UPDATE   -->
    <update id="updateJNR_CLT_CMPL_FLG" parameterClass="java.util.HashMap">
    	UPDATE TB_JNR_MST
		   SET CLT_CMPL_FLG = 'N'
		 WHERE JNR_NO = #jnr_no#
		   AND CLT_CMPL_FLG = 'Y'
    </update>
    
    <!-- SLIP ACCT_DT UPDATE   -->
    <update id="updateSLIP_ACCT_DT" parameterClass="java.util.HashMap">
    	UPDATE TB_SLIP_MST
    	   SET ACCT_DT = NULL
    	 WHERE SLIP_NO = #slip_no#
    	   AND SLIP_TP = 'SL'
    </update>
    
    
    <!-- SLIP_DETAIL RESERVE_FIELD01 UPDATE   -->
    <update id="updateSLIP_ACCT_GL_NO" parameterClass="java.util.HashMap">
    	UPDATE TB_SLIP_DTL
    	   SET RESERVE_FIELD01 = NULL
    	 WHERE SLIP_NO = #slip_no#
    </update>
    
    
    <!-- SLIP DETAIL DELETE   -->
    <delete id="deleteSLIP_DTL" parameterClass="java.util.HashMap">
    	DELETE FROM TB_SLIP_DTL
    	 WHERE SLIP_NO = #slip_no#
    </delete>
    <delete id="deleteSLIP_DTL_2" parameterClass="java.util.HashMap">
    	UPDATE TB_SLIP_MST
			 SET DELT_FLG = 'Y', MODI_USRID = #proc_usrid#, MODI_OFC_CD = #proc_ofccd#, MODI_TMS = GETUTCDATE()
    	 WHERE SLIP_NO = #slip_no#
    </delete>
    <update id="updateSLIP_DTL_DELT_FLG" parameterClass="java.util.HashMap">
    	UPDATE TB_SLIP_MST
			 SET DELT_FLG = 'N', MODI_USRID = #proc_usrid#, MODI_OFC_CD = #proc_ofccd#, MODI_TMS = GETUTCDATE()
    	 WHERE SLIP_NO = #slip_no#
    </update>
    
    
    <!-- SLIP MASTER DELETE   -->
    <delete id="deleteSLIP_MST" parameterClass="java.util.HashMap">
    	DELETE FROM TB_SLIP_MST
    	 WHERE SLIP_NO = #slip_no#
    </delete>
    <delete id="deleteSLIP_MST_2" parameterClass="java.util.HashMap">
    	UPDATE TB_SLIP_MST
			 SET DELT_FLG = 'Y', MODI_USRID = #proc_usrid#, MODI_OFC_CD = #proc_ofccd#, MODI_TMS = GETUTCDATE()
    	 WHERE SLIP_NO = #slip_no#
    </delete>
    <delete id="updateSLIP_MST_DELT_FLG" parameterClass="java.util.HashMap">
    	UPDATE TB_SLIP_MST
			 SET DELT_FLG = 'N', MODI_USRID = #proc_usrid#, MODI_OFC_CD = #proc_ofccd#, MODI_TMS = GETUTCDATE()
    	 WHERE SLIP_NO = #slip_no#
    </delete>
    
    
    
    <!-- COMBINE INVOICE INV_STS_CD UPDATE   -->
    <update id="updateCMB_INV_STS" parameterClass="java.util.HashMap">
    	UPDATE TB_CMB_INV
		   SET INV_STS_CD = CASE WHEN ISNULL(PAY_AMT, 0) = 0 THEN 'IS'
		                         ELSE 'IC'
		                    END
		 WHERE CMB_INV_SEQ = #inv_seq#
    </update>
    
    
    <!-- SLIP CANCEL 후 INVOICE Journalize JNR_YN UPDATE   -->
    <insert id="updateCancel_Slip_Inv_Magam" parameterClass="java.util.HashMap">
    	UPDATE TB_INV_DTL
    	   SET JNR_YN 		= 	'N'
    	      ,JNR_DT 		= 	null
			    ,modi_tms			= GETUTCDATE()
    	 WHERE INV_SEQ 		= 	#ref_no#
    </insert>
    
    
    <!-- JOURNAL 마감처리를 한다. CLT_CMPL_FLG UPDATE   -->
    <insert id="updateCancel_Slip_Jnr_Magam" parameterClass="java.util.HashMap">
    	UPDATE TB_JNR_MST
    	   SET JNR_YN 		= 	'N'
    	      ,JNR_DT 		= 	null
			    ,modi_tms			= GETUTCDATE()
    	 WHERE JNR_NO 		= 	#ref_no#
    </insert>
    
    
    
    
    <!-- Slip List 조회  -->
    <select id="searchSLIP_LIST" parameterClass="java.util.HashMap" resultClass="SlipVO">
    
    /** AccSlpSlipSQL.xml > searchSLIP_LIST */
    	SELECT mst.SLIP_NO
		      ,MAX(mst.POST_DT)			AS POST_DT
		      ,MAX(mst.DT_SEQ)			AS DT_SEQ 
		      ,MAX(mst.G_DEBIT)			AS G_DEBIT
		      ,MAX(mst.G_CREDIT)		AS G_CREDIT
		      ,MAX(mst.CURR_CD)			AS CURR_CD
		      ,MAX(mst.RMK)				AS RMK
		      ,MAX(mst.P_OFC_CD)		AS P_OFC_CD
		      ,MAX(mst.rgst_usrid)  	AS rgst_usrid
		      ,MAX(dtl.SLIP_SEQ)		AS SLIP_SEQ
		      ,MAX(dtl.GL_NO)			AS GL_NO
		      ,MAX(dtl.COM_TP)			AS COM_TP
		      ,MAX(dtl.COM_CD)			AS COM_CD
		      ,MAX(dtl.COM_NM)			AS COM_NM
		      ,MAX(mst.REF_NO)			AS REF_NO
		      ,MAX(mst.SLIP_TP)			AS SLIP_TP
		      ,MAX(mst.ACCT_DT)			AS ACCT_DT
		      ,MAX(mst.ACCT_SLIP_NO)    AS ACCT_SLIP_NO
		      ,MAX(mst.SLIP_2ND_TP)     AS SLIP_2ND_TP
		      ,MAX(mst.RESERVE_FIELD01) AS INV_DT
		      ,MAX(mst.DELT_FLG)  	AS DELT_FLG
		      ,CASE WHEN MAX(mst.ACCT_SLIP_NO) IS NULL THEN 'N'
		            ELSE 'Y'
		       END 						AS if_yn
		      ,CASE WHEN MAX(mst.SLIP_TP) = 'AR' THEN 1
		            WHEN MAX(mst.SLIP_TP) = 'AP' THEN 2
		            WHEN MAX(mst.SLIP_TP) = 'CD' THEN 3
		            WHEN MAX(mst.SLIP_TP) = 'DP' THEN 4
		            WHEN MAX(mst.SLIP_TP) = 'CK' THEN 5
		            ELSE 0
		       END 						AS ORDER_SEQ
		      ,(CASE WHEN MAX(blk.CLT_CMPL_FLG) = 'Y' THEN 'Y' ELSE '' END) AS CLT_CMPL_FLG
		  FROM TB_SLIP_MST mst
		 LEFT JOIN TB_SLIP_DTL dtl ON mst.SLIP_NO = dtl.SLIP_NO
		 LEFT JOIN TB_SLIP_MST_BLCK blk ON mst.SLIP_NO = blk.SLIP_NO AND mst.P_OFC_CD = blk.P_OFC_CD
		 WHERE 1=1 /*delt_flg = 'N'*/
		 <isNotEmpty property="s_post_strdt">
		 	<isNotEmpty property="s_post_enddt">
		 		AND mst.POST_DT between #s_post_strdt# AND #s_post_enddt#
		 	</isNotEmpty>
		 </isNotEmpty>
		 <isNotEmpty property="s_inv_strdt">
		 	<isNotEmpty property="s_inv_enddt">
		 		AND mst.RESERVE_FIELD01 between #s_inv_strdt# AND #s_inv_enddt#
		 	</isNotEmpty>
		 </isNotEmpty>
		 <isNotEmpty property="s_vendor_cd">
		 	AND dtl.COM_CD = #s_vendor_cd#
		 </isNotEmpty>
		 <isNotEmpty property="s_vendor_nm">
		 	AND dtl.COM_NM LIKE '%' + #s_vendor_nm# + '%'
		 </isNotEmpty>
		 <isNotEmpty property="s_ofc_cd">
		 	AND mst.P_OFC_CD = #s_ofc_cd#
		 </isNotEmpty>
		 <isNotEmpty property="s_amt_fr">
			AND mst.G_DEBIT BETWEEN #s_amt_fr# AND #s_amt_to#
		 </isNotEmpty>
		 <isNotEmpty property="s_type">
		 	AND mst.SLIP_TP = #s_type#
		 </isNotEmpty>
		 <isNotEmpty property="s_if_yn">
		 	<isEqual property="s_if_yn" compareValue="Y">
		 		AND mst.ACCT_SLIP_NO IS NOT NULL
		 	</isEqual>
		 	<isEqual property="s_if_yn" compareValue="N">
		 		AND mst.ACCT_SLIP_NO IS NULL
		 	</isEqual>
		 </isNotEmpty>
		 <isNotEmpty property="s_del_yn">
		 		AND ISNULL(mst.DELT_FLG, 'N') = #s_del_yn#
		 </isNotEmpty>
		 <isNotEmpty property="s_acct_slip_no">
		 	AND mst.ACCT_SLIP_NO LIKE '%' + #s_acct_slip_no# + '%'
		 </isNotEmpty>
	    GROUP BY mst.slip_no
	    ORDER BY max(mst.POST_DT) DESC, max(mst.DT_SEQ) DESC
<!--	    ORDER BY ORDER_SEQ, max(mst.POST_DT), max(mst.RESERVE_FIELD01)-->
	    
    </select>
    
    
    
    <!-- SLIP LIST POST DATE UPDATE  -->
    <update id="updateSLIP_POSTDATE" parameterClass="SlipVO">
    	UPDATE TB_SLIP_MST
    	   SET POST_DT = #post_dt#
    	 WHERE SLIP_NO = #slip_no#
    </update>
    
    
    
    <!-- SLIP 정보를 삭제 한다.   -->
    <update id="deleteGeneralMst" parameterClass="SlipVO">
    	UPDATE TB_SLIP_MST
		   SET delt_flg		= 'Y'
		WHERE slip_no = #slip_no#
    </update>
    
    
    
    
    
    
    
    
    
    
    <!--   -->
    <!-- 회계 INTERFACE   --> 
    <!--   -->
    
    
    
    
    <!-- ACCOUNT COMPANY LIST 데이터 조회   -->
    <select id="selectAcctCompanyList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT DISTINCT(ACCT_IF_CMP) AS ACCT_IF_CMP
  		  FROM TB_OFC
  		 WHERE DELT_FLG = 'N'
    </select>
    
    
    <!-- ACCOUNT INTERFACE LIST 조회  -->
    <select id="searchACCT_LIST" parameterClass="java.util.HashMap" resultClass="AcctVO">
    	SELECT SLIP_TP
    	      ,SLIP_2ND_TP
			  ,SLIP_NO
			  ,SLIP_SEQ
			  ,GL_NO
			  ,GL_RMK
			  ,ACCT_GL_NO
			  ,ACCT_GL_RMK
			  ,DEBIT
			  ,CREDIT
			  ,CURR_CD
			  ,SLIP_DESC
			  ,COM_CD
			  ,COM_NM
			  ,CORP_NO
			  ,POST_DT
			  ,INV_DT
			  ,VAT_YN
			  ,COM_TP
			  ,XCRT
			  ,REF_SEQ
			  ,REF_NO
			  ,ACCT_DT
			  ,DT_SEQ
			  ,TTL_DEBIT
			  ,TTL_CREDIT
			  ,isnull(ORG_TAX_AMT, 0) AS ORG_TAX_AMT
			  ,isnull(TAX_AMT, 0) AS TAX_AMT
			  ,SELL_BUY_TP_CD
			  ,CASE WHEN SELL_BUY_TP_CD IN ('S','D') THEN 
							CASE WHEN isnull(TAX_AMT,0) != 0 THEN '11' 
							     WHEN isnull(TAX_AMT,0)  = 0 THEN '14' 
							END
				    WHEN SELL_BUY_TP_CD IN ('B','C') THEN 
							CASE WHEN isnull(TAX_AMT,0) != 0 THEN '21' 
							     WHEN isnull(TAX_AMT,0)  = 0 THEN '23' 
							END
			   END AS TAX_TP
			  ,BAN_INV_SEQ
			  ,(SELECT MAX(SLIP_NO) FROM TB_SLIP_MST WHERE REF_NO = BAN_INV_SEQ AND SLIP_TP NOT IN ('CK','DP')) AS BAN_NO
			  ,P_OFC_CD
			  ,CASE WHEN SLIP_TP = 'AR' THEN 1
			        WHEN SLIP_TP = 'AP' THEN 2
			        WHEN SLIP_TP = 'CD' THEN 3
			        WHEN SLIP_TP = 'DP' THEN 4
			        WHEN SLIP_TP = 'CK' THEN 5
			        ELSE 0
			   END AS ORDER_SEQ
		  FROM(
				SELECT mst.SLIP_TP
				      ,mst.SLIP_2ND_TP
				      ,dtl.SLIP_NO
				      ,dtl.SLIP_SEQ
				      ,dtl.GL_NO
				      ,(SELECT TOP 1 RMK FROM TB_GL_CD WHERE GL_CD = dtl.GL_NO) AS GL_RMK
				      ,CASE WHEN #s_curr_cd# = dtl.CURR_CD THEN dtl.RESERVE_FIELD01
				            ELSE ISNULL((SELECT FRGN_GL_CD
				                    FROM TB_FRGN_GL_MAP 
								   WHERE ACCT_IF_CMP = #s_cust_cd#
									 AND ACCT_CUR_CD = #s_curr_cd#
									 AND RSC_CUR_CD  = dtl.CURR_CD
									 AND RSC_GL_CD   = dtl.RESERVE_FIELD01
							      ), dtl.RESERVE_FIELD01)
				       END AS ACCT_GL_NO
				      ,(SELECT TOP 1 RMK FROM TB_GL_CD WHERE GL_CD = dtl.RESERVE_FIELD01) AS ACCT_GL_RMK
				      ,dtl.DEBIT
				      ,dtl.CREDIT
				      ,dtl.CURR_CD
				      ,dtl.SLIP_DESC
				      ,dtl.COM_CD
					  ,dtl.COM_NM
					  ,(SELECT CORP_NO FROM TB_TRDP WHERE TRDP_CD = dtl.COM_CD) AS CORP_NO
					  ,mst.POST_DT
					  ,mst.RESERVE_FIELD01 AS INV_DT
					  ,dtl.VAT_YN
					  ,dtl.COM_TP
					  ,CASE WHEN #s_curr_cd# = dtl.CURR_CD THEN 1
					        ELSE 0
					   END AS XCRT
					  ,dtl.REF_SEQ
					  ,mst.REF_NO
					  ,mst.ACCT_DT
					  ,mst.DT_SEQ
					  ,CASE WHEN #s_curr_cd# = dtl.CURR_CD THEN dtl.DEBIT
					        ELSE 0
					   END AS TTL_DEBIT
					  ,CASE WHEN #s_curr_cd# = dtl.CURR_CD THEN dtl.CREDIT
					        ELSE 0
					   END AS TTL_CREDIT 
					  ,CASE WHEN dtl.VAT_YN = 'Y' THEN 
					  					CASE WHEN (SELECT TOP 1 TAX_BIL_FLG FROM TB_INV WHERE CONVERT(VARCHAR,CMB_INV_SEQ) = mst.REF_NO) = 'Y' 
					  								THEN CASE WHEN dtl.DEBIT = 0 AND dtl.CREDIT = 0 THEN 
					  														 (SELECT SUM(F.inv_amt) 
					  														    FROM TB_CMB_INV C
					  																,TB_INV I
					  																,TB_FRT F
					  																,TB_FRT_CD FC
					  														   WHERE CONVERT(VARCHAR, C.CMB_INV_SEQ) = I.CMB_INV_SEQ
					  															 AND I.INV_SEQ = F.INV_SEQ
					  															 AND F.FRT_CD  = FC.FRT_CD
					  															 AND ISNULL(FC.FRT_CLSS_CD, '') != 'WAF'
					  															 AND F.FRT_CD NOT IN ('TAXB')
					  															 AND F.INV_VAT_AMT = 0
					  															 AND CONVERT(VARCHAR, C.CMB_INV_SEQ) = mst.REF_NO
					  														 )
					  										  ELSE (SELECT SUM(F.inv_amt) 
		  															  FROM TB_CMB_INV C
		  																  ,TB_INV I
		  																  ,TB_FRT F
		  																  ,TB_FRT_CD FC
		  														     WHERE CONVERT(VARCHAR, C.CMB_INV_SEQ) = I.CMB_INV_SEQ
		  															   AND I.INV_SEQ = F.INV_SEQ
		  															   AND F.FRT_CD  = FC.FRT_CD
		  															   AND ISNULL(FC.FRT_CLSS_CD, '') != 'WAF'
		  															   AND F.FRT_CD NOT IN ('TAXB')
		  															   AND F.INV_VAT_AMT != 0
		  															   AND CONVERT(VARCHAR, C.CMB_INV_SEQ) = mst.REF_NO
		  														    )
		  													END
					  					     ELSE CASE WHEN dtl.DEBIT = 0 AND dtl.CREDIT = 0 THEN 
					  												(SELECT SUM(F.inv_amt) 
					  												   FROM TB_INV_DTL D
					  													   ,TB_FRT F
					  													   ,TB_FRT_CD FC
					  												  WHERE D.INV_SEQ = F.INV_SEQ
					  												    AND F.FRT_CD  = FC.FRT_CD
					  												    AND ISNULL(FC.FRT_CLSS_CD, '') != 'WAF'
					  												    AND F.FRT_CD NOT IN ('TAXB')
					  												    AND F.INV_VAT_AMT = 0
					  												    AND D.INV_SEQ = mst.REF_NO
					  											     )
					  								   ELSE (SELECT SUM(F.inv_amt) 
			  												   FROM TB_INV_DTL D
			  													   ,TB_FRT F
			  													   ,TB_FRT_CD FC
			  												  WHERE D.INV_SEQ = F.INV_SEQ
			  												    AND F.FRT_CD  = FC.FRT_CD
			  												    AND ISNULL(FC.FRT_CLSS_CD, '') != 'WAF'
			  												    AND F.FRT_CD NOT IN ('TAXB')
			  												    AND F.INV_VAT_AMT != 0
			  												    AND D.INV_SEQ = mst.REF_NO
			  											     )
					  							  END
					  					END
					        ELSE NULL
					   END AS ORG_TAX_AMT
					  ,CASE WHEN dtl.VAT_YN = 'Y' 
					  			THEN CASE WHEN dtl.DEBIT  != 0 THEN dtl.DEBIT
					  			          WHEN dtl.CREDIT != 0 THEN dtl.CREDIT
					  			     END
					  
					        ELSE NULL
					   END AS TAX_AMT
					  ,CASE WHEN ( (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = mst.REF_NO) = '' OR (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = mst.REF_NO) IS NULL ) 
					  				THEN (SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR,CMB_INV_SEQ) = mst.REF_NO) 
					        ELSE (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = mst.REF_NO)
					   END AS SELL_BUY_TP_CD
					  ,CASE WHEN mst.SLIP_TP IN ('DP','CK') THEN dtl.REF_SEQ
					   END BAN_INV_SEQ 
					  ,dtl.P_OFC_CD
				  FROM TB_SLIP_DTL dtl,
				       TB_SLIP_MST mst
				 WHERE 1 = 1
				   AND dtl.SLIP_NO = mst.SLIP_NO
				   AND dtl.P_OFC_CD IN (SELECT OFC_CD FROM TB_OFC WHERE ACCT_IF_CMP = #s_cust_cd#)
				   AND mst.ACCT_DT IS NOT NULL
				   AND mst.RESERVE_FIELD01 IS NOT NULL 
				   AND mst.RESERVE_FIELD01 != ''
				   AND dtl.ACCT_SLIP_NO IS NULL
				   AND mst.DELT_FLG = 'N'
				   AND mst.RESERVE_FIELD01 BETWEEN #s_inv_strdt# AND #s_inv_enddt#
			) x
			
			ORDER BY ORDER_SEQ, SLIP_NO, SLIP_SEQ
    </select>
    
    
    <!-- TB_SLIP_MST Datail Sum 으로 UPDATE 한다.   -->
    <update id="updateSlipMstSumAmt" parameterClass="SlipVO">
    	UPDATE TB_SLIP_MST 
		   SET g_debit = (SELECT SUM(DEBIT) FROM TB_SLIP_DTL WHERE SLIP_NO = M.SLIP_NO GROUP BY SLIP_NO)
			  ,g_credit = (SELECT SUM(CREDIT) FROM TB_SLIP_DTL WHERE SLIP_NO = M.SLIP_NO GROUP BY SLIP_NO)
		  FROM TB_SLIP_MST M
		 WHERE M.SLIP_NO = #slip_no#
    </update>
    
    
    <!-- ACCOUNT INTERFACE 결과 LIST 조회  -->
    <select id="searchACCT_RTN_LIST" parameterClass="java.util.HashMap" resultClass="AcctVO">
    	SELECT SLIP_TP
    	      ,SLIP_2ND_TP
			  ,SLIP_NO
			  ,SLIP_SEQ
			  ,GL_NO
			  ,GL_RMK
			  ,ACCT_GL_NO
			  ,ACCT_GL_RMK
			  ,DEBIT
			  ,CREDIT
			  ,CURR_CD
			  ,SLIP_DESC
			  ,COM_CD
			  ,COM_NM
			  ,CORP_NO
			  ,POST_DT
			  ,VAT_YN
			  ,COM_TP
			  ,XCRT
			  ,REF_SEQ
			  ,REF_NO
			  ,ACCT_DT
			  ,DT_SEQ
			  ,TTL_DEBIT
			  ,TTL_CREDIT
			  ,isnull(ORG_TAX_AMT, 0) AS ORG_TAX_AMT
			  ,isnull(TAX_AMT, 0) AS TAX_AMT
			  ,SELL_BUY_TP_CD
			  ,CASE WHEN SELL_BUY_TP_CD IN ('S','D') THEN 
							CASE WHEN isnull(TAX_AMT,0) != 0 THEN '11' 
							     WHEN isnull(TAX_AMT,0)  = 0 THEN '14' 
							END
				    WHEN SELL_BUY_TP_CD IN ('B','C') THEN 
							CASE WHEN isnull(TAX_AMT,0) != 0 THEN '21' 
							     WHEN isnull(TAX_AMT,0)  = 0 THEN '23' 
							END
			   END AS TAX_TP
			  ,BAN_INV_SEQ
			  ,(SELECT MAX(SLIP_NO) FROM TB_SLIP_MST WHERE REF_NO = BAN_INV_SEQ AND SLIP_TP NOT IN ('CK','DP')) AS BAN_NO
			  ,P_OFC_CD
			  ,CASE WHEN SLIP_TP = 'AR' THEN 1
			        WHEN SLIP_TP = 'AP' THEN 2
			        WHEN SLIP_TP = 'CD' THEN 3
			        WHEN SLIP_TP = 'DP' THEN 4
			        WHEN SLIP_TP = 'CK' THEN 5
			        WHEN SLIP_TP = 'CK' THEN 0
			   END AS ORDER_SEQ
		  FROM(
				SELECT mst.SLIP_TP
				      ,mst.SLIP_2ND_TP
				      ,dtl.SLIP_NO
				      ,dtl.SLIP_SEQ
				      ,dtl.GL_NO
				      ,(SELECT TOP 1 RMK FROM TB_GL_CD WHERE GL_CD = dtl.GL_NO) AS GL_RMK
				      ,dtl.RESERVE_FIELD01 AS ACCT_GL_NO
				      ,(SELECT TOP 1 RMK FROM TB_GL_CD WHERE GL_CD = dtl.RESERVE_FIELD01) AS ACCT_GL_RMK
				      ,dtl.DEBIT
				      ,dtl.CREDIT
				      ,dtl.CURR_CD
				      ,dtl.SLIP_DESC
				      ,dtl.COM_CD
					  ,dtl.COM_NM
					  ,(SELECT CORP_NO FROM TB_TRDP WHERE TRDP_CD = dtl.COM_CD) AS CORP_NO
					  ,mst.POST_DT
					  ,dtl.VAT_YN
					  ,dtl.COM_TP
					  ,dtl.XCRT
					  ,dtl.REF_SEQ
					  ,mst.REF_NO
					  ,mst.ACCT_DT
					  ,mst.DT_SEQ
					  ,dtl.TTL_DEBIT
					  ,dtl.TTL_CREDIT 
					  ,CASE WHEN dtl.VAT_YN = 'Y' THEN 
					  					CASE WHEN (SELECT TOP 1 TAX_BIL_FLG FROM TB_INV WHERE CONVERT(VARCHAR,CMB_INV_SEQ) = mst.REF_NO) = 'Y' 
					  								THEN (SELECT SUM(F.inv_amt) 
					  								        FROM TB_CMB_INV C
					  								            ,TB_INV I
					  								            ,TB_FRT F
					  								            ,TB_FRT_CD FC
					  								       WHERE CONVERT(VARCHAR, C.CMB_INV_SEQ) = I.CMB_INV_SEQ
					  								         AND I.INV_SEQ = F.INV_SEQ
					  								         AND F.FRT_CD  = FC.FRT_CD
					  								         AND ISNULL(FC.FRT_CLSS_CD, '') != 'WAF'
					  								         AND F.FRT_CD NOT IN ('TAXB')
					  								         AND F.INV_VAT_AMT != 0
					  								         AND CONVERT(VARCHAR, C.CMB_INV_SEQ) = mst.REF_NO

					  								      )
					  					     ELSE (SELECT SUM(F.inv_amt) 
					  					             FROM TB_INV_DTL D
					  					                 ,TB_FRT F
					  					                 ,TB_FRT_CD FC
					  					            WHERE D.INV_SEQ = F.INV_SEQ
					  					              AND F.FRT_CD  = FC.FRT_CD
					  					              AND ISNULL(FC.FRT_CLSS_CD, '') != 'WAF'
					  					              AND F.FRT_CD NOT IN ('TAXB')
					  					              AND F.INV_VAT_AMT != 0
					  					              AND D.INV_SEQ = mst.REF_NO
					  					          )
					  					END
					        ELSE NULL
					   END AS ORG_TAX_AMT
					  ,CASE WHEN dtl.VAT_YN = 'Y' 
					  			THEN CASE WHEN dtl.DEBIT  != 0 THEN dtl.DEBIT
					  			          WHEN dtl.CREDIT != 0 THEN dtl.CREDIT
					  			     END
					  
					        ELSE NULL
					   END AS TAX_AMT
					  ,CASE WHEN ( (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = mst.REF_NO) = '' OR (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = mst.REF_NO) IS NULL ) 
					  				THEN (SELECT SELL_BUY_TP_CD FROM TB_CMB_INV WHERE CONVERT(VARCHAR,CMB_INV_SEQ) = mst.REF_NO) 
					        ELSE (SELECT SELL_BUY_TP_CD FROM TB_INV WHERE INV_SEQ = mst.REF_NO)
					   END AS SELL_BUY_TP_CD
					  ,CASE WHEN mst.SLIP_TP IN ('DP','CK') THEN dtl.REF_SEQ
					   END BAN_INV_SEQ 
					  ,dtl.P_OFC_CD
				  FROM TB_SLIP_DTL dtl,
				       TB_SLIP_MST mst
				 WHERE 1 = 1
				   AND dtl.SLIP_NO = mst.SLIP_NO
				   AND dtl.P_OFC_CD IN (SELECT OFC_CD FROM TB_OFC WHERE ACCT_IF_CMP = #s_cust_cd#)
				   AND mst.ACCT_DT IS NOT NULL
				   AND dtl.ACCT_SLIP_NO IS NOT NULL
				   AND mst.DELT_FLG = 'N'
			) x
    </select>
    
    
    <!-- 회계 INTERFACE SEQ   -->
    <select id="selectAcctIF_SEQ" parameterClass="java.util.HashMap" resultClass="String">
        SELECT  isnull(max(row_no)+1, 1) AS row_no
          FROM  [NEOE].NEOE.FI_ADOCU
         WHERE  dt_acct = #acct_dt#
    </select>
    
    <select id="searchMaxSlipNo" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT COUNT(*) AS row_cnt
		      ,ISNULL(MAX(SUBSTRING(ROW_ID, 9, 7)), 0) AS row_no
		  FROM [NEOE].NEOE.FI_ADOCU 
		 WHERE DT_ACCT BETWEEN #strDt# AND #endDt#
    </select>
    
    
    <procedure id="insertAccountIF_PROC">
    	{ call SP_NEOE_INTERFACE }
    </procedure>
    
    <!-- 회계 INTERFACE 정보를 INSERT 한다.   -->
    <insert id="insertAccountIF" parameterClass="acctVO">
	
		INSERT INTO [NEOE].NEOE.FI_ADOCU( 
		<!--  INSERT INTO FI_ADOCU(   -->
			 ROW_ID
			,ROW_NO
			,NO_TAX
			,CD_PC
			,CD_WDEPT
			,NO_DOCU
			,NO_DOLINE
			,CD_COMPANY
			,ID_WRITE
			,CD_DOCU
			,DT_ACCT
			,ST_DOCU
			,TP_DRCR
			,CD_ACCT
			,AMT
			,CD_PARTNER
			,NM_PARTNER
			,DT_START
			,AM_TAXSTD
			,AM_ADDTAX
			,TP_TAX
			,NO_COMPANY
			,NM_NOTE
			,CD_BIZAREA
			,CD_CC
			,NO_BDOCU
			,NO_BDOLINE
			,CD_EXCH
			,RT_EXCH
			,AM_EX
			,TP_GUBUN
			,YN_ISS
			,CD_MNGD1
			,CD_MNGD2
			,NO_DEPOSIT
		)VALUES(
			 #row_id#
			,#row_no#
			,#no_tax#
			,#cd_pc#
			,#cd_wdept#
			,#no_docu#
			,#no_doline#
			,#cd_company#
			,#id_write#
			,#cd_docu#
			,#dt_acct#
			,#st_docu#
			,#tp_drcr#
			,#cd_acct#
			,#amt#
			,#cd_partner#
			,#nm_partner#
			,#dt_start#
			,#am_taxstd#
			,#am_addtax#
			,#tp_tax#
			,#no_company#
			,#nm_note#
			,#cd_bizarea#
			,#cd_cc#
			,#no_bdocu#
			,#no_bdoline#
			,#cd_exch#
			,#rt_exch#
			,#am_ex#
			,#tp_gubun#
			,#yn_iss#
			,#cd_mngd1#
			,#cd_mngd2#
			,#no_deposit#
		)
    	
    </insert>
    
    
    
    <!-- 회계 INTERFACE SEQ   -->
    <select id="selectAcctIF_PRE_SLIP" parameterClass="java.util.HashMap" resultClass="String">
    	SELECT TOP 1 
		       ACCT_SLIP_NO
		  FROM TB_SLIP_MST
		 WHERE REF_NO = #REF_NO#	
		   AND ACCT_DT IS NOT NULL
		   AND ACCT_DT != #ACCT_DT#
		   AND ACCT_SLIP_NO IS NOT NULL
		   AND SLIP_NO != #SLIP_NO#
		 ORDER BY ACCT_DT DESC
    </select>
    
    
    <!-- 회계 INTERFACE ACCT_SLIP_NO 조회   -->
    <select id="selectAcctIF_BAN_NO" parameterClass="java.util.HashMap" resultClass="String">
    	SELECT ACCT_SLIP_NO
    	  FROM TB_SLIP_MST
    	 WHERE SLIP_NO  = #SLIP_NO#
    </select>
    
     <!-- 회계 INTERFACE 정보를 UPDATE 한다.   -->
    <update id="updateAccountIF" parameterClass="java.util.HashMap">
    	
    	UPDATE [NEOE].NEOE.FI_ADOCU
    	   SET NO_BDOCU = #NO_BDOCU#
    	 WHERE ROW_ID     = #ROWID#
    	   AND ROW_NO     = #ROWNO#
    	   AND CD_COMPANY = #COMPANY#
    	   AND DT_ACCT    = #ACCTDT#
    	
    	<!--  
    	UPDATE FI_ADOCU
    	   SET NO_BDOCU = #NO_BDOCU#
    	 WHERE ROW_ID     = #ROWID#
    	   AND ROW_NO     = #ROWNO#
    	   AND CD_COMPANY = #COMPANY#
    	   AND DT_ACCT    = #ACCTDT#
		  -->     	  
    </update>
    
    
    
    
    
    <!-- 회계 INTERFACE 후 TB_SLIP_MST 를 UPDATE 한다.   -->
    <update id="updateSlipMst_IF" parameterClass="acctVO">
    	UPDATE TB_SLIP_MST
    	   SET ACCT_SLIP_NO = #acct_slip_no#
    	 WHERE SLIP_NO = #slip_no#
    </update>
    
    
    <!-- 회계 INTERFACE 후 TB_SLIP_MST 를 UPDATE 한다.   -->
    <update id="updateSlipDtl_IF" parameterClass="acctVO">
    	UPDATE TB_SLIP_DTL
    	   SET ACCT_SLIP_NO = #acct_slip_no#
    	      ,ACCT_IF_DT   = #acct_if_dt#
    	      ,XCRT			= #xcrt#
    	      ,TTL_DEBIT    = #ttl_debit#
    	      ,TTL_CREDIT   = #ttl_credit#
    	 WHERE SLIP_NO  = #slip_no#
    	   AND SLIP_SEQ = #slip_seq# 
    </update>
    
    
    
    <!-- TRADE PARTNER INTERFACE LIST 조회  -->
    <select id="searchTRDP_LIST" parameterClass="java.util.HashMap" resultClass="TrdpVO">
    	SELECT DISTINCT(trdp.TRDP_CD) AS TRDP_CD
		      ,trdp.ENG_NM
		      ,trdp.LOCL_NM
		      ,trdp.LGL_ADDR
		      ,trdp.TAX_ISS_ADDR
		      ,trdp.RGST_OFC_CD
		      ,trdp.CORP_NO
		      ,trdp.RGST_TMS
		  FROM TB_TRDP trdp,
		       TB_SLIP_DTL slip
		 WHERE trdp.TRDP_CD = slip.COM_CD
		   <isNotEmpty property="s_ofc_cd">	
		   AND trdp.RGST_OFC_CD = #s_ofc_cd#
		   </isNotEmpty>
		   AND DELT_FLG = 'N'
		   AND isnull(trdp.ACCT_IF_YN,'N') = 'N'
    </select>
    
    
    
    
    
    
    <!-- 회계 INTERFACE 정보를 INSERT 한다.   -->
    <insert id="insertTradePartnerIF" parameterClass="trdpVO">
    	INSERT INTO [NEOE].NEOE.MA_PARTNER(
	    		 CD_PARTNER
	    		,LN_PARTNER
	    		,USE_YN
	    		,NO_COMPANY
	    		,CD_COMPANY
	    		,FG_PARTNER
	    		,CD_CON
    	)VALUES(
    			 #trdp_cd#
    			,#locl_nm#
    			,'Y'
    			,#corp_no#
    			,#com_cd#
    			,'001'
    			,'001'
    			
    	)
    
    </insert>
    
    
    <!-- 회계 INTERFACE 유무를 UPDATE 한다.   -->
    <update id="updateTradePartner" parameterClass="trdpVO">
    	UPDATE TB_TRDP
    	   SET ACCT_IF_YN = 'Y'
    	 WHERE TRDP_CD = #trdp_cd#
    	   AND RGST_OFC_CD = #rgst_ofc_cd#
    	
    </update>
    
    
    
    
    
    <!-- INTERFACE LIST 조회  -->
    <select id="searchINTERFACE_SLIP_LIST" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	SELECT SUBSTRING(ROW_ID, 1,2) AS slip_tp
			  ,row_id
			  ,row_no
			  ,dt_acct
			  ,cd_partner
			  ,nm_partner	
			  ,rt_exch
			  ,am_ex
			  ,CASE WHEN tp_drcr = '1' THEN AMT
			        ELSE 0
			   END debit_amt
			  ,CASE WHEN tp_drcr = '2' THEN AMT
			        ELSE 0
			   END credit_amt
			  ,nm_note
			  ,tp_drcr
			  ,no_bdocu
		  FROM [NEOE].NEOE.FI_ADOCU
		 WHERE ROW_ID = #s_acct_slip_no#
		 ORDER BY CONVERT(NUMERIC, ROW_NO)
    </select>
    
    <!-- 회계 INTERFACE  데이터 UPDATE 한다.   -->
    <update id="updateInterfaceSlipList" parameterClass="SlipVO">
    	UPDATE [NEOE].NEOE.FI_ADOCU
    	   SET AMT = #modi_amt#
    	 WHERE ROW_ID = #row_id#
    	   AND ROW_NO = #row_no#
    </update>
    
    
    
    
    
    <!-- SLIP VERIFY SLIP   -->
    <select id="select2_1List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT 'GENERAL'			AS type
		      ,D.SLIP_NO			AS ref_no
		      ,D.GL_NO				AS gl_no
		      ,D.COM_CD				AS com_cd
		      ,D.COM_NM				AS com_nm
		      ,D.CURR_CD			AS curr_cd
		      ,D.CREDIT				AS amt
		      ,D.P_OFC_CD			AS p_ofc_cd
		      ,D.SLIP_NO			AS ref_seq
		      ,M.POST_DT			AS post_dt
		      ,'G/L CODE MISSING'	AS error
		      ,'GE'					AS m_type
		      ,D.SLIP_NO			AS m_seq
		  FROM TB_SLIP_MST M
		      ,TB_SLIP_DTL D
		 WHERE M.SLIP_NO = D.SLIP_NO
		   AND SLIP_TP   = 'SL'
		   AND ISNULL(M.DELT_FLG,'N') != 'Y'
		   AND M.POST_DT BETWEEN #s_strdt# AND #s_enddt#
		   AND (D.GL_NO = '' OR D.GL_NO IS NULL)
    </select>
    
    
    <!-- SLIP VERIFY SLIP   -->
    <select id="select2_2List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT 'GENERAL'			AS type
		      ,D.SLIP_NO			AS ref_no
		      ,D.GL_NO				AS gl_no
		      ,D.COM_CD				AS com_cd
		      ,D.COM_NM				AS com_nm
		      ,D.CURR_CD			AS curr_cd
		      ,D.CREDIT				AS amt
		      ,D.P_OFC_CD			AS p_ofc_cd
		      ,D.SLIP_NO			AS ref_seq
		      ,M.POST_DT			AS post_dt
		      ,'CUSTOMER MISSING'	AS error
		      ,'GE'					AS m_type
		      ,D.SLIP_NO			AS m_seq
		  FROM TB_SLIP_MST M
		      ,TB_SLIP_DTL D
		 WHERE M.SLIP_NO = D.SLIP_NO
		   AND SLIP_TP   = 'SL'
		   AND ISNULL(M.DELT_FLG,'N') != 'Y'
		   AND M.POST_DT BETWEEN #s_strdt# AND #s_enddt#
		   AND (D.COM_CD = '' OR D.COM_CD IS NULL)
    </select>
    
    
    
    <!-- SLIP VERIFY LOCAL INVOICE G/L CODE MISSING   -->
    <select id="select3_1List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT
				MAX(A.TYPE)			AS TYPE,
				MAX(A.REF_NO)		AS REF_NO,
				MAX(A.GL_NO)		AS GL_NO,
				MAX(A.COM_CD)		AS COM_CD,
				MAX(A.COM_NM)		AS COM_NM,
				MAX(A.CURR_CD)		AS CURR_CD,
				MAX(A.AMT)			AS AMT,
				MAX(A.P_OFC_CD)		AS P_OFC_CD,
				MAX(A.REF_SEQ)		AS REF_SEQ,
				MAX(A.POST_DT)		AS POST_DT,
				'G/L CODE MISSING'  AS ERROR,
				'LC'				AS m_type,
		        MAX(A.REF_SEQ)		AS m_seq
			FROM
				(
					SELECT
						'LOCAL(INVOICE)'			AS TYPE,
						D.INV_NO					AS REF_NO,
						(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
						I.TRDP_CD 					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						D.INV_SUM_AMT 				AS AMT,
						D.INV_APLY_CURR_CD 			AS CURR_CD,
						I.OFC_CD 					AS P_OFC_CD,
						I.INV_SEQ 					AS REF_SEQ,
						D.INV_POST_DT				AS POST_DT
					FROM
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND I.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND I.SELL_BUY_TP_CD = 'S'
					
					UNION ALL
					
					SELECT
						'LOCAL(FREIGHT)'			AS TYPE,
						D.INV_NO					AS REF_NO,
						(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						I.TRDP_CD 					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						D.INV_SUM_AMT 				AS AMT,
						F.INV_CURR_CD 				AS CURR_CD,
						I.OFC_CD 					AS P_OFC_CD,
						I.INV_SEQ 					AS REF_SEQ,
						D.INV_POST_DT				AS POST_DT
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'	
					AND I.SELL_BUY_TP_CD = 'S'
					
					UNION ALL
					
					SELECT
						'LOCAL(VAT LINE)'			AS TYPE,
						MAX(D.INV_NO)				AS REF_NO,
						(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
						MAX(I.TRDP_CD) 				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
						MAX(D.INV_SUM_AMT)			AS AMT,
						MAX(D.INV_APLY_CURR_CD) 	AS CURR_CD,
						MAX(I.OFC_CD) 				AS P_OFC_CD,
						I.INV_SEQ 					AS REF_SEQ,
						MAX(D.INV_POST_DT) 			AS POST_DT	
					FROM
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_INV_DTL D,
					TB_FRT_CD FC
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AR_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--					AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
					AND I.SELL_BUY_TP_CD = 'S'
				GROUP BY I.INV_SEQ
					
				) A
		WHERE (A.GL_NO = '' OR A.GL_NO IS NULL)
		  AND POST_DT BETWEEN #s_strdt# AND #s_enddt#
	    GROUP BY REF_SEQ
    </select>
    
    <!-- SLIP VERIFY LOCAL INVOICE CUSTOMER MISSING   -->
    <select id="select3_2List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT  'A/R'					AS TYPE,
				D.INV_NO				AS REF_NO,
				'XXXXX'					AS GL_NO,
				TRDP_CD					AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				D.INV_APLY_CURR_CD		AS CURR_CD,
				D.INV_SUM_AMT			AS AMT,
				M.OFC_CD				AS P_OFC_CD,
				D.INV_SEQ				AS REF_SEQ,
				D.INV_POST_DT			AS POST_DT,
				'CUSTOMER MISSING'		AS ERROR,
				'LC'					AS m_type,
		        D.INV_SEQ		        AS m_seq
		  FROM TB_INV M
		      ,TB_INV_DTL D
		 WHERE M.INV_SEQ = D.INV_SEQ
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND (M.TRDP_CD = '' OR M.TRDP_CD IS NULL)
		   AND M.SELL_BUY_TP_CD = 'S'
		   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    
    <!-- SLIP VERIFY LOCAL INVOICE BILLING CODE MISSING   -->
    <select id="select3_3List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT 'LOCAL(FREIGHT)'			AS TYPE,
				D.INV_NO				AS REF_NO,
				'XXXXX'					AS GL_NO,
				M.TRDP_CD				AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				D.INV_APLY_CURR_CD		AS CURR_CD,
				D.INV_SUM_AMT			AS AMT,
				M.OFC_CD				AS P_OFC_CD,
				D.INV_SEQ				AS REF_SEQ,
				D.INV_POST_DT			AS POST_DT,
				'BILLING CODE MISSING'	AS ERROR,
				'LC'					AS m_type,
		        D.INV_SEQ		        AS m_seq
		  FROM TB_INV M
		      ,TB_INV_DTL D
		      ,TB_FRT F
		 WHERE M.INV_SEQ = D.INV_SEQ
		   AND D.INV_SEQ = F.INV_SEQ
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND ISNULL(F.DELT_FLG, 'N') = 'N'
		   AND (F.FRT_CD = '' OR F.FRT_CD IS NULL)
		   AND M.SELL_BUY_TP_CD = 'S'
		   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    
    
    <!-- SLIP VERIFY LOCAL INVOICE AMOUNT DIFFERENCE   -->
    <select id="select3_4List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT A.*
		  FROM(	
				SELECT 'A/R'						AS TYPE,
						MAX(D.INV_NO)				AS REF_NO,
						'XXXXX'						AS GL_NO,
						MAX(M.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(M.TRDP_CD) ) AS COM_NM,
						MAX(D.INV_APLY_CURR_CD)		AS CURR_CD,
						MAX(D.INV_SUM_AMT)			AS AMT,
						MAX(M.OFC_CD)				AS P_OFC_CD,
						D.INV_SEQ					AS REF_SEQ,
						MAX(D.INV_POST_DT)			AS POST_DT,
						SUM(F.INV_SUM_AMT)			AS F_AMT,
						'AMOUNT DIFFERENCE'			AS ERROR,
						'LC'					    AS m_type,
		        		D.INV_SEQ		        	AS m_seq
				  FROM TB_INV M
					  ,TB_INV_DTL D
					  ,TB_FRT F
				 WHERE M.INV_SEQ = D.INV_SEQ
				   AND D.INV_SEQ = F.INV_SEQ
				   AND ISNULL(M.DELT_FLG, 'N') = 'N'
				   AND ISNULL(D.DELT_FLG, 'N') = 'N'
				   AND ISNULL(F.DELT_FLG, 'N') = 'N'
				   AND M.SELL_BUY_TP_CD = 'S'
				   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
				 GROUP BY D.INV_SEQ
			   ) A
		  WHERE A.AMT != A.F_AMT
    </select>
    
    
    
    
    
    
    
    
    <!-- SLIP VERIFY CREDIT/DEBIT G/L CODE MISSING   -->
    <select id="select4_1List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT
				MAX(A.TYPE)			AS TYPE,
				MAX(A.REF_NO)		AS REF_NO,
				MAX(A.GL_NO)		AS GL_NO,
				MAX(A.COM_CD)		AS COM_CD,
				MAX(A.COM_NM)		AS COM_NM,
				MAX(A.CURR_CD)		AS CURR_CD,
				MAX(A.AMT)			AS AMT,
				MAX(A.P_OFC_CD)		AS P_OFC_CD,
				MAX(A.REF_SEQ)		AS REF_SEQ,
				MAX(A.POST_DT)		AS POST_DT,
				'G/L CODE MISSING'  AS ERROR,
				'CD'				AS m_type,
		        MAX(A.REF_SEQ)		AS m_seq
			FROM
				(
					SELECT
						'CR/DB(INVOICE)'			AS TYPE,
						D.INV_NO					AS REF_NO,
						(SELECT GL_AGENT_AR FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
						I.TRDP_CD 					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						D.INV_SUM_AMT 				AS AMT,
						D.INV_APLY_CURR_CD 			AS CURR_CD,
						I.OFC_CD 					AS P_OFC_CD,
						I.INV_SEQ 					AS REF_SEQ,
						D.INV_POST_DT				AS POST_DT
					FROM
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND I.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND I.SELL_BUY_TP_CD IN ('C','D')
					
					UNION ALL
					
					SELECT
						'CR/DB(FREIGHT)'			AS TYPE,
						D.INV_NO					AS REF_NO,
						(SELECT GL_CD_PRNR FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						I.TRDP_CD 					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						D.INV_SUM_AMT 				AS AMT,
						F.INV_CURR_CD 				AS CURR_CD,
						I.OFC_CD 					AS P_OFC_CD,
						I.INV_SEQ 					AS REF_SEQ,
						D.INV_POST_DT				AS POST_DT
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'	
					AND I.SELL_BUY_TP_CD IN ('C','D')
														
				) A
		WHERE (A.GL_NO = '' OR A.GL_NO IS NULL)
		  AND POST_DT BETWEEN #s_strdt# AND #s_enddt#
	    GROUP BY REF_SEQ
    </select>
    
    
    
    <!-- SLIP VERIFY CREDIT/DEBIT CUSTOMER MISSING   -->
    <select id="select4_2List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT  'DB/CR'					AS TYPE,
				D.INV_NO				AS REF_NO,
				'XXXXX'					AS GL_NO,
				TRDP_CD					AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				D.INV_APLY_CURR_CD		AS CURR_CD,
				D.INV_SUM_AMT			AS AMT,
				M.OFC_CD				AS P_OFC_CD,
				D.INV_SEQ				AS REF_SEQ,
				D.INV_POST_DT			AS POST_DT,
				'CUSTOMER MISSING'		AS ERROR,
				'CD'					AS m_type,
		        D.INV_SEQ 				AS m_seq
		  FROM TB_INV M
		      ,TB_INV_DTL D
		 WHERE M.INV_SEQ = D.INV_SEQ
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND (M.TRDP_CD = '' OR M.TRDP_CD IS NULL)
		   AND M.SELL_BUY_TP_CD IN ('C','D')
		   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    <!-- SLIP VERIFY CREDIT/DEBIT BILLING CODE MISSING   -->
    <select id="select4_3List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT 'CR/DB(FREIGHT)'			AS TYPE,
				D.INV_NO				AS REF_NO,
				'XXXXX'					AS GL_NO,
				M.TRDP_CD				AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				D.INV_APLY_CURR_CD		AS CURR_CD,
				D.INV_SUM_AMT			AS AMT,
				M.OFC_CD				AS P_OFC_CD,
				D.INV_SEQ				AS REF_SEQ,
				D.INV_POST_DT			AS POST_DT,
				'BILLING CODE MISSING'	AS ERROR,
				'CD'					AS m_type,
		        D.INV_SEQ 				AS m_seq
		  FROM TB_INV M
		      ,TB_INV_DTL D
		      ,TB_FRT F
		 WHERE M.INV_SEQ = D.INV_SEQ
		   AND D.INV_SEQ = F.INV_SEQ
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND ISNULL(F.DELT_FLG, 'N') = 'N'
		   AND (F.FRT_CD = '' OR F.FRT_CD IS NULL)
		   AND M.SELL_BUY_TP_CD IN ('C','D')
		   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    <!-- SLIP VERIFY CREDIT/DEBIT AMOUNT DIFFERENCE   -->
    <select id="select4_4List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT A.*
		  FROM(	
				SELECT 'DB/CR'						AS TYPE,
						MAX(D.INV_NO)				AS REF_NO,
						'XXXXX'						AS GL_NO,
						MAX(M.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(M.TRDP_CD) ) AS COM_NM,
						MAX(D.INV_APLY_CURR_CD)		AS CURR_CD,
						MAX(D.INV_SUM_AMT)			AS AMT,
						MAX(M.OFC_CD)				AS P_OFC_CD,
						D.INV_SEQ					AS REF_SEQ,
						MAX(D.INV_POST_DT)			AS POST_DT,
						ABS(SUM(F.INV_SUM_AMT) - SUM(F.CR_AMT))			AS F_AMT,
						'AMOUNT DIFFERENCE'			AS ERROR,
						'CD'						AS m_type,
		        		D.INV_SEQ 					AS m_seq
				  FROM TB_INV M
					  ,TB_INV_DTL D
					  ,TB_FRT F
				 WHERE M.INV_SEQ = D.INV_SEQ
				   AND D.INV_SEQ = F.INV_SEQ
				   AND ISNULL(M.DELT_FLG, 'N') = 'N'
				   AND ISNULL(D.DELT_FLG, 'N') = 'N'
				   AND ISNULL(F.DELT_FLG, 'N') = 'N'
				   AND M.SELL_BUY_TP_CD IN ('C','D')
				   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
				 GROUP BY D.INV_SEQ
			   ) A
		  WHERE A.AMT != A.F_AMT
    </select>
    
    
    
    
    
    
    <!-- SLIP VERIFY A/P G/L CODE MISSING   -->
    <select id="select5_1List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT
				MAX(A.TYPE)			AS TYPE,
				MAX(A.REF_NO)		AS REF_NO,
				MAX(A.GL_NO)		AS GL_NO,
				MAX(A.COM_CD)		AS COM_CD,
				MAX(A.COM_NM)		AS COM_NM,
				MAX(A.CURR_CD)		AS CURR_CD,
				MAX(A.AMT)			AS AMT,
				MAX(A.P_OFC_CD)		AS P_OFC_CD,
				MAX(A.REF_SEQ)		AS REF_SEQ,
				MAX(A.POST_DT)		AS POST_DT,
				'G/L CODE MISSING'  AS ERROR,
				'AP'				AS m_type,
		        MAX(A.REF_SEQ) 		AS m_seq
			FROM
				(
					SELECT
						'A/P(INVOICE)'				AS TYPE,
						D.BUY_INV_NO				AS REF_NO,
						(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = I.OFC_CD) AS GL_NO,
						I.TRDP_CD 					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						D.INV_SUM_AMT 				AS AMT,
						D.INV_APLY_CURR_CD 			AS CURR_CD,
						I.OFC_CD 					AS P_OFC_CD,
						I.INV_SEQ 					AS REF_SEQ,
						D.INV_POST_DT				AS POST_DT
					FROM
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND I.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND I.SELL_BUY_TP_CD = 'B'
					
					UNION ALL
					
					SELECT
						'A/P(FREIGHT)'				AS TYPE,
						D.BUY_INV_NO				AS REF_NO,
						(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						I.TRDP_CD 					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = I.TRDP_CD) AS COM_NM,
						D.INV_SUM_AMT 				AS AMT,
						F.INV_CURR_CD 				AS CURR_CD,
						I.OFC_CD 					AS P_OFC_CD,
						I.INV_SEQ 					AS REF_SEQ,
						D.INV_POST_DT				AS POST_DT
					FROM
					TB_FRT F,
					TB_INV I,
					TB_INV_DTL D
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'	
					AND I.SELL_BUY_TP_CD = 'B'
					
					UNION ALL
					
					SELECT
						'A/P(VAT LINE)'				AS TYPE,
						MAX(D.BUY_INV_NO)			AS REF_NO,
						(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'CO') AS GL_NO,
						MAX(I.TRDP_CD) 				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(I.TRDP_CD)) AS COM_NM,
						MAX(D.INV_SUM_AMT)			AS AMT,
						MAX(D.INV_APLY_CURR_CD) 	AS CURR_CD,
						MAX(I.OFC_CD) 				AS P_OFC_CD,
						I.INV_SEQ 					AS REF_SEQ,
						MAX(D.INV_POST_DT) 			AS POST_DT	
					FROM
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_INV_DTL D,
					TB_FRT_CD FC
					WHERE 1=1
					AND F.INV_SEQ = I.INV_SEQ
					AND F.INV_SEQ = D.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AR_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') NOT IN ('WAF', 'TAX','DTY')
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(D.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
<!--					AND F.FRT_CD NOT IN ('ATAX', 'TAX', 'DUT', 'DUTA', 'EXA', 'TAXB')   -->
					AND I.SELL_BUY_TP_CD = 'B'
				GROUP BY I.INV_SEQ
					
				) A
		WHERE (A.GL_NO = '' OR A.GL_NO IS NULL)
		  AND POST_DT BETWEEN #s_strdt# AND #s_enddt#
	    GROUP BY REF_SEQ
    </select>
    
    
    
    <!-- SLIP VERIFY A/P CUSTOMER MISSING   -->
    <select id="select5_2List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT  'A/P'					AS TYPE,
				D.BUY_INV_NO			AS REF_NO,
				'XXXXX'					AS GL_NO,
				TRDP_CD					AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				D.INV_APLY_CURR_CD		AS CURR_CD,
				D.INV_SUM_AMT			AS AMT,
				M.OFC_CD				AS P_OFC_CD,
				D.INV_SEQ				AS REF_SEQ,
				D.INV_POST_DT			AS POST_DT,
				'CUSTOMER MISSING'		AS ERROR,
				'AP'					AS m_type,
		        D.INV_SEQ 				AS m_seq
		  FROM TB_INV M
		      ,TB_INV_DTL D
		 WHERE M.INV_SEQ = D.INV_SEQ
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND (M.TRDP_CD = '' OR M.TRDP_CD IS NULL)
		   AND M.SELL_BUY_TP_CD = 'B'
		   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    <!-- SLIP VERIFY A/P BILLING CODE MISSING   -->
    <select id="select5_3List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT 'A/P(FREIGHT)'			AS TYPE,
				D.BUY_INV_NO			AS REF_NO,
				'XXXXX'					AS GL_NO,
				M.TRDP_CD				AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				D.INV_APLY_CURR_CD		AS CURR_CD,
				D.INV_SUM_AMT			AS AMT,
				M.OFC_CD				AS P_OFC_CD,
				D.INV_SEQ				AS REF_SEQ,
				D.INV_POST_DT			AS POST_DT,
				'BILLING CODE MISSING'	AS ERROR,
				'AP'					AS m_type,
		        D.INV_SEQ 				AS m_seq
		  FROM TB_INV M
		      ,TB_INV_DTL D
		      ,TB_FRT F
		 WHERE M.INV_SEQ = D.INV_SEQ
		   AND D.INV_SEQ = F.INV_SEQ
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND ISNULL(F.DELT_FLG, 'N') = 'N'
		   AND (F.FRT_CD = '' OR F.FRT_CD IS NULL)
		   AND M.SELL_BUY_TP_CD = 'B'
		   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    <!-- SLIP VERIFY A/P AMOUNT DIFFERENCE   -->
    <select id="select5_4List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT A.*
		  FROM(	
				SELECT 'A/P'						AS TYPE,
						MAX(D.BUY_INV_NO)			AS REF_NO,
						'XXXXX'						AS GL_NO,
						MAX(M.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(M.TRDP_CD) ) AS COM_NM,
						MAX(D.INV_APLY_CURR_CD)		AS CURR_CD,
						MAX(D.INV_SUM_AMT)			AS AMT,
						MAX(M.OFC_CD)				AS P_OFC_CD,
						D.INV_SEQ					AS REF_SEQ,
						MAX(D.INV_POST_DT)			AS POST_DT,
						SUM(F.INV_SUM_AMT)			AS F_AMT,
						'AMOUNT DIFFERENCE'			AS ERROR,
						'AP'						AS m_type,
		        		D.INV_SEQ 					AS m_seq
				  FROM TB_INV M
					  ,TB_INV_DTL D
					  ,TB_FRT F
				 WHERE M.INV_SEQ = D.INV_SEQ
				   AND D.INV_SEQ = F.INV_SEQ
				   AND ISNULL(M.DELT_FLG, 'N') = 'N'
				   AND ISNULL(D.DELT_FLG, 'N') = 'N'
				   AND ISNULL(F.DELT_FLG, 'N') = 'N'
				   AND M.SELL_BUY_TP_CD = 'B'
				   AND D.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
				 GROUP BY D.INV_SEQ
			   ) A
		  WHERE A.AMT != A.F_AMT
    </select>
    
    
    
    
    
    
    <!-- SLIP VERIFY DEPOSIT G/L CODE MISSING   -->
    <select id="select6_1List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT
				A.TYPE			AS TYPE,
				A.REF_NO		AS REF_NO,
				A.GL_NO			AS GL_NO,
				A.COM_CD		AS COM_CD,
				A.COM_NM		AS COM_NM,
				A.CURR_CD		AS CURR_CD,
				A.AMT			AS AMT,
				A.P_OFC_CD		AS P_OFC_CD,
				A.REF_SEQ		AS REF_SEQ,
				A.POST_DT		AS POST_DT,
				'G/L CODE MISSING'  AS ERROR,
				CASE WHEN A.JNR_TP = 'D' THEN 'DP'
				     WHEN A.JNR_TP = 'B' THEN 'DC'
				END				AS m_type,
		        A.REF_NO 		AS m_seq
			FROM
			(
				SELECT 
					CASE WHEN M.JNR_TP = 'D' THEN 'DEPOSIT'
					     WHEN M.JNR_TP = 'B' THEN 'DEPOSIT(COMBINE)'
					END					AS TYPE, 
					D.JNR_NO			AS REF_NO,
					D.GL_NO				AS GL_NO,
					CASE WHEN D.GL_NO = '10220' THEN 'SEL1'
					     ELSE TRDP_CD 
					END					AS COM_CD,
					CASE WHEN D.GL_NO = '10220' THEN (SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = 'SEL1')
					     ELSE RCVD_FM_NM 
					END					AS COM_NM,
					D.CURR_CD			AS CURR_CD,
					M.AMT				AS AMT,
					M.P_OFC_CD			AS P_OFC_CD,
					D.INV_NO			AS REF_SEQ,
					M.POST_DT			AS POST_DT,
					M.JNR_TP			AS JNR_TP
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
				AND M.JNR_TP IN ('D','B')
				
				UNION ALL
				
				SELECT 
					CASE WHEN M.JNR_TP = 'D' THEN 'DEPOSIT'
					     WHEN M.JNR_TP = 'B' THEN 'DEPOSIT(COMBINE)'
					END					AS TYPE, 
					D.JNR_NO			AS REF_NO,
					(SELECT GL_CD FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS GL_NO,
					M.BANK_SEQ			AS COM_CD,
					(SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS COM_NM,
					D.CURR_CD			AS CURR_CD,
					M.AMT				AS AMT,
					M.P_OFC_CD			AS P_OFC_CD,
					D.INV_NO			AS REF_SEQ,
					M.POST_DT			AS POST_DT,
					M.JNR_TP			AS JNR_TP
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
				AND M.JNR_TP IN ('D','B')
			) A
			WHERE A.POST_DT BETWEEN #s_strdt# AND #s_enddt#
			  AND (A.GL_NO = '' OR A.GL_NO IS NULL)
    </select>
    
    
    <!-- SLIP VERIFY DEPOSIT CUSTOMER MISSING   -->
    <select id="select6_2List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT  CASE WHEN M.JNR_TP = 'D' THEN 'DEPOSIT'
					 WHEN M.JNR_TP = 'B' THEN 'DEPOSIT(COMBINE)'
				END						AS TYPE, 
				D.JNR_NO				AS REF_NO,
				D.GL_NO					AS GL_NO,
				M.TRDP_CD				AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				M.CURR_CD				AS CURR_CD,
				M.AMT					AS AMT,
				M.P_OFC_CD				AS P_OFC_CD,
				D.INV_NO				AS REF_SEQ,
				M.POST_DT				AS POST_DT,
				'CUSTOMER MISSING'		AS ERROR,
				CASE WHEN M.JNR_TP = 'D' THEN 'DP'
					 WHEN M.JNR_TP = 'B' THEN 'DC'
				END						AS m_type,
		        D.JNR_NO 				AS m_seq
		  FROM TB_JNR_MST M
		      ,TB_JNR_DTL D
		 WHERE M.JNR_NO = D.JNR_NO
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND (M.TRDP_CD = '' OR M.TRDP_CD IS NULL)
		   AND M.JNR_TP IN ('D','B')
		   AND M.POST_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    
    <!-- SLIP VERIFY DEPOSIT AMOUNT DIFFERENCE   -->
    <select id="select6_3List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT A.*
		  FROM(	
				SELECT  CASE WHEN MAX(M.JNR_TP) = 'D' THEN 'DEPOSIT'
					 		 WHEN MAX(M.JNR_TP) = 'B' THEN 'DEPOSIT(COMBINE)'
						END							AS TYPE, 
						MAX(D.JNR_NO)				AS REF_NO,
						MAX(D.GL_NO)				AS GL_NO,
						MAX(M.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(M.TRDP_CD) ) AS COM_NM,
						MAX(M.CURR_CD)				AS CURR_CD,
						ABS(MAX(M.AMT))				AS AMT,
						MAX(M.P_OFC_CD)				AS P_OFC_CD,
						MAX(D.INV_NO)				AS REF_SEQ,
						MAX(M.POST_DT)				AS POST_DT,
						ABS(SUM(D.TTL_PAY_AMT))		AS F_AMT,
						'AMOUNT DIFFERENCE'			AS ERROR,
						CASE WHEN MAX(M.JNR_TP) = 'D' THEN 'DP'
					 		 WHEN MAX(M.JNR_TP) = 'B' THEN 'DC'
						END							AS m_type,
		        		MAX(D.JNR_NO)				AS m_seq
				  FROM TB_JNR_MST M
					  ,TB_JNR_DTL D
				 WHERE M.JNR_NO = D.JNR_NO
				   AND ISNULL(M.DELT_FLG, 'N') = 'N'
				   AND ISNULL(D.DELT_FLG, 'N') = 'N'
				   AND M.JNR_TP IN ('D','B')
				   AND M.POST_DT BETWEEN #s_strdt# AND #s_enddt#
				 GROUP BY D.JNR_NO
			   ) A
		  WHERE A.AMT != A.F_AMT
    </select>
    
    
    
    
    
     <!-- SLIP VERIFY CHECK G/L CODE MISSING   -->
    <select id="select7_1List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT
			A.TYPE			AS TYPE,
			A.REF_NO		AS REF_NO,
			A.GL_NO			AS GL_NO,
			A.COM_CD		AS COM_CD,
			A.COM_NM		AS COM_NM,
			A.CURR_CD		AS CURR_CD,
			A.AMT			AS AMT,
			A.P_OFC_CD		AS P_OFC_CD,
			A.REF_SEQ		AS REF_SEQ,
			A.POST_DT		AS POST_DT,
			'G/L CODE MISSING'  AS ERROR,
			CASE WHEN A.JNR_TP = 'C' THEN 'CK'
			     WHEN A.JNR_TP = 'V' THEN 'CC'
			END				AS m_type,
		    A.REF_NO		AS m_seq
			FROM
			(
				SELECT 
					CASE WHEN M.JNR_TP = 'C' THEN 'CHECK'
					 	 WHEN M.JNR_TP = 'V' THEN 'CHECK(COMBINE)'
					END					AS TYPE, 
					D.JNR_NO			AS REF_NO,
					D.GL_NO				AS GL_NO,
					CASE WHEN D.GL_NO = '10220' THEN 'SEL1'
					     ELSE TRDP_CD 
					END					AS COM_CD,
					CASE WHEN D.GL_NO = '10220' THEN (SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = 'SEL1')
					     ELSE (SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)  
					END					AS COM_NM,
					D.CURR_CD			AS CURR_CD,
					M.AMT				AS AMT,
					M.P_OFC_CD			AS P_OFC_CD,
					D.INV_NO			AS REF_SEQ,
					M.POST_DT			AS POST_DT,
					M.JNR_TP			AS JNR_TP
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
				AND M.JNR_TP IN ('C','V')
				
				UNION ALL
				
				SELECT 
					CASE WHEN M.JNR_TP = 'C' THEN 'CHECK'
					 	 WHEN M.JNR_TP = 'V' THEN 'CHECK(COMBINE)'
					END					AS TYPE,
					D.JNR_NO			AS REF_NO,
					(SELECT GL_CD FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS GL_NO,
					M.BANK_SEQ			AS COM_CD,
					(SELECT BANK_NM FROM TB_BANK WHERE BANK_SEQ = M.BANK_SEQ) AS COM_NM,
					D.CURR_CD			AS CURR_CD,
					M.AMT				AS AMT,
					M.P_OFC_CD			AS P_OFC_CD,
					D.INV_NO			AS REF_SEQ,
					M.POST_DT			AS POST_DT,
					M.JNR_TP			AS JNR_TP
				FROM
				TB_JNR_MST M,
				TB_JNR_DTL D
				WHERE 1=1
				AND M.JNR_NO = D.JNR_NO
				AND ISNULL(M.DELT_FLG, 'N') = 'N'
				AND ISNULL(D.DELT_FLG, 'N') = 'N'
				AND M.JNR_TP IN ('C','V')
			) A
			WHERE A.POST_DT BETWEEN #s_strdt# AND #s_enddt#
			  AND (A.GL_NO = '' OR A.GL_NO IS NULL)
    </select>
    
    
    <!-- SLIP VERIFY CHECK CUSTOMER MISSING   -->
    <select id="select7_2List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT  CASE WHEN M.JNR_TP = 'C' THEN 'CHECK'
					 WHEN M.JNR_TP = 'V' THEN 'CHECK(COMBINE)'
				END						AS TYPE,
				D.JNR_NO				AS REF_NO,
				D.GL_NO					AS GL_NO,
				M.TRDP_CD				AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				M.CURR_CD				AS CURR_CD,
				M.AMT					AS AMT,
				M.P_OFC_CD				AS P_OFC_CD,
				D.INV_NO				AS REF_SEQ,
				M.POST_DT				AS POST_DT,
				'CUSTOMER MISSING'		AS ERROR,
				CASE WHEN M.JNR_TP = 'C' THEN 'CK'
					 WHEN M.JNR_TP = 'V' THEN 'CC'
				END						AS m_type,
		   		D.JNR_NO				AS m_seq
		  FROM TB_JNR_MST M
		      ,TB_JNR_DTL D
		 WHERE M.JNR_NO = D.JNR_NO
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND (M.TRDP_CD = '' OR M.TRDP_CD IS NULL)
		   AND M.JNR_TP IN ('C','V')
		   AND M.POST_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    <!-- SLIP VERIFY CHECK AMOUNT DIFFERENCE   -->
    <select id="select7_3List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT A.*
		  FROM(	
				SELECT  CASE WHEN MAX(M.JNR_TP) = 'C' THEN 'CHECK'
					 		 WHEN MAX(M.JNR_TP) = 'V' THEN 'CHECK(COMBINE)'
						END							AS TYPE,
						MAX(D.JNR_NO)				AS REF_NO,
						MAX(D.GL_NO)				AS GL_NO,
						MAX(M.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(M.TRDP_CD) ) AS COM_NM,
						MAX(M.CURR_CD)				AS CURR_CD,
						ABS(MAX(M.AMT))				AS AMT,
						MAX(M.P_OFC_CD)				AS P_OFC_CD,
						MAX(D.INV_NO)				AS REF_SEQ,
						MAX(M.POST_DT)				AS POST_DT,
						ABS(SUM(D.TTL_PAY_AMT))		AS F_AMT,
						'AMOUNT DIFFERENCE'			AS ERROR,
						CASE WHEN MAX(M.JNR_TP) = 'C' THEN 'CK'
					 		 WHEN MAX(M.JNR_TP) = 'V' THEN 'CC'
						END							AS m_type,
		   				MAX(D.JNR_NO)				AS m_seq
				  FROM TB_JNR_MST M
					  ,TB_JNR_DTL D
				 WHERE M.JNR_NO = D.JNR_NO
				   AND ISNULL(M.DELT_FLG, 'N') = 'N'
				   AND ISNULL(D.DELT_FLG, 'N') = 'N'
				   AND M.JNR_TP IN ('C','V')
				   AND M.POST_DT BETWEEN #s_strdt# AND #s_enddt#
				 GROUP BY D.JNR_NO
			   ) A
		  WHERE A.AMT != A.F_AMT
    </select>
    
    
    
    
    <!-- SLIP VERIFY COMBINE LOCAL G/L CODE MISSING   -->
    <select id="select8_1List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT
				A.TYPE			AS TYPE,
				A.REF_NO		AS REF_NO,
				A.GL_NO			AS GL_NO,
				A.COM_CD		AS COM_CD,
				A.COM_NM		AS COM_NM,
				A.CURR_CD		AS CURR_CD,
				A.AMT			AS AMT,
				A.P_OFC_CD		AS P_OFC_CD,
				A.REF_SEQ		AS REF_SEQ,
				A.POST_DT		AS POST_DT,
				'G/L CODE MISSING'  AS ERROR,
				'CB'			AS m_type,
		   		A.REF_SEQ		AS m_seq
				FROM
				(
					SELECT
						'COMBINE(LOCAL)'			AS TYPE,
						C.INV_NO					AS REF_NO,					
						(SELECT GL_AR FROM TB_OFC WHERE OFC_CD = C.RGST_OFC_CD) AS GL_NO,
						C.TRDP_CD					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
						C.INV_SUM_AMT				AS AMT,
						C.INV_APLY_CURR_CD			AS CURR_CD,
						C.OFC_CD					AS P_OFC_CD,
						C.CMB_INV_SEQ				AS REF_SEQ,
						C.INV_DT					AS POST_DT
					FROM
					TB_CMB_INV C
					WHERE 1=1
					AND ISNULL(C.DELT_FLG,'N') != 'Y'
					AND C.SELL_BUY_TP_CD = 'S'
					
					UNION ALL
					
					SELECT
						'COMBINE(LOCAL)'			AS TYPE,
						C.INV_NO					AS REF_NO,					
						(SELECT GL_CD_REV FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						C.TRDP_CD					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
						C.INV_SUM_AMT				AS AMT,
						C.INV_APLY_CURR_CD			AS CURR_CD,
						C.OFC_CD					AS P_OFC_CD,
						C.CMB_INV_SEQ				AS REF_SEQ,
						C.INV_DT					AS POST_DT	
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'	
					AND C.SELL_BUY_TP_CD = 'S'
					
					UNION ALL
					
					SELECT
						'COMBINE(LOCAL)'			AS TYPE,
						MAX(C.INV_NO)				AS REF_NO,
						(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'RE') AS GL_NO,
						MAX(C.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
						MAX(C.INV_SUM_AMT)			AS CREDIT,
						MAX(C.INV_APLY_CURR_CD)		AS CURR_CD,
						MAX(C.OFC_CD)				AS P_OFC_CD,
						C.CMB_INV_SEQ				AS REF_SEQ,
						MAX(C.INV_DT)				AS POST_DT	
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_FRT_CD FC
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AR_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.INV_VAT_AMT,0) != 0
					AND C.SELL_BUY_TP_CD = 'S'
				GROUP BY C.CMB_INV_SEQ
										
				) A
			WHERE A.POST_DT BETWEEN #s_strdt# AND #s_enddt#
			  AND (A.GL_NO = '' OR A.GL_NO IS NULL)
    </select>
    
    
    <!-- SLIP VERIFY COMBINE(LOCAL) CUSTOMER MISSING   -->
    <select id="select8_2List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT  'COMBINE(LOCAL)'		AS TYPE,
				M.INV_NO				AS REF_NO,
				'XXXXX'					AS GL_NO,
				M.TRDP_CD				AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				M.INV_APLY_CURR_CD		AS CURR_CD,
				M.INV_SUM_AMT			AS AMT,
				M.OFC_CD				AS P_OFC_CD,
				D.CMB_INV_SEQ			AS REF_SEQ,
				M.INV_DT				AS POST_DT,
				'CUSTOMER MISSING'		AS ERROR,
				'CB'					AS m_type,
		   		D.CMB_INV_SEQ			AS m_seq
		  FROM TB_CMB_INV M
		      ,TB_INV D
		 WHERE M.CMB_INV_SEQ = D.CMB_INV_SEQ
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND (M.TRDP_CD = '' OR M.TRDP_CD IS NULL)
		   AND M.SELL_BUY_TP_CD = 'S'
		   AND M.INV_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    
    <!-- SLIP VERIFY COMBINE(LOCAL) AMOUNT DIFFERENCE   -->
    <select id="select8_3List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT A.*
		  FROM(	
				SELECT 'COMBINE(LOCAL)'				AS TYPE,
						MAX(M.INV_NO)				AS REF_NO,
						'XXXXX'						AS GL_NO,
						MAX(M.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(M.TRDP_CD) ) AS COM_NM,
						MAX(M.INV_APLY_CURR_CD)		AS CURR_CD,
						MAX(M.INV_SUM_AMT)			AS AMT,
						MAX(M.OFC_CD)				AS P_OFC_CD,
						MAX(I.CMB_INV_SEQ)			AS REF_SEQ,
						MAX(M.INV_DT)				AS POST_DT,
						SUM(D.INV_SUM_AMT)			AS F_AMT,
						'AMOUNT DIFFERENCE'			AS ERROR,
						'CB'						AS m_type,
		   				MAX(I.CMB_INV_SEQ)			AS m_seq
				  FROM TB_CMB_INV M
					  ,TB_INV I
					  ,TB_INV_DTL D 
				 WHERE M.CMB_INV_SEQ = I.CMB_INV_SEQ
				   AND I.INV_SEQ = D.INV_SEQ
				   AND ISNULL(M.DELT_FLG, 'N') = 'N'
				   AND ISNULL(I.DELT_FLG, 'N') = 'N'
				   AND ISNULL(D.DELT_FLG, 'N') = 'N'
				   AND M.SELL_BUY_TP_CD = 'S'
				   AND M.INV_DT BETWEEN #s_strdt# AND #s_enddt#
				 GROUP BY I.CMB_INV_SEQ
			   ) A
		  WHERE A.AMT != A.F_AMT
    </select>
    
    
    
    
    
    
    
    
    <!-- SLIP VERIFY COMBINE A/P G/L CODE MISSING   -->
    <select id="select9_1List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT
				MAX(A.TYPE)			AS TYPE,
				MAX(A.REF_NO)		AS REF_NO,
				MAX(A.GL_NO)		AS GL_NO,
				MAX(A.COM_CD)		AS COM_CD,
				MAX(A.COM_NM)		AS COM_NM,
				MAX(A.CURR_CD)		AS CURR_CD,
				MAX(A.AMT)			AS AMT,
				MAX(A.P_OFC_CD)		AS P_OFC_CD,
				MAX(A.REF_SEQ)		AS REF_SEQ,
				MAX(A.POST_DT)		AS POST_DT,
				'G/L CODE MISSING'  AS ERROR,
				'CB'				AS m_type,
		   		MAX(A.REF_SEQ)		AS m_seq
				FROM
				(
					SELECT
						'COMBINE(A/P)'				AS TYPE,
						C.INV_NO					AS REF_NO,					
						(SELECT GL_AP FROM TB_OFC WHERE OFC_CD = C.RGST_OFC_CD) AS GL_NO,
						C.TRDP_CD					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
						C.INV_SUM_AMT				AS AMT,
						C.INV_APLY_CURR_CD			AS CURR_CD,
						C.OFC_CD					AS P_OFC_CD,
						C.CMB_INV_SEQ				AS REF_SEQ,
						C.INV_DT					AS POST_DT
					FROM
					TB_CMB_INV C
					WHERE 1=1
					AND ISNULL(C.DELT_FLG,'N') != 'Y'
					AND C.SELL_BUY_TP_CD = 'B'
					
					UNION ALL
					
					SELECT
						'COMBINE(A/P)'				AS TYPE,
						C.INV_NO					AS REF_NO,					
						(SELECT GL_CD_COST FROM TB_FRT_CD WHERE FRT_CD = F.FRT_CD) AS GL_NO,
						C.TRDP_CD					AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = C.TRDP_CD) AS COM_NM,
						C.INV_SUM_AMT				AS AMT,
						C.INV_APLY_CURR_CD			AS CURR_CD,
						C.OFC_CD					AS P_OFC_CD,
						C.CMB_INV_SEQ				AS REF_SEQ,
						C.INV_DT					AS POST_DT	
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'	
					AND C.SELL_BUY_TP_CD = 'B'
					
					UNION ALL
					
					SELECT
						'COMBINE(A/P)'				AS TYPE,
						MAX(C.INV_NO)				AS REF_NO,
						(SELECT GL_CD FROM TB_VAT_GL WHERE VAT_TP = 'CO') AS GL_NO,
						MAX(C.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(C.TRDP_CD)) AS COM_NM,
						MAX(C.INV_SUM_AMT)			AS CREDIT,
						MAX(C.INV_APLY_CURR_CD)		AS CURR_CD,
						MAX(C.OFC_CD)				AS P_OFC_CD,
						C.CMB_INV_SEQ				AS REF_SEQ,
						MAX(C.INV_DT)				AS POST_DT	
					FROM
					TB_CMB_INV C,
					TB_FRT F,
					TB_INV I,
					TB_TRDP_VAT_OPT V,
					TB_FRT_CD FC
					WHERE 1=1
					AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
					AND F.INV_SEQ = I.INV_SEQ
					AND F.FRT_CD  = FC.FRT_CD
					AND I.TRDP_CD = V.TRDP_CD 
					AND V.AR_VAT_LINE = 'Y'
					AND ISNULL(FC.FRT_CLSS_CD,'') != 'WAF'
					AND ISNULL(I.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.DELT_FLG,'N') != 'Y'
					AND ISNULL(F.INV_VAT_AMT,0) != 0
					AND C.SELL_BUY_TP_CD = 'B'
				GROUP BY C.CMB_INV_SEQ
										
				) A
			WHERE A.POST_DT BETWEEN #s_strdt# AND #s_enddt#
			  AND (A.GL_NO = '' OR A.GL_NO IS NULL)
    </select>
    
    
    
    <!-- SLIP VERIFY COMBINE(A/P) CUSTOMER MISSING   -->
    <select id="select9_2List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT  'COMBINE(A/P)'			AS TYPE,
				M.INV_NO				AS REF_NO,
				'XXXXX'					AS GL_NO,
				M.TRDP_CD				AS COM_CD,
				(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = M.TRDP_CD)		AS COM_NM,
				M.INV_APLY_CURR_CD		AS CURR_CD,
				M.INV_SUM_AMT			AS AMT,
				M.OFC_CD				AS P_OFC_CD,
				D.CMB_INV_SEQ			AS REF_SEQ,
				M.INV_DT				AS POST_DT,
				'CUSTOMER MISSING'		AS ERROR,
				'CB'					AS m_type,
		   		D.CMB_INV_SEQ			AS m_seq
		  FROM TB_CMB_INV M
		      ,TB_INV D
		 WHERE M.CMB_INV_SEQ = D.CMB_INV_SEQ
		   AND ISNULL(M.DELT_FLG, 'N') = 'N'
		   AND ISNULL(D.DELT_FLG, 'N') = 'N'
		   AND (M.TRDP_CD = '' OR M.TRDP_CD IS NULL)
		   AND M.SELL_BUY_TP_CD = 'B'
		   AND M.INV_DT BETWEEN #s_strdt# AND #s_enddt#
    </select>
    
    
    
    <!-- SLIP VERIFY COMBINE(A/P) AMOUNT DIFFERENCE   -->
    <select id="select9_3List" parameterClass="java.util.HashMap" resultClass="SlipErrVO">
    	SELECT A.*
		  FROM(	
				SELECT 'COMBINE(A/P)'				AS TYPE,
						MAX(M.INV_NO)				AS REF_NO,
						'XXXXX'						AS GL_NO,
						MAX(M.TRDP_CD)				AS COM_CD,
						(SELECT ENG_NM FROM TB_TRDP WHERE TRDP_CD = MAX(M.TRDP_CD) ) AS COM_NM,
						MAX(M.INV_APLY_CURR_CD)		AS CURR_CD,
						MAX(M.INV_SUM_AMT)			AS AMT,
						MAX(M.OFC_CD)				AS P_OFC_CD,
						MAX(I.CMB_INV_SEQ)			AS REF_SEQ,
						MAX(M.INV_DT)				AS POST_DT,
						SUM(D.INV_SUM_AMT)			AS F_AMT,
						'AMOUNT DIFFERENCE'			AS ERROR,
						'CB'						AS m_type,
		   				MAX(I.CMB_INV_SEQ)			AS m_seq
				  FROM TB_CMB_INV M
					  ,TB_INV I
					  ,TB_INV_DTL D
				 WHERE M.CMB_INV_SEQ = I.CMB_INV_SEQ
				   AND I.INV_SEQ = D.INV_SEQ
				   AND ISNULL(M.DELT_FLG, 'N') = 'N'
				   AND ISNULL(I.DELT_FLG, 'N') = 'N'
				   AND ISNULL(D.DELT_FLG, 'N') = 'N'
				   AND M.SELL_BUY_TP_CD = 'B'
				   AND M.INV_DT BETWEEN #s_strdt# AND #s_enddt#
				 GROUP BY I.CMB_INV_SEQ
			   ) A
		  WHERE A.AMT != A.F_AMT
    </select>
    
    
    
    
    
    <!-- INVOICE CLOSE 대상데이터 조회   -->
    <select id="selectInvClose" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				I.INV_SEQ	AS inv_seq
		  FROM
				TB_INV I,
				TB_INV_DTL ID
				WHERE 1=1
				AND ID.INV_POST_DT BETWEEN #s_strdt# AND #s_enddt#
				AND I.INV_SEQ = ID.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(ID.DELT_FLG,'N') != 'Y'
				AND ISNULL(ID.CLT_CMPL_FLG,'N') != 'Y'
				AND ISNULL(I.TAX_BIL_FLG,'N') != 'Y'
    </select>
    
    
    <!-- JOURNAL CLOSE 대상데이터 조회    -->
    <select id="selectJnrClose" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			jnr_no	AS jnr_no
		 FROM TB_JNR_MST
			WHERE 1=1
			AND ISNULL(DELT_FLG,'N') != 'Y'
			AND POST_DT BETWEEN #s_strdt# AND #s_enddt#
			AND ISNULL(CLT_CMPL_FLG,'N') != 'Y'
    </select>
    
    
    <!-- COMBINE CLOSE 대상데이터 조회   -->
    <select id="selectCmbClose" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT 
			C.CMB_INV_SEQ AS inv_seq
			FROM
			TB_CMB_INV C,
			TB_INV I
			WHERE 1=1
			AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.DELT_FLG = 'N'
			AND C.INV_DT BETWEEN #s_strdt# AND #s_enddt# 
			AND ISNULL(C.DELT_FLG,'N') != 'Y'
			AND ISNULL(I.CLT_CMPL_FLG, 'N') != 'Y'
	 	GROUP BY C.CMB_INV_SEQ
    </select>
    
    
    
    
    <!-- INVOICE CLOSE CANCEL 대상데이터 조회   -->
    <select id="selectInvCloseCancel" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
				I.INV_SEQ	AS inv_seq
		  FROM
				TB_INV I,
				TB_INV_DTL ID
		 WHERE 1=1
		<isEqual property="f_oneDay" compareValue="Y">
			AND ID.INV_POST_DT = #f_proc_dt#
		</isEqual>
		<isEqual property="f_oneDay" compareValue="N">
			<![CDATA[
			AND ID.INV_POST_DT > #f_proc_dt#
			]]>
		</isEqual>
		  AND I.INV_SEQ = ID.INV_SEQ
	   	  AND ISNULL(I.DELT_FLG,'N')     != 'Y'
		  AND ISNULL(ID.DELT_FLG,'N')    != 'Y'
		  AND ISNULL(ID.CLT_CMPL_FLG,'N') = 'Y'
		  AND ISNULL(I.TAX_BIL_FLG,'N')  != 'Y'
    </select>
    
    
    <!-- JOURNAL CLOSE CANCEL 대상데이터 조회    -->
    <select id="selectJnrCloseCancel" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT 
			jnr_no	AS jnr_no
		 FROM TB_JNR_MST
		WHERE 1=1
		<isEqual property="f_oneDay" compareValue="Y">
			AND POST_DT = #f_proc_dt#
		</isEqual>
		<isEqual property="f_oneDay" compareValue="N">
			<![CDATA[
			AND POST_DT > #f_proc_dt#
			]]>
		</isEqual>
		  AND ISNULL(DELT_FLG,'N')    != 'Y'
		  AND ISNULL(CLT_CMPL_FLG,'N') = 'Y'
    </select>
    
    
    <!-- COMBINE CLOSE CANCEL 대상데이터 조회   -->
    <select id="selectCmbCloseCancel" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
    	SELECT 
			CONVERT(numeric, C.CMB_INV_SEQ) AS inv_seq
		  FROM TB_CMB_INV C,
			   TB_INV I
	     WHERE 1=1
	     <isEqual property="f_oneDay" compareValue="Y">
	     	AND C.INV_DT = #f_proc_dt#
	     </isEqual>
	     <isEqual property="f_oneDay" compareValue="N">
	     	<![CDATA[
			AND C.INV_DT > #f_proc_dt#
			]]> 
	     </isEqual>
		    AND C.CMB_INV_SEQ = I.CMB_INV_SEQ
			AND I.DELT_FLG                  = 'N'
			AND ISNULL(C.DELT_FLG,'N')     != 'Y'
			AND ISNULL(I.CLT_CMPL_FLG, 'N') = 'Y'
	 	GROUP BY C.CMB_INV_SEQ
    </select>
    
    
    
    
    <!-- SLIP_MST INTERFACE INFO 삭제   -->
    <update id="updateReCrtAcctSlipNoMst" parameterClass="SlipVO">
		UPDATE TB_SLIP_MST
		   SET ACCT_SLIP_NO = NULL
		 WHERE SLIP_NO = #slip_no#
    </update>
    
    <!-- SLIP_DTL INTERFACE INFO 삭제   -->
    <update id="updateReCrtAcctSlipNoDtl" parameterClass="SlipVO">
		UPDATE TB_SLIP_DTL
		   SET ACCT_SLIP_NO = NULL
		      ,ACCT_IF_DT = NULL
		 WHERE SLIP_NO = #slip_no#
    </update>
    
    <!-- Vinh.Vo 2015/01/26 (S)  -->
    
    <!-- ######### START TB_INTG_BL_BLCK #########  -->
    
    <insert id="insertBl_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/*insertBl_Block_Batch_Blck*/
    	INSERT INTO	TB_INTG_BL_BLCK(
			INTG_BL_SEQ,  BL_STS_CD, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, 	MODI_USRID,
			MODI_OFC_CD, MODI_TMS
		)	
		SELECT TB1.INTG_BL_SEQ,	'HF' AS BL_STS_CD,	TB1.RGST_USRID,
				TB1.RGST_OFC_CD, TB1.RGST_TMS,		TB1.MODI_USRID,
				TB1.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS

		FROM TB_INTG_BL TB1

		WHERE 
				TB1.POST_DT 	<![CDATA[ <= ]]> #s_block_dt#
			AND TB1.BL_STS_CD 	<![CDATA[ <> ]]> 'HF'
			AND TB1.DELT_FLG = 'N'
			AND TB1.INTG_BL_SEQ NOT IN (SELECT INTG_BL_SEQ FROM TB_INTG_BL_BLCK)
    	
    </insert>
    
    <update id="updateBl_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/* updateBl_Block_Batch_Blck */
    	
    	 UPDATE TB_INTG_BL_BLCK
    	 
	    	 <isEqual property="s_chk_block" compareValue="Y">
	    	   	SET BL_STS_CD = 'HF'
	    	 </isEqual>
	   	     <isEqual property="s_chk_block" compareValue="N">
	   	    	<isEqual property="biz_clss_cd" compareValue="M">
	   	    		SET BL_STS_CD = 'MC'
	   	    	</isEqual>
	   	    	<isEqual property="biz_clss_cd" compareValue="H">
	   	    		SET BL_STS_CD = 'HC'
	   	   		</isEqual>
	   	 	</isEqual>
	    	 ,MODI_TMS	=   GETUTCDATE()

		WHERE INTG_BL_SEQ IN (
				SELECT TB1.INTG_BL_SEQ														

				FROM TB_INTG_BL TB1 ,TB_INTG_BL_BLCK TB2 

				WHERE 1=1
					AND TB1.DELT_FLG = 'N'
					AND TB1.INTG_BL_SEQ = TB2.INTG_BL_SEQ
					
				<isEqual property="s_chk_block" compareValue="Y">
    	   		 	AND TB1.POST_DT <![CDATA[ <= ]]>  #s_block_dt#	
    	   			AND TB2.BL_STS_CD != 'HF'
	    	    </isEqual>
	    	    
	    	    <isEqual property="s_chk_block" compareValue="N">
		    	   		AND TB1.POST_DT > #s_block_dt#
		    	   		AND TB2.BL_STS_CD = 'HF'
	    	   		<isEqual property="biz_clss_cd" compareValue="M">
    	    			AND TB1.BIZ_CLSS_CD = 'M'
	    	    	</isEqual>
	    	    	<isEqual property="biz_clss_cd" compareValue="H">
	    	    		AND TB1.BIZ_CLSS_CD = 'H'
	    	    	</isEqual>
	    	    </isEqual>
			)
    </update>
    
    <!-- ######### END TB_INTG_BL_BLCK #########  -->
    
    <!-- ######### START TB_OTH_SALES_BLCK #########  -->
    
    <update id="updateOthBl_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/* updateOthBl_Block_Batch_Blck */
    	
    	 UPDATE TB_OTH_SALES_BLCK
    	     	    
			<isEqual property="s_chk_block" compareValue="Y">
    	   		SET STS_CD = 'B'
    	    </isEqual>
    	    <isEqual property="s_chk_block" compareValue="N">
    	   		SET STS_CD = 'O'
    	    </isEqual>
    	    ,MODI_TMS		=   GETUTCDATE()
    	    
		WHERE OTH_SEQ IN (
							SELECT TB1.OTH_SEQ														

							FROM TB_OTH_SALES TB1 ,TB_OTH_SALES_BLCK TB2 

							WHERE 1=1
								AND TB1.DELT_FLG = 'N'
								AND TB1.OTH_SEQ = TB2.OTH_SEQ
								
								<isEqual property="s_chk_block" compareValue="Y">
								AND TB1.POST_DT <![CDATA[<=]]> #s_block_dt#													
								AND TB2.STS_CD != 'B'
								</isEqual>
								
								<isEqual property="s_chk_block" compareValue="N">
								AND TB1.POST_DT <![CDATA[>]]> #s_block_dt#													
								AND TB2.STS_CD = 'B'
								</isEqual>
								
						)			
    </update>
    
    <insert id="insertOthBl_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	INSERT INTO	TB_OTH_SALES_BLCK(
			OTH_SEQ, STS_CD, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, MODI_USRID,
			MODI_OFC_CD, MODI_TMS

		) SELECT TB1.OTH_SEQ, 'B' AS STS_CD, TB1.RGST_USRID,
				TB1.RGST_OFC_CD, TB1.RGST_TMS, TB1.MODI_USRID,
				TB1.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS

			FROM TB_OTH_SALES TB1 LEFT OUTER JOIN TB_OTH_SALES_BLCK TB2 ON TB1.OTH_SEQ = TB2.OTH_SEQ

			WHERE TB1.POST_DT <![CDATA[<=]]> #s_block_dt#
					AND TB1.STS_CD != 'B'
					AND TB1.DELT_FLG = 'N'
					AND TB1.OTH_SEQ NOT IN (SELECT OTH_SEQ FROM TB_OTH_SALES_BLCK)
    </insert>
    <!-- ######### END TB_OTH_SALES_BLCK #########  -->
    
    
    <!-- ######### START TB_FRT_BLCK #########  -->
    
    <update id="updateFrt_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateFrt_Block_Batch_Blck ============== */
    	 UPDATE TB_FRT_BLCK
    	    
		<isEqual property="s_chk_block" compareValue="Y">
    	   	SET CFM_FLG = 'Y'	
    	</isEqual>
    	<isEqual property="s_chk_block" compareValue="N">
    	   	SET CFM_FLG = 'N'	
    	</isEqual>    
			,MODI_TMS		=   GETUTCDATE()

		WHERE FRT_SEQ IN (
				SELECT TB1.FRT_SEQ														

				FROM TB_FRT TB1 ,TB_FRT_BLCK TB2 

				WHERE 1=1
					AND ISNULL(TB1.DELT_FLG,'N') = 'N'
					AND TB1.FRT_SEQ = TB2.FRT_SEQ
					
					<isEqual property="s_chk_block" compareValue="Y">
				   		AND TB1.INV_POST_DT <![CDATA[<=]]>  #s_block_dt#	
		    	   		AND ISNULL(TB2.CFM_FLG,'N') = 'N'
		    	   </isEqual>
		    	   <isEqual property="s_chk_block" compareValue="N">
		    	   		AND TB1.INV_POST_DT >  #s_block_dt#	
		    	   		AND ISNULL(TB2.CFM_FLG,'N') = 'Y'
		    	   </isEqual>
			)

    </update>
    
    <insert id="insertFrt_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	INSERT INTO	TB_FRT_BLCK(
			FRT_SEQ, CFM_FLG, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, MODI_USRID,
			MODI_OFC_CD, MODI_TMS

			)	SELECT TB1.FRT_SEQ, 'Y' AS CFM_FLG,
					TB1.RGST_USRID, TB1.RGST_OFC_CD,
					TB1.RGST_TMS,	 TB1.MODI_USRID,
					TB1.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS
	
				FROM TB_FRT TB1 LEFT JOIN TB_FRT_BLCK TB2 ON TB1.FRT_SEQ = TB2.FRT_SEQ

				WHERE TB1.INV_POST_DT <![CDATA[<=]]> #s_block_dt#
						AND ISNULL(TB1.CFM_FLG,'N') = 'N'
						AND TB1.DELT_FLG = 'N'
						AND ISNULL(TB1.INV_SEQ,'') != ''
						AND TB1.FRT_SEQ NOT IN (SELECT FRT_SEQ FROM TB_FRT_BLCK)
				
    </insert>
    <!-- ######### END TB_FRT_BLCK #########  -->
    
     <!-- ######### START TB_INV_BLCK #########  -->
    
    <update id="updateInv_Mst_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_Mst_Block_Batch ============== */
			
		UPDATE TB_INV_BLCK
    		
		<isEqual property="s_chk_block" compareValue="Y">
   	   		 SET CLT_CMPL_FLG = 'Y'	
   	    </isEqual>
   	    <isEqual property="s_chk_block" compareValue="N">
   	   		 SET CLT_CMPL_FLG = 'N'	
   	    </isEqual>
	
		,MODI_TMS		=   GETUTCDATE()

 		WHERE INV_SEQ IN (
				SELECT RESULT.INV_SEQ
						
					FROM (
							SELECT  I.INV_SEQ
											
							FROM TB_INV I ,TB_INV_DTL ID

							WHERE 1=1
								AND I.INV_SEQ = ID.INV_SEQ
								AND ISNULL(I.DELT_FLG,'N') != 'Y'
								AND ISNULL(ID.DELT_FLG,'N') != 'Y'
								
								<isEqual property="s_chk_block" compareValue="Y">
				    	   		AND ID.INV_POST_DT <![CDATA[<=]]> #s_block_dt#	
					    	   </isEqual>
					    	   
								<isEqual property="s_chk_block" compareValue="N">
				    	   		AND ID.INV_POST_DT > #s_block_dt#
				    	  		</isEqual>
										
							) RESULT INNER JOIN TB_INV_BLCK TB2 ON RESULT.INV_SEQ = TB2.INV_SEQ
					WHERE 1=1
					<isEqual property="s_chk_block" compareValue="Y">
					AND TB2.CLT_CMPL_FLG = 'N'
					</isEqual>
					<isEqual property="s_chk_block" compareValue="N">
					AND TB2.CLT_CMPL_FLG = 'Y'
					</isEqual>
			)
    </update>
    
    <insert id="insertInv_Mst_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/*insertInv_Mst_Block_Batch_Blck*/
    	INSERT INTO	TB_INV_BLCK(
			INV_SEQ, CLT_CMPL_FLG, RGST_USRID,
			RGST_OFC_CD,  RGST_TMS, MODI_USRID,
			MODI_OFC_CD,  MODI_TMS

		)	SELECT  I.INV_SEQ, 'Y'  AS CLT_CMPL_FLG, I.RGST_USRID, 
					I.RGST_OFC_CD, I.RGST_TMS,	 I.MODI_USRID,
					I.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS

			FROM TB_INV I ,TB_INV_DTL ID
	
			WHERE 1=1
				AND I.INV_SEQ = ID.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(ID.DELT_FLG,'N') != 'Y'
	
				AND ID.INV_POST_DT <![CDATA[<=]]> #s_block_dt#
				AND ISNULL(ID.CLT_CMPL_FLG,'N') != 'Y'
				AND I.INV_SEQ NOT IN ( SELECT INV_SEQ FROM TB_INV_BLCK)

    </insert> 
    
    <!-- ######### END TB_INV_BLCK #########  --> 
    
    
     <!-- ######### START TB_INV_DTL_BLCK #########  -->
    
    <update id="updateInv_Dtl_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/* updateInv_Dtl_Block_Batch_Blck */
							
		UPDATE TB_INV_DTL_BLCK
    		
		<isEqual property="s_chk_block" compareValue="Y">
   	   		 SET CLT_CMPL_FLG = 'Y', BLOCK_DT = #s_block_dt#
   	    </isEqual>
   	    <isEqual property="s_chk_block" compareValue="N">
   	   		SET CLT_CMPL_FLG = 'N', BLOCK_DT = null
   	    </isEqual>
	
		,MODI_TMS		=   GETUTCDATE()

 		WHERE INV_SEQ IN (
			SELECT RESULT.INV_SEQ
					
				FROM (
						SELECT  I.INV_SEQ
										
						FROM TB_INV I ,TB_INV_DTL ID

						WHERE 1=1
							AND I.INV_SEQ = ID.INV_SEQ
							AND ISNULL(I.DELT_FLG,'N') != 'Y'
							AND ISNULL(ID.DELT_FLG,'N') != 'Y'
							
							<isEqual property="s_chk_block" compareValue="Y">
			    	   		AND ID.INV_POST_DT <![CDATA[<=]]> #s_block_dt#	
				    	   </isEqual>
				    	   
							<isEqual property="s_chk_block" compareValue="N">
			    	   		AND ID.INV_POST_DT > #s_block_dt#
			    	  		</isEqual>
									
						) RESULT INNER JOIN TB_INV_DTL_BLCK TB2 ON RESULT.INV_SEQ = TB2.INV_SEQ
				WHERE 1=1
				<isEqual property="s_chk_block" compareValue="Y">
				AND TB2.CLT_CMPL_FLG = 'N'
				</isEqual>
				<isEqual property="s_chk_block" compareValue="N">
				AND TB2.CLT_CMPL_FLG = 'Y'
				</isEqual>
		)
    	  	
    </update>
    
    <insert id="insertInv_Dtl_Block_Batch_Blck" parameterClass="java.util.HashMap">
    /* GETUTCDATE() */
    INSERT INTO	TB_INV_DTL_BLCK(
		INV_NO, INV_SEQ, CLT_CMPL_FLG,
		BLOCK_DT, RGST_USRID, RGST_OFC_CD,
		RGST_TMS, MODI_USRID, MODI_OFC_CD,
		MODI_TMS

	)	SELECT  ID.INV_NO, ID.INV_SEQ, 'Y' AS CLT_CMPL_FLG,
				#s_block_dt#, ID.RGST_USRID, ID.RGST_OFC_CD,
				ID.RGST_TMS, ID.MODI_USRID, ID.MODI_OFC_CD,
				GETUTCDATE() AS MODI_TMS

		FROM TB_INV I ,TB_INV_DTL ID
		
		WHERE 1=1
				AND I.INV_SEQ = ID.INV_SEQ
				AND ISNULL(I.DELT_FLG,'N') != 'Y'
				AND ISNULL(ID.DELT_FLG,'N') != 'Y'
		
				AND ID.INV_POST_DT <![CDATA[<=]]> #s_block_dt#
				AND ISNULL(ID.CLT_CMPL_FLG,'N') = 'N'
				AND I.INV_SEQ NOT IN (SELECT INV_SEQ FROM TB_INV_DTL_BLCK)
		 	
    </insert> 
    
    <!-- ######### END TB_INV_DTL_BLCK #########  --> 
    
    <!-- ######### START TB_JNR_MST_BLCK #########  -->
    
    <update id="updateJnr_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/* updateJnr_Block_Batch_Blck */
    	
		UPDATE TB_JNR_MST_BLCK
		 <isEqual property="s_chk_block" compareValue="Y">
    	   	SET CLT_CMPL_FLG = 'Y', BLOCK_DT = #s_block_dt#	
    	 </isEqual>
    	 <isEqual property="s_chk_block" compareValue="N">
    	   	SET CLT_CMPL_FLG = 'N', BLOCK_DT = NULL
    	 </isEqual>
			,MODI_TMS		=   GETUTCDATE()

		WHERE JNR_NO IN (
				SELECT TB1.JNR_NO														

				FROM TB_JNR_MST TB1 ,TB_JNR_MST_BLCK TB2 

				WHERE 1=1
						AND TB1.DELT_FLG = 'N'
						AND TB1.JNR_NO = TB2.JNR_NO
						
						<isEqual property="s_chk_block" compareValue="Y">
		    	   		AND TB1.POST_DT <![CDATA[<=]]> #s_block_dt#
		    	   		AND ISNULL(TB2.CLT_CMPL_FLG,'N') = 'N'
			    	   	</isEqual>
			    	   	<isEqual property="s_chk_block" compareValue="N">
			    	   	AND TB1.POST_DT > #s_block_dt#
			    	   	AND ISNULL(TB2.CLT_CMPL_FLG,'N') = 'Y'
			    	   	</isEqual>
			)
    	 	
    </update>
    
    <insert id="insertJnr_Block_Batch_Blck" parameterClass="java.util.HashMap">
    /*insertJnr_Block_Batch_Blck*/
    	INSERT INTO	TB_JNR_MST_BLCK(
			JNR_NO, P_OFC_CD, CLT_CMPL_FLG,
			BLOCK_DT, RGST_USRID, RGST_OFC_CD,
			RGST_TMS, MODI_USRID, MODI_OFC_CD,
			MODI_TMS

		)	SELECT TB1.JNR_NO, TB1.P_OFC_CD, 'Y' AS CLT_CMPL_FLG,
					#s_block_dt#, TB1.RGST_USRID, TB1.RGST_OFC_CD,
					TB1.RGST_TMS, TB1.MODI_USRID, TB1.MODI_OFC_CD,
					GETUTCDATE() AS MODI_TMS

			FROM TB_JNR_MST TB1 

			WHERE TB1.POST_DT <![CDATA[<=]]> #s_block_dt#
					AND ISNULL(TB1.CLT_CMPL_FLG,'N') = 'N'
					AND TB1.DELT_FLG = 'N'
					AND TB1.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK)
    </insert> 
    
    <!-- ######### END TB_JNR_MST_BLCK #########  --> 
    
    <!-- ######### START TB_SLIP_MST_BLCK #########  -->
    
    <update id="updateSlip_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/* updateSlip_Block_Batch_Blck */
    	
		UPDATE TB_SLIP_MST_BLCK
    	    
		<isEqual property="s_chk_block" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'Y', BLOCK_DT = #s_block_dt#	
    	</isEqual>
    	<isEqual property="s_chk_block" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'N', BLOCK_DT = null
    	</isEqual> 	    
		,MODI_TMS		=   GETUTCDATE()

		WHERE SLIP_NO IN (
				SELECT TB1.SLIP_NO														

				FROM TB_SLIP_MST TB1 ,TB_SLIP_MST_BLCK TB2 

				WHERE 1=1
					AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
					AND TB1.SLIP_NO = TB2.SLIP_NO
						
					<isEqual property="s_chk_block" compareValue="Y">
	    	   		AND TB1.POST_DT <![CDATA[<=]]> #s_block_dt#	
	    	   		AND ISNULL(TB2.CLT_CMPL_FLG,'N') != 'Y'
	    	   		</isEqual>
	    	   		<isEqual property="s_chk_block" compareValue="N">
	    	   		AND TB1.POST_DT > #s_block_dt#
	    	   		AND ISNULL(TB2.CLT_CMPL_FLG,'N') = 'Y'
	    	   		</isEqual>
			)
    </update>
    
    <insert id="insertSlip_Block_Batch_Blck" parameterClass="java.util.HashMap">
    	/*insertSlip_Block_Batch_Blck*/
    	INSERT INTO	TB_SLIP_MST_BLCK(
			SLIP_NO, P_OFC_CD, CLT_CMPL_FLG, BLOCK_DT,
			RGST_USRID, RGST_OFC_CD, RGST_TMS,
			MODI_USRID, MODI_OFC_CD, MODI_TMS

		)SELECT  TB1.SLIP_NO, TB1.P_OFC_CD, 'Y' AS CLT_CMPL_FLG, #s_block_dt#,
				TB1.RGST_USRID, TB1.RGST_OFC_CD, TB1.RGST_TMS,							
				TB1.MODI_USRID, TB1.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS

		FROM TB_SLIP_MST TB1 

		WHERE TB1.POST_DT <![CDATA[<=]]> #s_block_dt#
				AND ISNULL(TB1.CLT_CMPL_FLG,'N') = 'N'
				AND TB1.DELT_FLG = 'N'
				AND TB1.SLIP_NO NOT IN (SELECT SLIP_NO FROM TB_SLIP_MST_BLCK)
    </insert>
    
    <!-- Invoice Detail Unblock Batch 일 경우만 적용,  이전 BLOCK_DT UPDATE   -->
    <update id="updateInv_Dtl_UnBlockDt_Batch_Blck" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_Dtl_UnBlockDt_Batch ============== */
    	UPDATE  TB_INV_DTL_BLCK 
    	   SET  BLOCK_DT 	=   #s_block_dt#
   	    	   ,MODI_TMS	=   GETUTCDATE()
		 WHERE 1=1
		   AND ISNULL(BLOCK_DT, '') != ''
	  <![CDATA[  AND BLOCK_DT > #s_block_dt#		]]>
    </update> 
    
	<!-- Journal Unblock Batch 일 경우만 적용,  이전 BLOCK_DT UPDATE   -->
    <update id="updateJnr_UnBlockDt_Batch_Blck" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateJnr_UnBlockDt_Batch ============== */
    	UPDATE TB_JNR_MST_BLCK 
    	   SET BLOCK_DT  	=   #s_block_dt#
	   	      ,MODI_TMS		=   GETUTCDATE()
		 WHERE 1=1
		   AND ISNULL(BLOCK_DT, '') != ''
<![CDATA[  AND BLOCK_DT > #s_block_dt#		]]>
    </update>  
    
    <!-- Slip Unblock Batch 일 경우만 적용,  이전 BLOCK_DT UPDATE  -->
    <update id="updateSlip_UnBlockDt_Batch_Blck" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateSlip_UnBlockDt_Batch ============== */
    	UPDATE TB_SLIP_MST_BLCK 
    	   SET BLOCK_DT 	=   #s_block_dt#
   	    	  ,MODI_TMS		=   GETUTCDATE()
		 WHERE 1=1
		   AND ISNULL(BLOCK_DT, '') != ''
<![CDATA[  AND BLOCK_DT > #s_block_dt#		]]>	
    </update> 
    
    <!-- ######### END TB_SLIP_MST_BLCK #########  --> 
    
    
    
    <!-- Vinh.Vo 2015/01/26 (E)  -->
    
    
    <!-- BL Block/Unblock Batch 처리를 한다.  BL_STS_CD UPDATE   -->
    <update id="updateBl_Block_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateBl_Block_Batch ============== */
    	 UPDATE TB_INTG_BL
    	    <isEqual property="s_chk_block" compareValue="Y">
    	   		SET BL_STS_CD = 'HF'
    	    </isEqual>
    	    <isEqual property="s_chk_block" compareValue="N">
    	    	<isEqual property="biz_clss_cd" compareValue="M">
    	    		SET BL_STS_CD = 'MC'
    	    	</isEqual>
    	    	<isEqual property="biz_clss_cd" compareValue="H">
    	    		SET BL_STS_CD = 'HC'
    	    	</isEqual>
    	    </isEqual>
    	    ,MODI_TMS		=   GETDATE()
    	  WHERE INTG_BL_SEQ IN (
    							SELECT B.INTG_BL_SEQ
								FROM TB_INTG_BL B
								WHERE 1=1   
								<isEqual property="s_chk_block" compareValue="Y">
					    	   		<![CDATA[ 	AND B.POST_DT <=  #s_block_dt#	]]>
					    	   		AND BL_STS_CD != 'HF'
					    	    </isEqual>
					    	    <isEqual property="s_chk_block" compareValue="N">
					    	   		<![CDATA[	AND B.POST_DT > #s_block_dt#		]]>
					    	   		AND BL_STS_CD = 'HF'
					    	   		<isEqual property="biz_clss_cd" compareValue="M">
				    	    			AND B.BIZ_CLSS_CD = 'M'
					    	    	</isEqual>
					    	    	<isEqual property="biz_clss_cd" compareValue="H">
					    	    		AND B.BIZ_CLSS_CD = 'H'
					    	    	</isEqual>
					    	    </isEqual>
								  AND B.DELT_FLG = 'N'
    							)
    </update> 
    
    <!-- Other BL Block/Unblock Batch 처리를 한다.  BL_STS_CD UPDATE   -->
    <update id="updateOthBl_Block_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateOthBl_Block_Batch ============== */
    	 UPDATE TB_OTH_SALES
    	    <isEqual property="s_chk_block" compareValue="Y">
    	   		SET STS_CD = 'B'
    	    </isEqual>
    	    <isEqual property="s_chk_block" compareValue="N">
    	   		SET STS_CD = 'O'
    	    </isEqual>
    	    ,MODI_TMS		=   GETUTCDATE()
    	  WHERE OTH_SEQ IN (
    							SELECT B.OTH_SEQ
								FROM TB_OTH_SALES B
								WHERE 1=1   
								<isEqual property="s_chk_block" compareValue="Y">
					    	   		<![CDATA[ 	AND B.POST_DT <=  #s_block_dt#	]]>
					    	   		AND STS_CD != 'B'
					    	    </isEqual>
					    	    <isEqual property="s_chk_block" compareValue="N">
					    	   		<![CDATA[	AND B.POST_DT > #s_block_dt#		]]>
					    	   		AND STS_CD = 'B'
					    	    </isEqual>
								  AND B.DELT_FLG = 'N'
    							)
    </update> 
    
    <!-- FREIGHT Block/Unblock Batch 처리를 한다. CFM_FLG UPDATE   -->
    <update id="updateFrt_Block_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateFrt_Block_Batch ============== */
    	UPDATE TB_FRT
    		<isEqual property="s_chk_block" compareValue="Y">
    	   		SET CFM_FLG = 'Y'	
    	    </isEqual>
    	    <isEqual property="s_chk_block" compareValue="N">
    	   		SET CFM_FLG = 'N'	
    	    </isEqual>
   	    	,MODI_TMS		=  GETUTCDATE()
    	 WHERE INV_SEQ IN (
							SELECT 
								F.INV_SEQ	AS inv_seq
							  FROM
								TB_FRT F
							 WHERE 1=1
							   <isEqual property="s_chk_block" compareValue="Y">
							   		<![CDATA[ 	AND F.INV_POST_DT <=  #s_block_dt#	]]>
					    	   		AND ISNULL(F.CFM_FLG,'N') != 'Y'
					    	   </isEqual>
					    	   <isEqual property="s_chk_block" compareValue="N">
					    	   		<![CDATA[	AND F.INV_POST_DT > #s_block_dt#		]]>
					    	   		AND ISNULL(F.CFM_FLG,'N') = 'Y'
					    	   </isEqual>
								AND ISNULL(F.DELT_FLG,'N') != 'Y'
							)
    </update>
        
    <!-- Invoice Master Block/Unblock Batch 처리를 한다. CLT_CMPL_FLG, BLOCK_DT UPDATE   -->
    <update id="updateInv_Mst_Block_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_Mst_Block_Batch ============== */
    	UPDATE TB_INV
    		<isEqual property="s_chk_block" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'Y'	
    	    </isEqual>
    	    <isEqual property="s_chk_block" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'N'	
    	    </isEqual>
   	    	,MODI_TMS		=   GETUTCDATE()
    	 WHERE INV_SEQ IN (
							SELECT 
								I.INV_SEQ	AS inv_seq
							  FROM
								TB_INV I,
								TB_INV_DTL ID
							 WHERE 1=1
							   <isEqual property="s_chk_block" compareValue="Y">
					    	   		<![CDATA[ 	AND ID.INV_POST_DT <= #s_block_dt#	]]>
					    	   		AND ISNULL(ID.CLT_CMPL_FLG,'N') != 'Y'
					    	   </isEqual>
					    	   <isEqual property="s_chk_block" compareValue="N">
					    	   		<![CDATA[	AND ID.INV_POST_DT > #s_block_dt#		]]>
					    	   		AND ISNULL(ID.CLT_CMPL_FLG,'N') = 'Y'
					    	   </isEqual>
								AND I.INV_SEQ = ID.INV_SEQ
								AND ISNULL(I.DELT_FLG,'N') != 'Y'
								AND ISNULL(ID.DELT_FLG,'N') != 'Y'
							)
    </update>    
    
    <!-- Invoice Detail Block/Unblock Batch 처리를 한다.  CLT_CMPL_FLG, BLOCK_DT UPDATE   -->
    <update id="updateInv_Dtl_Block_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_Dtl_Block_Batch ============== */
    	UPDATE TB_INV_DTL
    		<isEqual property="s_chk_block" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'Y', BLOCK_DT = #s_block_dt#	
    	    </isEqual>
    	    <isEqual property="s_chk_block" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'N', BLOCK_DT = null
    	    </isEqual>
   	    	,MODI_TMS		=   GETUTCDATE()
    	 WHERE INV_SEQ IN (
							SELECT 
								I.INV_SEQ	AS inv_seq
							  FROM
								TB_INV I,
								TB_INV_DTL ID
							 WHERE 1=1
							   <isEqual property="s_chk_block" compareValue="Y">
					    	   		<![CDATA[ 	AND ID.INV_POST_DT <= #s_block_dt#	]]>
					    	   		AND ISNULL(ID.CLT_CMPL_FLG,'N') != 'Y'
					    	   </isEqual>
					    	   <isEqual property="s_chk_block" compareValue="N">
					    	   		<![CDATA[	AND ID.INV_POST_DT > #s_block_dt#		]]>
					    	   		AND ISNULL(ID.CLT_CMPL_FLG,'N') = 'Y'
					    	   </isEqual>
								AND I.INV_SEQ = ID.INV_SEQ
								AND ISNULL(I.DELT_FLG,'N') != 'Y'
								AND ISNULL(ID.DELT_FLG,'N') != 'Y'
							)
    </update>  
    
    <!-- Journal Block/Unblock Batch 처리를 한다.  CLT_CMPL_FLG, BLOCK_DT UPDATE   -->
    <update id="updateJnr_Block_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateJnr_Block_Batch ============== */
    	UPDATE TB_JNR_MST
    		<isEqual property="s_chk_block" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'Y', BLOCK_DT = #s_block_dt#	
    	    </isEqual>
    	    <isEqual property="s_chk_block" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'N', BLOCK_DT = null
    	    </isEqual>
   	    	,MODI_TMS		=   GETUTCDATE()
    	 WHERE JNR_NO IN (
							SELECT 
								J.JNR_NO	AS JNR_NO
							  FROM
								TB_JNR_MST J
							 WHERE 1=1
							   <isEqual property="s_chk_block" compareValue="Y">
					    	   		<![CDATA[ 	AND J.POST_DT <= #s_block_dt#	]]>
					    	   		AND ISNULL(J.CLT_CMPL_FLG,'N') != 'Y'
					    	   </isEqual>
					    	   <isEqual property="s_chk_block" compareValue="N">
					    	   		<![CDATA[	AND J.POST_DT > #s_block_dt#		]]>
					    	   		AND ISNULL(J.CLT_CMPL_FLG,'N') = 'Y'
					    	   </isEqual>
								AND ISNULL(J.DELT_FLG,'N') != 'Y'
							)
    </update>  
    
    <!-- Slip Block/Unblock Batch 처리를 한다.  CLT_CMPL_FLG, BLOCK_DT UPDATE   -->
    <update id="updateSlip_Block_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateSlip_Block_Batch ============== */
    	UPDATE TB_SLIP_MST
    		<isEqual property="s_chk_block" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'Y', BLOCK_DT = #s_block_dt#	
    	    </isEqual>
    	    <isEqual property="s_chk_block" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'N', BLOCK_DT = null
    	    </isEqual>
   	    	,MODI_TMS		=   GETUTCDATE()
    	 WHERE SLIP_NO IN (
							SELECT 
								S.SLIP_NO	AS SLIP_NO
							  FROM
								TB_SLIP_MST S
							 WHERE 1=1
							   <isEqual property="s_chk_block" compareValue="Y">
					    	   		<![CDATA[ 	AND S.POST_DT <= #s_block_dt#	]]>
					    	   		AND ISNULL(S.CLT_CMPL_FLG,'N') != 'Y'
					    	   </isEqual>
					    	   <isEqual property="s_chk_block" compareValue="N">
					    	   		<![CDATA[	AND S.POST_DT > #s_block_dt#		]]>
					    	   		AND ISNULL(S.CLT_CMPL_FLG,'N') = 'Y'
					    	   </isEqual>
								AND ISNULL(S.DELT_FLG,'N') != 'Y'
							)
    </update>  
    
    <!-- Invoice Detail Unblock Batch 일 경우만 적용,  이전 BLOCK_DT UPDATE   -->
    <update id="updateInv_Dtl_UnBlockDt_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_Dtl_UnBlockDt_Batch ============== */
    	UPDATE  TB_INV_DTL 
    	   SET  BLOCK_DT 	=   #s_block_dt#
   	    	   ,MODI_TMS	=   GETUTCDATE()
    	 WHERE INV_SEQ IN (
							SELECT 
								I.INV_SEQ	AS inv_seq
							  FROM
								TB_INV I,
								TB_INV_DTL ID
							 WHERE 1=1
							   AND ISNULL(ID.BLOCK_DT, '') != ''
				    <![CDATA[  AND ID.BLOCK_DT > #s_block_dt#		]]>
							   AND I.INV_SEQ = ID.INV_SEQ
							   AND ISNULL(I.DELT_FLG,'N') != 'Y'
							   AND ISNULL(ID.DELT_FLG,'N') != 'Y'
							)
    </update> 
    
<!-- Journal Unblock Batch 일 경우만 적용,  이전 BLOCK_DT UPDATE   -->
    <update id="updateJnr_UnBlockDt_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateJnr_UnBlockDt_Batch ============== */
    	UPDATE TB_JNR_MST 
    	   SET BLOCK_DT  	=   #s_block_dt#
	   	      ,MODI_TMS		=   GETUTCDATE()
    	 WHERE JNR_NO IN (
							SELECT 
								J.JNR_NO	AS JNR_NO
							  FROM
								TB_JNR_MST J
							 WHERE 1=1
							   AND ISNULL(J.BLOCK_DT, '') != ''
					<![CDATA[  AND J.BLOCK_DT > #s_block_dt#		]]>
							   AND ISNULL(J.DELT_FLG,'N') != 'Y'
							)
    </update>  
    
    <!-- Slip Unblock Batch 일 경우만 적용,  이전 BLOCK_DT UPDATE  -->
    <update id="updateSlip_UnBlockDt_Batch" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateSlip_UnBlockDt_Batch ============== */
    	UPDATE TB_SLIP_MST 
    	   SET BLOCK_DT 	=   #s_block_dt#
   	    	  ,MODI_TMS		=   GETUTCDATE()
    	 WHERE SLIP_NO IN (
							SELECT 
								S.SLIP_NO	AS SLIP_NO
							  FROM
								TB_SLIP_MST S
							 WHERE 1=1
							   AND ISNULL(S.BLOCK_DT, '') != ''
					<![CDATA[  AND S.BLOCK_DT > #s_block_dt#		]]>					    	   
							   AND ISNULL(S.DELT_FLG,'N') != 'Y'
							)
    </update>  
    
    <!-- Block/Unblock BL List 조회   -->
    <select id="searchBlBlockList" parameterClass="java.util.HashMap" resultClass="BlockListVO">
    	/* ============== AccSlpSlipSQL.XML : searchBlBlockList ============== */
    	 SELECT BL.BL_INTG_BL_SEQ,
		       BL.BL_OTH_SEQ,          
		       BL.BL_BLK_FLG,          
		       BL.BL_DEPT_CD,          
		       BL.BL_REF_OFC_CD,       
		       BL.BL_POST_DT,          
		       BL.BL_REF_NO,           
		       BL.BL_BL_NO,            
		       BL.BL_SHPR_TRDP_NM,     
		       BL.BL_CNEE_TRDP_NM,     
		       BL.BL_AGENT_TRDP_NM,    
		       BL.BL_POL_NM,           
		       BL.BL_POD_NM,           
		       BL.BL_VSL_FLT,
		       BL.BL_JN_FLG,
		       BL.BL_EY_FLG   
		  FROM ( 
		<isNotEqual property="s_bl_flg" compareValue=""> 
		SELECT BL.INTG_BL_SEQ 			 AS		BL_INTG_BL_SEQ,
		       BL.OTH_SEQ                AS 	BL_OTH_SEQ,          
		       BL.BLK_FLG                AS 	BL_BLK_FLG,          
		       BL.DEPT_CD                AS 	BL_DEPT_CD,          
		       BL.REF_OFC_CD             AS 	BL_REF_OFC_CD,       
		       BL.POST_DT                AS 	BL_POST_DT,          
		       BL.REF_NO                 AS 	BL_REF_NO,           
		       BL.BL_NO                  AS 	BL_BL_NO,            
		       BL.SHPR_TRDP_NM           AS 	BL_SHPR_TRDP_NM,     
		       BL.CNEE_TRDP_NM           AS 	BL_CNEE_TRDP_NM,     
		       BL.AGENT_TRDP_NM          AS 	BL_AGENT_TRDP_NM,    
		       BL.POL_NM                 AS 	BL_POL_NM,           
		       BL.POD_NM                 AS 	BL_POD_NM,           
		       BL.VSL_FLT                AS 	BL_VSL_FLT,
		       MAX(CASE WHEN ISNULL(DTL.JNR_YN, '') = 'Y' THEN 1 ELSE 0 END) AS BL_JN_FLG,
		       MAX(CASE WHEN ISNULL(DTL.CLS_YN, '') = 'Y' THEN 1 ELSE 0 END) AS BL_EY_FLG       
		  FROM (    
		    SELECT
		            BL.INTG_BL_SEQ,
		            '' AS OTH_SEQ,
		            (CASE WHEN BL.BL_STS_CD = 'HF' THEN '1' ELSE '0' END) AS BLK_FLG,
		            BL.AIR_SEA_CLSS_CD + BND.BND_CLSS_CD + BL.BIZ_CLSS_CD AS DEPT_CD,
		            BL.REF_OFC_CD,
		            BL.POST_DT,
		            BL.REF_NO,
		            BL.BL_NO,    
		            SHPR.TRDP_NM AS SHPR_TRDP_NM,
		            CNEE.TRDP_NM AS CNEE_TRDP_NM,
		            (CASE WHEN BND.BND_CLSS_CD = 'O' THEN CNEE.TRDP_NM ELSE SHPR.TRDP_NM END) AS AGENT_TRDP_NM,
		            BL.POL_NM,
		            BL.POD_NM,  
		            (CASE WHEN BL.AIR_SEA_CLSS_CD = 'S' THEN BL.TRNK_VSL_NM ELSE BL.FLT_NO END) AS VSL_FLT  
		        FROM
		          ( SELECT *
						FROM (SELECT INTG_BL_SEQ
									,AIR_SEA_CLSS_CD
									,BIZ_CLSS_CD
									,REF_OFC_CD
									,POST_DT
									,REF_NO
									,BL_NO
									,POL_NM
									,POD_NM
									,TRNK_VSL_NM
									,FLT_NO
									,DELT_FLG
									FROM TB_INTG_BL ) TIB 
				LEFT OUTER JOIN(SELECT INTG_BL_SEQ AS INTG_BL_SEQ1, BL_STS_CD FROM TB_INTG_BL_BLCK) TIBB 
				ON TIB.INTG_BL_SEQ = TIBB.INTG_BL_SEQ1) BL       

		        JOIN
		            TB_ADD_INFO_BND BND      
		                ON  BL.INTG_BL_SEQ = BND.INTG_BL_SEQ 
		                AND BND.DELT_FLG = 'N'                
		        LEFT OUTER JOIN
		            TB_BL_PRNR SHPR      
		                ON  BL.INTG_BL_SEQ = SHPR.INTG_BL_SEQ  
		                AND SHPR.BL_TRDP_TP_CD = 'S01' 
		                AND SHPR.DELT_FLG = 'N'     
		        LEFT OUTER JOIN
		            TB_BL_PRNR CNEE      
		                ON  BL.INTG_BL_SEQ = CNEE.INTG_BL_SEQ  
		                AND CNEE.BL_TRDP_TP_CD = 'C01' 
		                AND CNEE.DELT_FLG = 'N'
		        WHERE
		            BL.DELT_FLG = 'N'  
		            AND BL.BIZ_CLSS_CD = 'M'      
		            AND BL.AIR_SEA_CLSS_CD + BND.BND_CLSS_CD IN ($s_bl_flg$)          
		            AND BL.POST_DT BETWEEN #s_prd_strdt# AND #s_prd_enddt#
		            <isNotEmpty property="s_ofc_cd">                                           
		            AND BL.REF_OFC_CD = #s_ofc_cd#
		            </isNotEmpty>
		            <isEqual property="s_block_yn" compareValue="Y">
		            AND ISNULL(BL.BL_STS_CD, '') = 'HF'
		            </isEqual>
		            <isEqual property="s_block_yn" compareValue="N">
		            AND ISNULL(BL.BL_STS_CD, '') != 'HF'
		            </isEqual>
		            <isNotEmpty property="s_ref_no">                                           
		            AND BL.REF_NO like '%'+ #s_ref_no# + '%'
		            </isNotEmpty>
		            <isNotEmpty property="s_bl_no">                                           
		            AND BL.BL_NO like '%'+ #s_bl_no# +'%'
		            </isNotEmpty>
		       ) BL
		      LEFT OUTER JOIN TB_FRT FRT ON FRT.INTG_BL_SEQ = BL.INTG_BL_SEQ
		      LEFT OUTER JOIN TB_INV INV ON INV.INV_SEQ = FRT.INV_SEQ
		      LEFT OUTER JOIN TB_INV_DTL DTL ON DTL.INV_SEQ = INV.INV_SEQ
		 GROUP BY BL.INTG_BL_SEQ,
		          BL.OTH_SEQ,
		          BL.BLK_FLG,
		          BL.DEPT_CD,
		          BL.REF_OFC_CD,
		          BL.POST_DT,
		          BL.REF_NO,
		          BL.BL_NO,    
		          BL.SHPR_TRDP_NM,
		          BL.CNEE_TRDP_NM,
		          BL.AGENT_TRDP_NM,
		          BL.POL_NM,
		          BL.POD_NM,  
		          BL.VSL_FLT 
		 </isNotEqual>
		 
		 <isEqual property="s_bl_oth_flg" compareValue="Y">    
		        
        <isNotEqual property="s_bl_flg" compareValue="">
        UNION ALL
        </isNotEqual>
		        
		SELECT BL.INTG_BL_SEQ 			 AS		BL_INTG_BL_SEQ,
		       BL.OTH_SEQ                AS 	BL_OTH_SEQ,          
		       BL.BLK_FLG                AS 	BL_BLK_FLG,          
		       BL.DEPT_CD                AS 	BL_DEPT_CD,          
		       BL.REF_OFC_CD             AS 	BL_REF_OFC_CD,       
		       BL.POST_DT                AS 	BL_POST_DT,          
		       BL.REF_NO                 AS 	BL_REF_NO,           
		       BL.BL_NO                  AS 	BL_BL_NO,            
		       BL.SHPR_TRDP_NM           AS 	BL_SHPR_TRDP_NM,     
		       BL.CNEE_TRDP_NM           AS 	BL_CNEE_TRDP_NM,     
		       BL.AGENT_TRDP_NM          AS 	BL_AGENT_TRDP_NM,    
		       BL.POL_NM                 AS 	BL_POL_NM,           
		       BL.POD_NM                 AS 	BL_POD_NM,           
		       BL.VSL_FLT                AS 	BL_VSL_FLT,
		       MAX(CASE WHEN ISNULL(DTL.JNR_YN, '') = 'Y' THEN 1 ELSE 0 END) AS BL_JN_FLG,
		       MAX(CASE WHEN ISNULL(DTL.CLS_YN, '') = 'Y' THEN 1 ELSE 0 END) AS BL_EY_FLG       
		  FROM (    		    
		        SELECT
		            '' AS INTG_BL_SEQ,
		            OTH.OTH_SEQ,
		            (CASE WHEN OTH.STS_CD = 'B' THEN '1' ELSE '0' END) AS BLK_FLG,
		            'OTH' AS DEPT_CD, 
		            OTH.OFC_CD AS REF_OFC_CD,
		            OTH.POST_DT,
		            OTH.REF_NO,
		            OTH.MBL_NO AS BL_NO,     
		            OTH.SHPR_NM AS SHPR_TRDP_NM,
		            OTH.CNEE_NM AS CNEE_TRDP_NM,
		            '' AS AGENT_TRDP_NM,
		            OTH.POL_NM,
		            OTH.POD_NM,  
		            OTH.VSL_FLT                    
		        FROM
		            (SELECT *       
					FROM ( SELECT OTH_SEQ, OFC_CD, POST_DT, REF_NO, MBL_NO, SHPR_NM,CNEE_NM,POL_NM,POD_NM,VSL_FLT,DELT_FLG 
								FROM TB_OTH_SALES )TOS 
					LEFT OUTER JOIN (SELECT OTH_SEQ AS OTH_SEQ1, STS_CD FROM TB_OTH_SALES_BLCK) TOSB ON TOS.OTH_SEQ = TOSB.OTH_SEQ1) OTH       
		        WHERE
		            OTH.DELT_FLG = 'N'  
		            AND OTH.POST_DT BETWEEN #s_prd_strdt# AND #s_prd_enddt#
		            <isNotEmpty property="s_ofc_cd">                                             
		            AND OTH.OFC_CD = #s_ofc_cd#   
		            </isNotEmpty>
		            <isEqual property="s_block_yn" compareValue="Y">
		            AND ISNULL(OTH.STS_CD, '') = 'B' 
		            </isEqual>
		            <isEqual property="s_block_yn" compareValue="N">
		            AND ISNULL(OTH.STS_CD, '') != 'B'
		            </isEqual>
		            <isNotEmpty property="s_ref_no">                                           
		            AND OTH.REF_NO like '%'+ #s_ref_no# +'%'
		            </isNotEmpty>
		            <isNotEmpty property="s_bl_no">                                           
		            AND OTH.MBL_NO like '%'+ #s_bl_no# +'%'
		            </isNotEmpty>
		       ) BL
		      LEFT OUTER JOIN TB_FRT FRT ON FRT.OTH_SEQ = BL.OTH_SEQ
		      LEFT OUTER JOIN TB_INV INV ON INV.INV_SEQ = FRT.INV_SEQ
		      LEFT OUTER JOIN TB_INV_DTL DTL ON DTL.INV_SEQ = INV.INV_SEQ
		 GROUP BY BL.INTG_BL_SEQ,
		          BL.OTH_SEQ,
		          BL.BLK_FLG,
		          BL.DEPT_CD,
		          BL.REF_OFC_CD,
		          BL.POST_DT,
		          BL.REF_NO,
		          BL.BL_NO,    
		          BL.SHPR_TRDP_NM,
		          BL.CNEE_TRDP_NM,
		          BL.AGENT_TRDP_NM,
		          BL.POL_NM,
		          BL.POD_NM,  
		          BL.VSL_FLT 
		 </isEqual>         
			) BL
		ORDER BY BL.BL_POST_DT DESC 		      
    </select> 
    
   <!-- Block/Unblock Invoice List 조회   -->
    <select id="searchInvoiceBlockList" parameterClass="java.util.HashMap" resultClass="BlockListVO">
    	/* ============== AccSlpSlipSQL.XML : searchInvoiceBlockList ============== */
    	SELECT INV.INV_SEQ    				AS		    IN_INV_SEQ,	
		       INV.BLK_FLG    				AS		    IN_BLK_FLG,		
			   INV.INV_TP    				AS		    IN_INV_TP,
			   INV.OFC_CD    				AS		    IN_OFC_CD,
			   INV.INV_POST_DT    			AS		    IN_POST_DT,
			   INV.INV_NO    				AS		    IN_INV_NO,
			   INV.BILL_TO    				AS		    IN_BILL_TO,
			   INV.INV_APLY_CURR_CD 		AS 			IN_CURR_CD,
			   INV.INV_SUM_AMT 				AS 			IN_INV_AMT,
			   INV.REF_NO    				AS		    IN_REF_NO,
			   INV.MBL_NO    				AS		    IN_MBL_NO,
			   INV.HBL_NO    				AS		    IN_HBL_NO,				
			   INV.OTH_REF_NO 				AS		    IN_OTH_REF_NO,
			   MAX(CASE WHEN ISNULL(INV.JNR_YN, '') = 'Y' THEN 1 ELSE 0 END) AS IN_JN_FLG,
		       MAX(CASE WHEN ISNULL(INV.CLS_YN, '') = 'Y' THEN 1 ELSE 0 END) AS IN_EY_FLG,
		       INV.INTG_BL_SEQ 				AS		    IN_INTG_BL_SEQ,
		       INV.OTH_SEQ 					AS		    IN_OTH_SEQ 
		  FROM ( 
				<![CDATA[   
				SELECT  DTL.INV_SEQ,
						(CASE WHEN DTL.CLT_CMPL_FLG = 'Y' THEN '1' ELSE '0' END) AS BLK_FLG,
						(CASE WHEN MST.AIR_SEA_CLSS_CD= 'G' AND MST.SELL_BUY_TP_CD= 'S'
							  THEN 'A/R(G&A)'
							  WHEN MST.AIR_SEA_CLSS_CD= 'G' AND MST.SELL_BUY_TP_CD= 'B'
							  THEN 'A/P(G&A)'
							  WHEN MST.SELL_BUY_TP_CD= 'S'
							  THEN 'A/R'
							  WHEN MST.SELL_BUY_TP_CD= 'D' OR MST.SELL_BUY_TP_CD = 'C'
							  THEN 'DB/CR'
							  WHEN MST.SELL_BUY_TP_CD = 'B'
							  THEN 'A/P(Cost)'
						 END) AS INV_TP,
						MST.OFC_CD AS OFC_CD,
						DTL.INV_POST_DT,
						(CASE WHEN MST.SELL_BUY_TP_CD = 'B'
							  THEN DTL.BUY_INV_NO
							  ELSE DTL.INV_NO
						 END) AS INV_NO,
						PRNR.ENG_NM AS BILL_TO,
						DTL.INV_APLY_CURR_CD AS INV_APLY_CURR_CD,
						(CASE
							 WHEN MST.SELL_BUY_TP_CD = 'C' 
							 THEN DTL.INV_SUM_AMT * -1
							 ELSE DTL.INV_SUM_AMT
						 END) AS INV_SUM_AMT,
						(CASE
							 WHEN ISNULL(BL.INTG_BL_SEQ, '') != '' 
							 THEN BL.REF_NO
							 ELSE OTH.REF_NO
						 END) AS REF_NO,
						(CASE
							 WHEN BL.BIZ_CLSS_CD = 'M' THEN BL.BL_NO
							 WHEN BL.BIZ_CLSS_CD = 'H' THEN MBL.BL_NO
							 ELSE OTH.MBL_NO
						 END) AS MBL_NO,
						(CASE
							 WHEN BL.BIZ_CLSS_CD = 'M' THEN MBL.BL_NO
							 WHEN BL.BIZ_CLSS_CD = 'H' THEN BL.BL_NO
							 ELSE OTH.HBL_NO
						 END) AS HBL_NO,				
						OTH.REF_NO AS OTH_REF_NO,	
						DTL.JNR_YN,
						DTL.CLS_YN,			
						BL.REF_OFC_CD AS REF_OFC_CD,
						BL.INTG_BL_SEQ,
						OTH.OTH_SEQ
				  FROM  TB_INV MST
						JOIN (SELECT * 
								FROM ( SELECT INV_SEQ,INV_NO, INV_POST_DT, BUY_INV_NO, INV_APLY_CURR_CD, INV_SUM_AMT,JNR_YN, CLS_YN FROM TB_INV_DTL ) TID 
									LEFT OUTER JOIN (SELECT INV_NO AS INV_NO1, INV_SEQ AS INV_SEQ1, CLT_CMPL_FLG FROM TB_INV_DTL_BLCK) TIDB 
									ON TIDB.INV_SEQ1 = TID.INV_SEQ AND TIDB.INV_NO1 = TID.INV_NO) DTL ON MST.INV_SEQ = DTL.INV_SEQ

						JOIN TB_FRT FRT ON DTL.INV_SEQ = FRT.INV_SEQ AND FRT.DELT_FLG = 'N'
						JOIN TB_TRDP PRNR ON PRNR.TRDP_CD = MST.TRDP_CD AND PRNR.DELT_FLG = 'N'
						LEFT OUTER JOIN TB_INTG_BL BL ON FRT.INTG_BL_SEQ = BL.INTG_BL_SEQ AND BL.DELT_FLG = 'N'
						LEFT OUTER JOIN TB_INTG_BL_RLT RLT ON BL.INTG_BL_SEQ = RLT.INTG_BL_SEQ AND RLT.DELT_FLG = 'N'
						LEFT OUTER JOIN TB_INTG_BL MBL ON RLT.RLT_INTG_BL_SEQ = MBL.INTG_BL_SEQ AND MBL.BIZ_CLSS_CD = 'M' AND MBL.DELT_FLG = 'N'
						LEFT OUTER JOIN TB_OTH_SALES OTH ON FRT.OTH_SEQ = OTH.OTH_SEQ
						LEFT OUTER JOIN TB_JNR_DTL JNR ON DTL.INV_SEQ = JNR.INV_SEQ AND ISNULL(JNR.DELT_FLG, 'N') != 'Y'
				]]>
				WHERE MST.DELT_FLG = 'N'
				  AND DTL.INV_POST_DT BETWEEN #s_prd_strdt# AND #s_prd_enddt#
				  <isNotEmpty property="s_ofc_cd">                                           
	              AND MST.OFC_CD = #s_ofc_cd#
	              </isNotEmpty>
	              <isEqual property="s_block_yn" compareValue="Y">
	              AND ISNULL(DTL.CLT_CMPL_FLG, '') = 'Y'
	              </isEqual>
	              <isEqual property="s_block_yn" compareValue="N">
	              AND ISNULL(DTL.CLT_CMPL_FLG, '') != 'Y'
	              </isEqual>
	              <isNotEmpty property="s_in_flg">                                           
	              AND ((MST.SELL_BUY_TP_CD IN ($s_in_flg$) AND ISNULL(MST.AIR_SEA_CLSS_CD,'O') != 'G')
	               <isNotEmpty property="s_in_ga_flg">
			          OR (MST.SELL_BUY_TP_CD IN ($s_in_ga_flg$) AND ISNULL(MST.AIR_SEA_CLSS_CD,'O') = 'G')
			       </isNotEmpty>
			          )
	              </isNotEmpty>
	              <isEmpty property="s_in_flg">                                           
		              <isNotEmpty property="s_in_ga_flg">
			          AND MST.SELL_BUY_TP_CD IN ($s_in_ga_flg$) AND ISNULL(MST.AIR_SEA_CLSS_CD,'O') = 'G'
			          </isNotEmpty>
	              </isEmpty>
	              <isNotEmpty property="s_inv_no">                                           
	              AND (DTL.INV_NO like '%'+ #s_inv_no# +'%' 
	               OR DTL.BUY_INV_NO like '%'+ #s_inv_no# +'%')
	              </isNotEmpty>
	              <isNotEmpty property="s_inv_bill_to_cd">                                           
	              AND MST.TRDP_CD = #s_inv_bill_to_cd#
	              </isNotEmpty>
	              <isNotEmpty property="s_inv_ref_no">                                           
	              AND (BL.REF_NO like '%'+ #s_inv_ref_no# +'%' 
	               OR OTH.REF_NO like '%'+ #s_inv_ref_no# +'%')
	              </isNotEmpty>
	              <isNotEmpty property="s_inv_bl_no">                                           
	              AND (BL.BL_NO like '%'+ #s_inv_bl_no# +'%' 
	               OR OTH.MBL_NO like '%'+ #s_inv_bl_no# +'%' 
	               OR OTH.HBL_NO like '%'+ #s_inv_bl_no# +'%')
	              </isNotEmpty>
			) INV  
		GROUP BY INV.INV_SEQ,	
		         INV.BLK_FLG,			
				 INV.INV_TP,
				 INV.OFC_CD,
				 INV.INV_POST_DT,
				 INV.INV_NO,
				 INV.BILL_TO,
				 INV.INV_APLY_CURR_CD,
				 INV.INV_SUM_AMT,
				 INV.REF_NO,
				 INV.MBL_NO,
				 INV.HBL_NO,				
				 INV.OTH_REF_NO,
				 INV.INTG_BL_SEQ,
		         INV.OTH_SEQ
		ORDER BY INV.INV_POST_DT DESC		 
    </select>
    
    <!-- Block/Unblock Journal List 조회   -->
   <select id="searchJournalBlockList" parameterClass="java.util.HashMap" resultClass="BlockListVO">
    	/* ============== AccSlpSlipSQL.XML : searchJournalBlockList ============== */
		SELECT MST.JNR_NO				AS 			DP_JNR_NO,
       		  (CASE WHEN MST.CLT_CMPL_FLG = 'Y' THEN '1' ELSE '0' END) AS DP_BLK_FLG,
       		  (CASE WHEN MST.JNR_TP = 'D' THEN 'DEPOSIT' WHEN MST.JNR_TP = 'C' THEN 'PAYMENT' END) AS DP_JNR_TP,
       		  MST.P_OFC_CD AS DP_OFC_CD,
          	  MST.POST_DT				AS 			DP_POST_DT,
        	  (SELECT B.BANK_NM FROM TB_BANK B WHERE B.BANK_SEQ = MST.BANK_SEQ) AS DP_BANK_NM,
        	  MST.CHK_NO				AS 			DP_CHK_NO,
        	  MST.CURR_CD				AS 			DP_CURR_CD, 
        	  MST.AMT					AS 			DP_AMT,
        	  MST.RCVD_FM_NM 			AS 			DP_RCVD_FM,
        	  (CASE WHEN ISNULL(MST.JNR_YN, '') = 'Y' THEN 1 ELSE 0 END) AS DP_JN_FLG,
			  (CASE WHEN ISNULL(MST.CLS_YN, '') = 'Y' THEN 1 ELSE 0 END) AS DP_EY_FLG   
  		FROM (SELECT * 
				FROM (SELECT JNR_NO, JNR_TP, P_OFC_CD, POST_DT,BANK_SEQ, CHK_NO, CURR_CD, AMT, RCVD_FM_NM, JNR_YN, CLS_YN, DELT_FLG, TRDP_CD FROM TB_JNR_MST) TJM
				LEFT OUTER JOIN (SELECT JNR_NO AS JNR_NO1, P_OFC_CD AS P_OFC_CD1, CLT_CMPL_FLG  FROM TB_JNR_MST_BLCK) TJMB 
				ON TJMB.JNR_NO1 = TJM.JNR_NO AND TJMB.P_OFC_CD1 = TJM.P_OFC_CD)  MST

  	   WHERE MST.DELT_FLG = 'N'
		 AND MST.POST_DT BETWEEN #s_prd_strdt# AND #s_prd_enddt# 
		 <isNotEmpty property="s_ofc_cd">                                           
         AND MST.P_OFC_CD = #s_ofc_cd#
         </isNotEmpty>
         <isEqual property="s_block_yn" compareValue="Y">
         AND ISNULL(MST.CLT_CMPL_FLG, '') = 'Y'
         </isEqual>
         <isEqual property="s_block_yn" compareValue="N">
         AND ISNULL(MST.CLT_CMPL_FLG, '') != 'Y'
         </isEqual>
         <isNotEmpty property="s_dp_flg">                                           
         AND MST.JNR_TP IN ($s_dp_flg$) 
         </isNotEmpty>
		 <isNotEmpty property="s_bank_cd">                                           
         AND MST.BANK_SEQ = #s_bank_cd#
         </isNotEmpty> 
         <isNotEmpty property="s_chk_no">                                           
         AND MST.CHK_NO like '%'+ #s_chk_no# +'%'
         </isNotEmpty> 
         <isNotEmpty property="s_rcvd_fm_cd">                                           
         AND MST.TRDP_CD = #s_rcvd_fm_cd#
         </isNotEmpty> 
    </select>
    
    <!-- Block/Unblock GeneralJournal List 조회   -->
    <select id="searchSlipBlockList" parameterClass="java.util.HashMap" resultClass="BlockListVO">
    	/* ============== AccSlpSlipSQL.XML : searchSlipBlockList ============== */
		SELECT MST.SLIP_NO 			AS 	SL_SLIP_NO,
		       (CASE WHEN MST.CLT_CMPL_FLG = 'Y' THEN '1' ELSE '0' END) AS SL_BLK_FLG,
		       MST.SLIP_TP  		AS  SL_SLIP_TP,
		       MST.P_OFC_CD 		AS	SL_OFC_CD,
		       MST.POST_DT  		AS  SL_POST_DT,
		       MST.RESERVE_FIELD01	AS SL_INV_DT,
		       MST.CURR_CD			AS SL_CURR_CD,
		       MST.RMK				AS SL_RMK,
		       MST.G_DEBIT			AS SL_G_DEBIT,
		       MST.G_CREDIT			AS SL_G_CREDIT,
		       MST.RGST_USRID		AS SL_ISSUED_BY,
		      (CASE WHEN ISNULL(MST.JNR_YN, '') = 'Y' THEN 1 ELSE 0 END) AS SL_JN_FLG,
			  (CASE WHEN ISNULL(MST.CLS_YN, '') = 'Y' THEN 1 ELSE 0 END) AS SL_EY_FLG 
  		FROM (SELECT *
			FROM (SELECT SLIP_NO, SLIP_TP, P_OFC_CD, POST_DT, RESERVE_FIELD01, CURR_CD, RMK, G_DEBIT,G_CREDIT, RGST_USRID, JNR_YN, CLS_YN, DELT_FLG FROM TB_SLIP_MST ) TSM
			LEFT OUTER JOIN (SELECT P_OFC_CD AS P_OFC_CD1, SLIP_NO AS SLIP_NO1, CLT_CMPL_FLG FROM TB_SLIP_MST_BLCK) TSMB 
			ON TSMB.P_OFC_CD1 = TSM.P_OFC_CD AND TSMB.SLIP_NO1 = TSM.SLIP_NO) MST

  	   WHERE MST.DELT_FLG = 'N'
		 AND MST.POST_DT BETWEEN #s_prd_strdt# AND #s_prd_enddt# 
		 AND MST.SLIP_TP = 'SL' 
		 <isNotEmpty property="s_ofc_cd">                                           
         AND MST.P_OFC_CD = #s_ofc_cd#
         </isNotEmpty>
         <isEqual property="s_block_yn" compareValue="Y">
         AND ISNULL(MST.CLT_CMPL_FLG, '') = 'Y'
         </isEqual>
         <isEqual property="s_block_yn" compareValue="N">
         AND ISNULL(MST.CLT_CMPL_FLG, '') != 'Y'
         </isEqual>
    </select> 

    <!-- BL MBL Block/Unblock 처리를 한다.  BL_STS_CD UPDATE   -->
    <update id="updateBl_Block_MBL" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateBl_Block ============== */
    	 UPDATE TB_INTG_BL_BLCK
    	    <isEqual property="s_block_satus" compareValue="N">
    	   		SET BL_STS_CD = 'HF'
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		SET BL_STS_CD = 'MC'
    	    </isEqual>
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
    	  WHERE INTG_BL_SEQ =   #intg_bl_seq#
    </update> 
    
    <!-- BL HBL Block/Unblock 처리를 한다.  BL_STS_CD UPDATE   -->
    <update id="updateBl_Block_HBL" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateBl_Block ============== */
    	 UPDATE TB_INTG_BL_BLCK
    	    <isEqual property="s_block_satus" compareValue="N">
    	   		SET BL_STS_CD = 'HF'
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		SET BL_STS_CD = 'HC'
    	    </isEqual>
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
    	  WHERE INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
                                FROM TB_INTG_BL_RLT 
                               WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#							
    							)
    </update> 
    
    <!-- Other BL Block/Unblock 처리를 한다.  BL_STS_CD UPDATE   -->
    <update id="updateOthBl_Block" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateOthBl_Block ============== */
    	 UPDATE TB_OTH_SALES_BLCK
    	    <isEqual property="s_block_satus" compareValue="N">
    	   		SET STS_CD = 'B'
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		SET STS_CD = 'O'
    	    </isEqual>
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#      	    
    	  WHERE OTH_SEQ = #oth_seq#
    </update> 
    
    <!-- FREIGHT Block/Unblock 처리를 한다. CFM_FLG UPDATE   -->
    <update id="updateFrt_Block" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateFrt_Block ============== */
    	UPDATE TB_FRT_BLCK
    		<isEqual property="s_block_satus" compareValue="N">
    	   		SET CFM_FLG = 'Y'	
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		SET CFM_FLG = 'N'	
    	    </isEqual>
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#      	    
    	 WHERE FRT_SEQ = #frt_seq# 
    </update>
        
    <!-- Invoice Master Block/Unblock 처리를 한다. CLT_CMPL_FLG, BLOCK_DT UPDATE   -->
    <update id="updateInv_Mst_Block" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_Mst_Block ============== */
    	UPDATE TB_INV_BLCK
    		<isEqual property="s_block_satus" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'Y'	
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'N'	
    	    </isEqual>
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#    	    
    	 WHERE 1=1
    	   /* invoice 만 Block/Unblock 처리시 */
    	   <isNotEmpty property="inv_seq">   
    	   AND INV_SEQ = #inv_seq#
    	   </isNotEmpty>
    	   /* BL List 에서 Block/UnBlock 처리시 */    
    	   <isEmpty property="inv_seq"> 
    	   	    <isNotEmpty property="intg_bl_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_INTG_BL B, TB_FRT F 
								 WHERE 1=1   
								   AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND (B.INTG_BL_SEQ = #intg_bl_seq# 
		   	                              OR  B.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
		   	                                                      FROM TB_INTG_BL_RLT 
		   	                                                     WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#)	
		   	                              ) 
								)   
	    	    </isNotEmpty>
	    	    <isNotEmpty property="oth_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_OTH_SALES B, TB_FRT F 
								 WHERE 1=1   
								   AND B.OTH_SEQ = F.OTH_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND B.OTH_SEQ = #oth_seq#
	    	                   )
	    	    </isNotEmpty>
    	   </isEmpty>							
    </update>    
    
    <!-- Invoice Detail Block/Unblock 처리를 한다.  CLT_CMPL_FLG, BLOCK_DT UPDATE   -->
    <update id="updateInv_Dtl_Block" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_Dtl_Block ============== */
    	UPDATE TB_INV_DTL_BLCK
    		<isEqual property="s_block_satus" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'Y'	
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'N'
    	    </isEqual>
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#
    	WHERE 1=1
    	  /* invoice 만 Block/Unblock 처리시 */
    	   <isNotEmpty property="inv_seq">   
    	   AND INV_SEQ = #inv_seq#
    	   </isNotEmpty>
    	 /* BL List 에서 Block/UnBlock 처리시 */    
    	   <isEmpty property="inv_seq"> 
    	   	    <isNotEmpty property="intg_bl_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_INTG_BL B, TB_FRT F 
								 WHERE 1=1   
								   AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND (B.INTG_BL_SEQ = #intg_bl_seq# 
		   	                              OR  B.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
		   	                                                      FROM TB_INTG_BL_RLT 
		   	                                                     WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#)	
		   	                              ) 
								)   
	    	    </isNotEmpty>
	    	    <isNotEmpty property="oth_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_OTH_SALES B, TB_FRT F 
								 WHERE 1=1   
								   AND B.OTH_SEQ = F.OTH_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND B.OTH_SEQ = #oth_seq#
	    	                   )
	    	    </isNotEmpty>
    	   </isEmpty>	
    </update>  
    
    <!-- Journal Block/Unblock 처리를 한다.  CLT_CMPL_FLG, BLOCK_DT UPDATE  -->
    <!-- s_block_satus 'Y' 인 경우는 이미 block 처리된 경우임 block 해제함, N 인 경우 Block 시킴 -->
    <update id="updateJnr_Block" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateJnr_Block ============== */
    	UPDATE TB_JNR_MST_BLCK
    		<isEqual property="s_block_satus" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'Y'	
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'N'
    	    </isEqual>
    	    	 ,MODI_OFC_CD	=	#proc_ofccd#
    	    	 ,MODI_TMS		=   GETUTCDATE()
    	    	 ,MODI_USRID	=	#proc_usrid#
    	 WHERE JNR_NO = #jnr_no#
    </update> 
    
    <!-- Vinh.Vo 2015 01 30 (S) merge code from Trieu.Nguyen  -->
    
    <!-- insertTB_SLIP_MST_BLCK-->
    <insert id="insertTB_SLIP_MST_BLCK">
    	INSERT INTO TB_SLIP_MST_BLCK(
			SLIP_NO, P_OFC_CD, CLT_CMPL_FLG, BLOCK_DT,
			RGST_USRID, RGST_OFC_CD, RGST_TMS,
			MODI_USRID, MODI_OFC_CD, MODI_TMS
		)
    	SELECT SLIP_NO
				,P_OFC_CD
				,'Y' AS CLT_CMPL_FLG
				,BLOCK_DT
				,RGST_USRID
				,RGST_OFC_CD
				,RGST_TMS
				,MODI_USRID
				,MODI_OFC_CD
				,MODI_TMS
    	FROM TB_SLIP_MST
    	WHERE SLIP_NO = #slip_no# 
    	  AND SLIP_NO NOT IN (SELECT TSMB.SLIP_NO
						FROM TB_SLIP_MST_BLCK TSMB, TB_SLIP_MST TSM
						WHERE TSM.SLIP_NO = TSMB.SLIP_NO
						AND TSM.P_OFC_CD = TSMB.P_OFC_CD
						AND TSM.SLIP_NO =  #slip_no#)
    </insert>
    
    <!-- insertTB_JNR_MST_BLCK -->
    <insert id="insertTB_JNR_MST_BLCK" parameterClass="java.util.HashMap">
    	INSERT INTO TB_JNR_MST_BLCK(
			JNR_NO, P_OFC_CD, CLT_CMPL_FLG,
			BLOCK_DT, RGST_USRID, RGST_OFC_CD,
			RGST_TMS, MODI_USRID, MODI_OFC_CD,
			MODI_TMS
		)
    	SELECT JNR_NO
				,P_OFC_CD
				,'Y' AS CLT_CMPL_FLG
				,BLOCK_DT
				,RGST_USRID
				,RGST_OFC_CD
				,RGST_TMS
				,MODI_USRID
				,MODI_OFC_CD
				,MODI_TMS
    	FROM TB_JNR_MST
    	WHERE JNR_NO = #jnr_no# 
    	  AND JNR_NO NOT IN (SELECT TJMB.JNR_NO
						FROM TB_JNR_MST_BLCK TJMB, TB_JNR_MST TJM
						WHERE TJM.JNR_NO = TJMB.JNR_NO
						AND TJM.P_OFC_CD = TJMB.P_OFC_CD
						AND TJMB.JNR_NO = #jnr_no#  )
    </insert> 
    
    <!-- insertTB_INV_DTL_BLCK --> 
    <insert id="insertTB_INV_DTL_BLCK">
    	INSERT INTO TB_INV_DTL_BLCK(
			INV_NO, INV_SEQ, CLT_CMPL_FLG,
			BLOCK_DT, RGST_USRID, RGST_OFC_CD,
			RGST_TMS, MODI_USRID, MODI_OFC_CD,
			MODI_TMS
		)
    	SELECT INV_NO
			,INV_SEQ
			,'Y' AS CLT_CMPL_FLG
			,BLOCK_DT
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
    	FROM TB_INV_DTL
    	WHERE 1=1
    	<isNotEmpty property="inv_seq">   
    		AND INV_SEQ = #inv_seq#
       	</isNotEmpty>
        <isNotEmpty property="inv_seq">
    		AND INV_SEQ NOT IN (SELECT INV_SEQ FROM TB_INV_DTL_BLCK WHERE INV_SEQ = #inv_seq#)
    	</isNotEmpty>
    	 /* BL List 에서 Block/UnBlock 처리시 */    
		<isEmpty property="inv_seq"> 
   	   	    <isNotEmpty property="intg_bl_seq"> 
    	    	AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
							  FROM TB_INTG_BL B, TB_FRT F 
							 WHERE 1=1   
							   AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
							   AND ISNULL(F.INV_SEQ, '') != ''
							   AND (B.INTG_BL_SEQ = #intg_bl_seq# 
	   	                              OR  B.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
	   	                                                      FROM TB_INTG_BL_RLT 
	   	                                                     WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#)	
	   	                              ) 
							)   
			</isNotEmpty>
		</isEmpty>		
		<isEmpty property="inv_seq">
			<isNotEmpty property="intg_bl_seq">
    			AND INV_SEQ NOT IN (SELECT INV_SEQ 
    							FROM TB_INV_DTL_BLCK 
    							WHERE INV_SEQ IN (
    								SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  	FROM TB_INTG_BL B, TB_FRT F 
								 	WHERE 1=1   
								   	AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
								   	AND ISNULL(F.INV_SEQ, '') != ''
								   	AND (B.INTG_BL_SEQ = #intg_bl_seq# 
		   	                              OR  B.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
		   	                                                      FROM TB_INTG_BL_RLT 
		   	                                                     WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#)	
								) 
								))
    		</isNotEmpty> 
    	</isEmpty>
    	<isEmpty property="inv_seq"> 
   	   	    <isNotEmpty property="oth_seq"> 
    	    	AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
							  FROM TB_OTH_SALES B, TB_FRT F 
							 WHERE 1=1   
							   AND B.OTH_SEQ = F.OTH_SEQ
							   AND ISNULL(F.INV_SEQ, '') != ''
							   AND B.OTH_SEQ = #oth_seq#
							)   
			</isNotEmpty>
		</isEmpty>		
		<isEmpty property="inv_seq">
			<isNotEmpty property="oth_seq">
    			AND INV_SEQ NOT IN (SELECT INV_SEQ 
    							FROM TB_INV_DTL_BLCK 
    							WHERE INV_SEQ IN (
    								SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  	FROM TB_OTH_SALES B, TB_FRT F 
								 	WHERE 1=1   
								   	AND B.OTH_SEQ = F.OTH_SEQ
								   	AND ISNULL(F.INV_SEQ, '') != ''
								   	AND B.OTH_SEQ = #oth_seq# 
								))
    		</isNotEmpty> 
    	</isEmpty>
    </insert>
    
    <!-- insertTB_INV_BLCK -->
    <insert id="insertTB_INV_BLCK">
    	INSERT INTO TB_INV_BLCK(
			INV_SEQ, CLT_CMPL_FLG, RGST_USRID,
			RGST_OFC_CD,  RGST_TMS, MODI_USRID,
			MODI_OFC_CD,  MODI_TMS
		)
    	SELECT INV_SEQ
			,'Y' AS CLT_CMPL_FLG
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
    	FROM TB_INV
    	WHERE 1=1
    	<isNotEmpty property="inv_seq">   
    	   	AND INV_SEQ = #inv_seq#
       	</isNotEmpty>
       	<isNotEmpty property="inv_seq">
    		AND INV_SEQ NOT IN (SELECT INV_SEQ FROM TB_INV_BLCK WHERE INV_SEQ = #inv_seq#)
		</isNotEmpty>
       	<isEmpty property="inv_seq"> 
			<isNotEmpty property="intg_bl_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_INTG_BL B, TB_FRT F 
								 WHERE 1=1   
								   AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND (B.INTG_BL_SEQ = #intg_bl_seq# 
		   	                              OR  B.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
		   	                                                      FROM TB_INTG_BL_RLT 
		   	                                                     WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#)	
		   	                              ) 
								)   
	     	</isNotEmpty>
		</isEmpty>	     
	    <isEmpty property="inv_seq">
    		<isNotEmpty property="intg_bl_seq">
    			AND INV_SEQ NOT IN (SELECT INV_SEQ 
    							FROM TB_INV_BLCK 
    							WHERE INV_SEQ IN (
    								SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_INTG_BL B, TB_FRT F 
								 WHERE 1=1   
								   AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND (B.INTG_BL_SEQ = #intg_bl_seq# 
		   	                              OR  B.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
		   	                                                      FROM TB_INTG_BL_RLT 
		   	                                                     WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#)	
		   	                              ) 
								))
    		</isNotEmpty>
    	</isEmpty> 
    	<isEmpty property="inv_seq"> 
			<isNotEmpty property="oth_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_OTH_SALES B, TB_FRT F 
								 WHERE 1=1   
								   AND B.OTH_SEQ = F.OTH_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND B.OTH_SEQ = #oth_seq#
								)   
	     	</isNotEmpty>
		</isEmpty>	     
	    <isEmpty property="inv_seq">
    		<isNotEmpty property="oth_seq">
    			AND INV_SEQ NOT IN (SELECT INV_SEQ 
    							FROM TB_INV_BLCK 
    							WHERE INV_SEQ IN (
    								SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_OTH_SALES B, TB_FRT F 
								 WHERE 1=1   
								   AND B.OTH_SEQ = F.OTH_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND B.OTH_SEQ = #oth_seq#
								))
    		</isNotEmpty>
    	</isEmpty> 
    </insert>
    
    <!-- insertTB_FRT_BLCK -->
    <insert id="insertTB_FRT_BLCK">
    	INSERT INTO TB_FRT_BLCK(
			FRT_SEQ, CFM_FLG, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, MODI_USRID,
			MODI_OFC_CD, MODI_TMS
		)
    	SELECT FRT_SEQ
			,'Y' AS CFM_FLG
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
		FROM 	TB_FRT
		WHERE FRT_SEQ = #frt_seq#  AND FRT_SEQ NOT IN (SELECT FRT_SEQ FROM TB_FRT_BLCK WHERE FRT_SEQ = #frt_seq#)	
	</insert>
		
    	
    
    <!-- Select  FRT_SEQ from TB_FRT-->
    <select id="selectFRT_SEQ_ARR" parameterClass="java.util.HashMap" resultClass="HashMap">
    	SELECT FRT_SEQ
    	FROM TB_FRT
    	 WHERE 1=1
    	 /* invoice 만 Block/Unblock 처리시 */
    	   <isNotEmpty property="inv_seq">   
    	   AND INV_SEQ = #inv_seq#
    	   </isNotEmpty>
    	 /* BL List 에서 Block/UnBlock 처리시 */    
    	   <isEmpty property="inv_seq"> 
    	   	    <isNotEmpty property="intg_bl_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_INTG_BL B, TB_FRT F 
								 WHERE 1=1   
								   AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND (B.INTG_BL_SEQ = #intg_bl_seq# 
		   	                              OR  B.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
		   	                                                      FROM TB_INTG_BL_RLT 
		   	                                                     WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#)	
		   	                              ) 
								)   
	    	    </isNotEmpty>
	    	    <isNotEmpty property="oth_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_OTH_SALES B, TB_FRT F 
								 WHERE 1=1   
								   AND B.OTH_SEQ = F.OTH_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND B.OTH_SEQ = #oth_seq#
	    	                   )
	    	    </isNotEmpty>
    	   </isEmpty>
    </select>
    <!-- return hash -->
    <select id="selectFRT_SEQ" parameterClass="java.util.HashMap" resultClass="String">
    	SELECT FRT_SEQ
    	FROM TB_FRT
    	 WHERE 1=1
    	 /* invoice 만 Block/Unblock 처리시 */
    	   <isNotEmpty property="inv_seq">   
    	   AND INV_SEQ = #inv_seq#
    	   </isNotEmpty>
    	 /* BL List 에서 Block/UnBlock 처리시 */    
    	   <isEmpty property="inv_seq"> 
    	   	    <isNotEmpty property="intg_bl_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_INTG_BL B, TB_FRT F 
								 WHERE 1=1   
								   AND B.INTG_BL_SEQ = F.INTG_BL_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND (B.INTG_BL_SEQ = #intg_bl_seq# 
		   	                              OR  B.INTG_BL_SEQ IN (SELECT INTG_BL_SEQ 
		   	                                                      FROM TB_INTG_BL_RLT 
		   	                                                     WHERE RLT_INTG_BL_SEQ = #intg_bl_seq#)	
		   	                              ) 
								)   
	    	    </isNotEmpty>
	    	    <isNotEmpty property="oth_seq"> 
	    	    AND INV_SEQ IN (SELECT DISTINCT(F.INV_SEQ) AS INV_SEQ
								  FROM TB_OTH_SALES B, TB_FRT F 
								 WHERE 1=1   
								   AND B.OTH_SEQ = F.OTH_SEQ
								   AND ISNULL(F.INV_SEQ, '') != ''
								   AND B.OTH_SEQ = #oth_seq#
	    	                   )
	    	    </isNotEmpty>
    	   </isEmpty>
    </select>
    <!-- FREIGHT_BLCK Block/Unblock 처리를 한다. CFM_FLG UPDATE -->
    <update id="updateTb_Frt_Block" parameterClass="java.util.HashMap">
    UPDATE TB_FRT_BLCK
    		<isEqual property="s_block_satus" compareValue="N">
    	   		SET CFM_FLG = 'Y'	
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		SET CFM_FLG = 'N'	
    	    </isEqual>
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#
   	  WHERE FRT_SEQ = #frt_seq#   
   	</update>
   	
   	<!-- insertTB_OTH_SALES -->
    <insert id="insertTB_OTH_SALES_BLCK">
    	INSERT INTO TB_OTH_SALES_BLCK(
			OTH_SEQ, STS_CD, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, MODI_USRID,
			MODI_OFC_CD, MODI_TMS
		)
    	SELECT OTH_SEQ
			,'B' AS STS_CD
			,RGST_USRID
			,RGST_OFC_CD
			,RGST_TMS
			,MODI_USRID
			,MODI_OFC_CD
			,MODI_TMS
    	FROM TB_OTH_SALES
    	WHERE OTH_SEQ = #oth_seq# AND OTH_SEQ NOT IN (SELECT OTH_SEQ FROM TB_OTH_SALES_BLCK WHERE OTH_SEQ = #oth_seq#)		
    </insert>
    
    <!-- insert record from TB_INTG_BL into TB_INTG_BL_BLCK -->
	<insert id="insertTB_INTG_BL_BLCK">
	/* ============== AccSlpSlipSQL.XML : insertTB_INTG_BL_BLCK ============== */
	INSERT INTO TB_INTG_BL_BLCK(
			INTG_BL_SEQ,  BL_STS_CD, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, 	MODI_USRID,
			MODI_OFC_CD, MODI_TMS
		)
    	SELECT INTG_BL_SEQ
    			,'HF' AS  BL_STS_CD				
				,RGST_USRID
				,RGST_OFC_CD
				,RGST_TMS
				,MODI_USRID
				,MODI_OFC_CD
				,MODI_TMS
    	FROM TB_INTG_BL
    	WHERE INTG_BL_SEQ = #intg_bl_seq# 
    		AND INTG_BL_SEQ NOT IN (SELECT INTG_BL_SEQ FROM TB_INTG_BL_BLCK WHERE INTG_BL_SEQ = #intg_bl_seq#)
    	UNION ALL
    	SELECT INTG_BL_SEQ
    			,'HF' AS  BL_STS_CD				
				,RGST_USRID
				,RGST_OFC_CD
				,RGST_TMS
				,MODI_USRID
				,MODI_OFC_CD
				,MODI_TMS
    	FROM TB_INTG_BL
    	WHERE INTG_BL_SEQ IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = #intg_bl_seq#) 
    		AND INTG_BL_SEQ NOT IN (SELECT INTG_BL_SEQ FROM TB_INTG_BL_BLCK WHERE INTG_BL_SEQ IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = #intg_bl_seq#))		
	</insert>
    
     <!-- Vinh.Vo 2015 01 30 (E) merge code from Trieu.Nguyen  -->
    
    <!-- General Journal Block/Unblock 처리를 한다.  CLT_CMPL_FLG, BLOCK_DT UPDATE  -->
    <!-- s_block_satus 'Y' 인 경우는 이미 block 처리된 경우임 block 해제함, N 인 경우 Block 시킴 -->
    <update id="updateSlip_Block" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateSlip_Block ============== */
    	UPDATE TB_SLIP_MST_BLCK
    		<isEqual property="s_block_satus" compareValue="N">
    	   		 SET CLT_CMPL_FLG = 'Y'	
    	    </isEqual>
    	    <isEqual property="s_block_satus" compareValue="Y">
    	   		 SET CLT_CMPL_FLG = 'N'
    	    </isEqual>
    	    	 ,MODI_OFC_CD	=	#proc_ofccd#
    	    	 ,MODI_TMS		=   GETUTCDATE()
    	    	 ,MODI_USRID	=	#proc_usrid#
    	 WHERE SLIP_NO = #slip_no#
    </update>  
    
    <!-- File 조회 후 변경시 BL Post Date 를 Update 한다. Ref No.단위로 변경 처리 한다.   -->
    <update id="updateFile_Bl_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateFile_Bl_Post_Date ============== */
    	 UPDATE TB_INTG_BL
    	 SET POST_DT    =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
    	  WHERE INTG_BL_SEQ =   #intg_bl_seq#
    	     OR INTG_BL_SEQ IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = #intg_bl_seq#)
    </update> 
    
    <!-- File 조회 후 변경시 Other BL Post Date 를 Update 한다. Ref No.단위로 변경 처리 한다.   -->
    <update id="updateFile_OthBl_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateFile_OthBl_Post_Date ============== */
    	 UPDATE TB_OTH_SALES
    	 SET POST_DT    =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
    	  WHERE OTH_SEQ =   #oth_seq#
    </update> 
    
    <!-- File 조회 후 변경시 Freight Post Date 를 Update 한다. Ref No.단위로 변경 처리 한다.   -->
    <update id="updateFile_Frt_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateFile_Frt_Post_Date ============== */
    	 UPDATE TB_FRT
    	 SET INV_POST_DT    =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
		 WHERE  FRT_SEQ IN (
				SELECT  FRT.FRT_SEQ
				  FROM  TB_FRT FRT
	   LEFT OUTER JOIN  TB_INV_DTL IDTL ON FRT.INV_SEQ = IDTL.INV_SEQ
				 WHERE  (FRT.INTG_BL_SEQ = #intg_bl_seq#
				         OR FRT.INTG_BL_SEQ IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = #intg_bl_seq#)
				         OR FRT.OTH_SEQ = #oth_seq#)
				   AND  ISNULL(IDTL.PAY_AMT, 0) = 0
				   AND  FRT.DELT_FLG = 'N'
				   AND  IDTL.DELT_FLG = 'N'
		   		)
    </update> 
    
    <!-- File 조회 후 변경시 Invoice Detail Post Date 를 Update 한다. Ref No.단위로 변경 처리 한다.   -->
    <update id="updateFile_InvDtl_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateFile_InvDtl_Post_Date ============== */
    	 UPDATE TB_INV_DTL
    	 SET INV_POST_DT    =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
		 WHERE  INV_SEQ IN (
				SELECT  FRT.INV_SEQ
				  FROM  TB_FRT FRT
	              JOIN  TB_INV_DTL IDTL ON FRT.INV_SEQ = IDTL.INV_SEQ
				 WHERE  (FRT.INTG_BL_SEQ = #intg_bl_seq#
				         OR FRT.INTG_BL_SEQ IN (SELECT intg_bl_seq FROM tb_intg_bl_rlt WHERE rlt_intg_bl_seq = #intg_bl_seq#)
				         OR FRT.OTH_SEQ = #oth_seq#)
				   AND  ISNULL(IDTL.PAY_AMT, 0) = 0
				   AND  FRT.DELT_FLG = 'N'
				   AND  IDTL.DELT_FLG = 'N'
		   		)
    </update> 
    
    <!-- Invoice 조회 후 변경시 Invoice Detail Post Date 를 Update 한다. -->
    <update id="updateInv_InvDtl_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_InvDtl_Post_Date ============== */
    	 UPDATE TB_INV_DTL
    	 SET INV_POST_DT    =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
		 WHERE  INV_SEQ     =   #inv_seq#
           AND  DELT_FLG    =   'N'
    </update> 
    
    <!-- Invoice 조회 후 변경시 Freight Post Date 를 Update 한다. -->
    <update id="updateInv_Frt_Post_Date" parameterClass="java.util.HashMap"> 
    	/* ============== AccSlpSlipSQL.XML : updateInv_Frt_Post_Date ============== */
    	 UPDATE TB_FRT
    	 SET INV_POST_DT    =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
		 WHERE  INV_SEQ     =   #inv_seq#
           AND  DELT_FLG    =   'N'
    </update> 
    
    <!-- Invoice 조회 후 변경시 Journal Detail Post Date 를 Update 한다. -->
    <update id="updateInv_JnrDtl_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateInv_JnrDtl_Post_Date ============== */
    	 UPDATE TB_JNR_DTL
    	 SET POST_DT    =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
		 WHERE  INV_SEQ     =   #inv_seq#
		   AND  INP_TYPE    =   'S'
           AND  DELT_FLG    =   'N'
    </update> 
    
    <!-- Journal 조회 후 변경시 Journal Master Post Date 를 Update 한다. -->
    <update id="updateJnrMst_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateJnrMst_Post_Date ============== */
    	 UPDATE TB_JNR_MST
    	 SET POST_DT        =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
		 WHERE  JNR_NO     =   #jnr_no#
           AND  DELT_FLG    =   'N'
    </update> 
    
    <!-- Journal 조회 후 변경시 Journal Detail Post Date 를 Update 한다. -->
    <update id="updateJnrDtl_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateJnrDtl_Post_Date ============== */
    	 UPDATE TB_JNR_DTL
    	 SET POST_DT        =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
		 WHERE  JNR_NO      =   #jnr_no#
		   AND  INP_TYPE    =   'M'
           AND  DELT_FLG    =   'N'
    </update> 
    
    <!-- Journal 조회 후 변경시 Journal Post Date 를 변경한 경우 Invoice 처리 [Last Pay Date, Last Check No. Update] 한다. -->
    <update id="updateJnr_Inv_Last_Pay_Info" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateJnr_Inv_Last_Pay_Info ============== */
    	 UPDATE TB_INV_DTL
		 SET LAST_PAY_DT    =   JNR.LAST_PAY_DT
		    ,LAST_CHK_NO    =   JNR.LAST_CHK_NO
		    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#   
		 FROM TB_INV_DTL IDTL 
		      JOIN (SELECT J.INV_SEQ, J.LAST_PAY_DT,J.LAST_CHK_NO
					  FROM (
							SELECT RANK() OVER(PARTITION BY D.INV_SEQ ORDER BY M.POST_DT DESC, M.MODI_TMS DESC) AS INV_RANK,
								   M.JNR_NO, D.INV_SEQ, M.POST_DT AS LAST_PAY_DT, M.CHK_NO AS LAST_CHK_NO	
							  FROM TB_JNR_MST M,
								   TB_JNR_DTL D
							 WHERE 1=1
							   AND M.JNR_NO = D.JNR_NO
							   AND ISNULL(M.DELT_FLG,'N') = 'N'
							   AND ISNULL(D.DELT_FLG,'N') = 'N'
							   AND ISNULL(M.VOID_YN,'N') = 'N'
							   AND D.INP_TYPE = 'S'
							   AND D.INV_SEQ IN (SELECT INV_SEQ FROM TB_JNR_DTL WHERE JNR_NO = #jnr_no#)
							) J 
					 WHERE J.INV_RANK = 1	 
		           ) JNR ON IDTL.INV_SEQ = JNR.INV_SEQ
    </update> 
    
    <!-- General Journal 조회 후 변경시 General Journal Master Post Date 를 Update 한다. -->
    <update id="updateSlipMst_Post_Date" parameterClass="java.util.HashMap">
    	/* ============== AccSlpSlipSQL.XML : updateSlipMst_Post_Date ============== */
    	 UPDATE TB_SLIP_MST
    	 SET POST_DT        =   #post_dt#
    	    ,MODI_OFC_CD	=	#proc_ofccd#
   	    	,MODI_TMS		=   GETUTCDATE()
   	    	,MODI_USRID		=	#proc_usrid#       	    
		 WHERE  SLIP_NO     =   #slip_no#
           AND  DELT_FLG    =   'N'
    </update> 
    
    <!-- Accounting Block/Unblock 시 Log 정보를 INSERT 한다.   -->
    <insert id="insertBlockLog" parameterClass="BlockLogVO">
    	INSERT INTO TB_ACCT_BLOCK_LOG(
            BLCK_TP_CD
           ,HIS_REF_NO
           ,HIS_RMK
           ,RESERVE_FIELD01
           ,RESERVE_FIELD02
           ,RESERVE_FIELD03
           ,RGST_USRID
           ,RGST_OFC_CD
           ,RGST_TMS
	    ) VALUES (
            #blck_tp_cd#
           ,#his_ref_no#
           ,#his_rmk#
           ,#reserve_field01#
           ,#reserve_field02#
           ,#reserve_field03#
           ,#rgst_usrid#
           ,#rgst_ofc_cd#
           ,getdate()
        )
    </insert>
    
    <select id="selectLastYearEnd" parameterClass="java.util.HashMap" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectLastYearEnd ============== */
        SELECT MAX(POST_DT) AS LAST_YEAR_END
          FROM TB_SLIP_MST 
         WHERE SLIP_TP IN ('EY','BB') 
           AND DT_SEQ IN (99998,99999) 
           AND ISNULL(DELT_FLG,'N') != 'Y'
    </select>
    
    <select id="selectYearClsMM" parameterClass="java.util.HashMap" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectYearClsMM ============== */
        SELECT PRE_FIX 
          FROM TB_SEQ 
         WHERE SEQ_TYPE = 'YEAR_CLS_MM';
    </select>
    
    <select id="selectSystemBegYM" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectSystemBegYM ============== */
        SELECT PRE_FIX 
          FROM TB_SEQ 
         WHERE SEQ_TYPE = 'BEG_YYYYMM';
    </select>
    
    <select id="selectLastJnrDt" parameterClass="java.util.HashMap" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectLastJnrDt ============== */
        SELECT MAX(JNR_DT) AS LAST_JNR_DT
          FROM TB_JNR_MST 
         WHERE ISNULL(DELT_FLG,'N') != 'Y'
    </select>
    
    <select id="selectFirstClrDt" parameterClass="java.util.HashMap" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectFirstClrDt ============== */
        SELECT MIN(CLR_DT) AS FIRST_CLR_DT
          FROM TB_JNR_MST 
         WHERE ISNULL(DELT_FLG,'N') != 'Y'
           AND ISNULL(CLT_CMPL_FLG,'N') != 'Y'
           AND JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y')
           AND ISNULL(CLR_DT,'') != ''
    </select>
    
    <select id="selectYearEndBeginDate" parameterClass="java.util.HashMap" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectYearEndBeginDate ============== */
        SELECT DBO.FC_GET_BEGIN_DATE(#yearEndDate#)
    </select>
    
    <select id="selectBeginDate2" parameterClass="java.util.HashMap" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectBeginDate2 ============== */
        SELECT DBO.FC_GET_BEGIN_DATE_2(#yearEndDate#)
    </select>
    
    <select id="selectYearEndPostDate" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectYearEndPostDate ============== */
        SELECT MAX(POST_DT) 
        FROM   TB_SLIP_MST 
        WHERE  SLIP_TP IN ('BB','EY') 
        AND    ISNULL(DELT_FLG,'') != 'Y'
    </select>
    
     <!-- Year End Status Change Invoice -->
    <update id="updateYearEndStatusInv" parameterClass="java.util.HashMap">
    /* ============== AccSlpSlipSQL.XML : updateYearEndStatusInv ============== */
    	UPDATE TB_INV_DTL
   	   		  SET CLS_YN = 'Y', CLS_DT = #yearEndDate#	
    	 WHERE INV_POST_DT  BETWEEN #beginDate# AND #yearEndDate# 
    </update>  
    
    <!-- Year End Status Change Deposit/Payment -->
    <update id="updateYearEndStatusBnk" parameterClass="java.util.HashMap">
    /* ============== AccSlpSlipSQL.XML : updateYearEndStatusBnk ============== */
    	UPDATE TB_JNR_MST
   	   		  SET CLS_YN = 'Y', CLS_DT = #yearEndDate#	
    	 WHERE POST_DT  BETWEEN #beginDate# AND #yearEndDate# 
    </update>
    
    <!-- Year End Status Change Journal -->
    <update id="updateYearEndStatusJnr" parameterClass="java.util.HashMap">
    /* ============== AccSlpSlipSQL.XML : updateYearEndStatusJnr ============== */
    	UPDATE TB_SLIP_MST
   	   		  SET CLS_YN = 'Y', CLS_DT = #yearEndDate#	
    	 WHERE POST_DT  BETWEEN #beginDate# AND #yearEndDate# 
    </update>
    
    <select id="selectglReEarn" parameterClass="java.util.HashMap" resultClass="String">
    /* ============== AccSlpSlipSQL.XML : selectglReEarn ============== */
        SELECT gl_re_earn FROM tb_ofc where ofc_cd = #p_ofc_cd#
    </select>
    
    <!-- 4,5번대 GL 잔액 List 조회   -->
    <select id="yearEndList45" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	/* ============== AccSlpSlipSQL.XML : yearEndList45 ============== */
		SELECT SL.GL_NO
		     , SL.GL_SUB
		     , SL.GL_TYPE
		     , SL.P_OFC_CD
		     , SL.CURR_CD
		     , SL.XCRT
		     , SL.COM_TP
		     , SL.COM_CD
		     , SL.COM_NM
		     , SL.DEBIT
		     , SL.CREDIT
		     , SL.SLIP_DESC
		     , SUM(SL.DEBIT) OVER(PARTITION BY SL.P_OFC_CD, SL.CURR_CD) AS G_DEBIT
		     , SUM(SL.CREDIT) OVER(PARTITION BY SL.P_OFC_CD, SL.CURR_CD) AS G_CREDIT 
		 FROM (   
			 SELECT SL.GL_NO
			     , GC.GL_SUB
			     , SL.GL_TYPE
			     , SL.P_OFC_CD
			     , SL.CURR_CD
			     , SL.XCRT
			     , SL.COM_TP
			     , SL.P_OFC_CD + 'DEFAULT' AS COM_CD
			     , TP.ENG_NM AS COM_NM
			     , (CASE WHEN SL.DC_TYPE = 'D' AND <![CDATA[ SL.TOTAL > 0 ]]> THEN 0
			             WHEN SL.DC_TYPE = 'C' AND <![CDATA[ SL.TOTAL < 0 ]]> THEN 0
			             ELSE ABS(SL.TOTAL)
			        END) AS DEBIT
			     , (CASE WHEN SL.DC_TYPE = 'D' AND <![CDATA[ SL.TOTAL < 0 ]]> THEN 0
			             WHEN SL.DC_TYPE = 'C' AND <![CDATA[ SL.TOTAL > 0 ]]> THEN 0
			             ELSE ABS(SL.TOTAL) 
			        END) AS CREDIT
			     , 'Ending - ' + SL.GL_NO AS SLIP_DESC		        
		  FROM (
				SELECT V.GL_NO
					 , V.GL_TYPE
					 , SUM(V.DEBIT) AS DEBIT
					 , SUM(V.CREDIT) AS CREDIT
					 , V.P_OFC_CD
					 , V.CURR_CD
					 , 1 AS XCRT
					 , V.COM_TP
					 , (CASE WHEN V.GL_TYPE = 'CO' THEN SUM(V.DEBIT) - SUM(V.CREDIT)
								WHEN V.GL_TYPE = 'EX' THEN SUM(V.DEBIT) - SUM(V.CREDIT)
								WHEN V.GL_TYPE = 'OE' THEN SUM(V.DEBIT) - SUM(V.CREDIT)
								WHEN V.GL_TYPE = 'IN' THEN SUM(V.CREDIT) - SUM(V.DEBIT)
								WHEN V.GL_TYPE = 'OI' THEN SUM(V.CREDIT) - SUM(V.DEBIT)
								WHEN V.GL_TYPE = 'IT' THEN SUM(V.CREDIT) - SUM(V.DEBIT)
						   END) AS TOTAL
					 , (CASE WHEN V.GL_TYPE = 'CO' THEN 'D'
							 WHEN V.GL_TYPE = 'EX' THEN 'D'
							 WHEN V.GL_TYPE = 'OE' THEN 'D'
							 WHEN V.GL_TYPE = 'IN' THEN 'C'
							 WHEN V.GL_TYPE = 'OI' THEN 'C'
							 WHEN V.GL_TYPE = 'IT' THEN 'C'
						END) AS DC_TYPE     
				  FROM VW_AC_GL_ACTUAL V
				 WHERE V.GL_TYPE NOT IN ('AS','EQ','LI') 
				   AND V.TYPE_1 NOT IN ('EY','BB') 
				   AND V.POST_DT BETWEEN #beginDate# AND #yearEndDate# 
				 GROUP BY V.GL_NO, V.GL_TYPE, V.P_OFC_CD, V.CURR_CD, V.COM_TP
				 ) SL
			 LEFT OUTER JOIN TB_GL_CD GC ON GC.GL_CD = SL.GL_NO
			 LEFT OUTER JOIN TB_TRDP  TP ON TP.TRDP_CD = SL.P_OFC_CD + 'DEFAULT'
			 ) SL
		ORDER BY SL.P_OFC_CD, SL.CURR_CD, SL.GL_NO, SL.GL_TYPE	  
    </select>

	<!-- 4,5번대 전체 DATA 에 입력된 Multi Currency List 조회   -->
    <select id="yearEndCurrGroup45" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	/* ============== AccSlpSlipSQL.XML : yearEndCurrGroup45 ============== */
		SELECT V.CURR_CD					   
		  FROM VW_AC_GL_ACTUAL V
		 WHERE V.GL_TYPE NOT IN ('AS','EQ','LI') 
		   AND V.TYPE_1 NOT IN ('EY','BB') 
		   AND V.POST_DT BETWEEN #beginDate# AND #yearEndDate# 
		 GROUP BY V.CURR_CD
    </select>  
    
    <!-- 4,5번대 One Currency 환율 적용 GL 잔액 List 조회   -->
    <select id="yearEndOneCurrList45" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	/* ============== AccSlpSlipSQL.XML : yearEndOneCurrList45 ============== */
		SELECT SL.GL_NO
		     , SL.GL_SUB
		     , SL.GL_TYPE
		     , SL.P_OFC_CD
		     , SL.CURR_CD
		     , SL.XCRT
		     , SL.COM_TP
		     , SL.COM_CD
		     , SL.COM_NM
		     , SL.DEBIT
		     , SL.CREDIT
		     , SL.SLIP_DESC
		     , SUM(SL.DEBIT) OVER(PARTITION BY SL.P_OFC_CD, SL.CURR_CD) AS G_DEBIT
		     , SUM(SL.CREDIT) OVER(PARTITION BY SL.P_OFC_CD, SL.CURR_CD) AS G_CREDIT 
		 FROM (   
			 SELECT SL.GL_NO
			     , GC.GL_SUB
			     , SL.GL_TYPE
			     , SL.P_OFC_CD
			     , SL.CURR_CD
			     , SL.XCRT
			     , SL.COM_TP
			     , SL.P_OFC_CD + 'DEFAULT' AS COM_CD
			     , TP.ENG_NM AS COM_NM
			     , (CASE WHEN SL.DC_TYPE = 'D' AND <![CDATA[ SL.TOTAL > 0 ]]> THEN 0
			             WHEN SL.DC_TYPE = 'C' AND <![CDATA[ SL.TOTAL < 0 ]]> THEN 0
			             ELSE ABS(SL.TOTAL)
			        END) AS DEBIT
			     , (CASE WHEN SL.DC_TYPE = 'D' AND <![CDATA[ SL.TOTAL < 0 ]]> THEN 0
			             WHEN SL.DC_TYPE = 'C' AND <![CDATA[ SL.TOTAL > 0 ]]> THEN 0
			             ELSE ABS(SL.TOTAL) 
			        END) AS CREDIT
			     , 'Ending - ' + SL.GL_NO AS SLIP_DESC		        
		  FROM (
				SELECT V.GL_NO
					 , V.GL_TYPE
					 , SUM(V.DEBIT) AS DEBIT
					 , SUM(V.CREDIT) AS CREDIT
					 , V.P_OFC_CD
					 , #curr_cd# AS CURR_CD
					 , 1 AS XCRT
					 , V.COM_TP
					 , (CASE WHEN V.GL_TYPE = 'CO' THEN SUM(V.DEBIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END)) 
					                                  - SUM(V.CREDIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END))
								WHEN V.GL_TYPE = 'EX' THEN SUM(V.DEBIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END)) 
													  - SUM(V.CREDIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END))
								WHEN V.GL_TYPE = 'OE' THEN SUM(V.DEBIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END)) 
								                      - SUM(V.CREDIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END))
								WHEN V.GL_TYPE = 'IN' THEN SUM(V.CREDIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END)) 
								                      - SUM(V.DEBIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END))
								WHEN V.GL_TYPE = 'OI' THEN SUM(V.CREDIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END)) 
								                      - SUM(V.DEBIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END))
								WHEN V.GL_TYPE = 'IT' THEN SUM(V.CREDIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END)) 
								                      - SUM(V.DEBIT * (CASE WHEN V.CURR_CD = #curr_cd# THEN 1 ELSE ISNULL(dd_ex_rt.xch_rt_ut, ISNULL(mm_ex_rt.xch_rt_ut, 0)) END))
						   END) AS TOTAL
					 , (CASE WHEN V.GL_TYPE = 'CO' THEN 'D'
							 WHEN V.GL_TYPE = 'EX' THEN 'D'
							 WHEN V.GL_TYPE = 'OE' THEN 'D'
							 WHEN V.GL_TYPE = 'IN' THEN 'C'
							 WHEN V.GL_TYPE = 'OI' THEN 'C'
							 WHEN V.GL_TYPE = 'IT' THEN 'C'
						END) AS DC_TYPE     
				  FROM VW_AC_GL_ACTUAL V
				       LEFT OUTER JOIN 
							TB_FINC_PERF_XCRT DD_EX_RT WITH(NOLOCK)           
							ON  DD_EX_RT.FM_CURR_CD = V.CURR_CD    
							AND DD_EX_RT.DELT_FLG = 'N'                                                       
							AND DD_EX_RT.TO_CURR_CD = #curr_cd#  
							AND DD_EX_RT.DT_CLSS_CD = 'D' 
							AND DD_EX_RT.APLY_FM_DT = V.POST_DT    
						LEFT OUTER JOIN 
							TB_FINC_PERF_XCRT MM_EX_RT WITH(NOLOCK)             
							ON  MM_EX_RT.FM_CURR_CD = V.CURR_CD   
							AND MM_EX_RT.DELT_FLG = 'N'                                                       
							AND MM_EX_RT.TO_CURR_CD = #curr_cd#   
							AND MM_EX_RT.DT_CLSS_CD = 'M' 
							AND SUBSTRING(MM_EX_RT.APLY_FM_DT,1,6) = SUBSTRING(V.POST_DT,1,6)
				 WHERE V.GL_TYPE NOT IN ('AS','EQ','LI') 
				   AND V.TYPE_1 NOT IN ('EY','BB') 
				   AND V.POST_DT BETWEEN #beginDate# AND #yearEndDate# 
				 GROUP BY V.GL_NO, V.GL_TYPE, V.P_OFC_CD, V.CURR_CD, V.COM_TP
				 ) SL
			 LEFT OUTER JOIN TB_GL_CD GC ON GC.GL_CD = SL.GL_NO
			 LEFT OUTER JOIN TB_TRDP  TP ON TP.TRDP_CD = SL.P_OFC_CD + 'DEFAULT'
			 ) SL
		ORDER BY SL.P_OFC_CD, SL.CURR_CD, SL.GL_NO, SL.GL_TYPE	  
    </select>
    
    <!-- 1,2,3번대 C/F GL 잔액 List 조회   -->
    <select id="yearEndList123cf" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	/* ============== AccSlpSlipSQL.XML : yearEndList123cf ============== */
		SELECT SL.GL_NO
		     , SL.GL_SUB
		     , SL.GL_TYPE
		     , SL.P_OFC_CD
		     , SL.CURR_CD
		     , SL.XCRT
		     , SL.COM_TP
		     , SL.COM_CD
		     , SL.COM_NM
		     , SL.DEBIT
		     , SL.CREDIT
		     , SL.SLIP_DESC
		     , SUM(SL.DEBIT) OVER(PARTITION BY SL.P_OFC_CD, SL.CURR_CD) AS G_DEBIT
		     , SUM(SL.CREDIT) OVER(PARTITION BY SL.P_OFC_CD, SL.CURR_CD) AS G_CREDIT 
		 FROM (   
			 SELECT SL.GL_NO
			     , GC.GL_SUB
			     , SL.GL_TYPE
			     , SL.P_OFC_CD
			     , SL.CURR_CD
			     , SL.XCRT
			     , SL.COM_TP
			     , SL.COM_CD
			     , (CASE WHEN SL.COM_TP = 'C' THEN TP.ENG_NM
			             WHEN SL.COM_TP = 'B' THEN BK.BANK_NM
			        END     
			       ) AS COM_NM
			     , (CASE WHEN SL.DC_TYPE = 'D' AND <![CDATA[ SL.TOTAL > 0 ]]> THEN 0
			             WHEN SL.DC_TYPE = 'C' AND <![CDATA[ SL.TOTAL < 0 ]]> THEN 0
			             ELSE ABS(SL.TOTAL)
			        END) AS DEBIT
			     , (CASE WHEN SL.DC_TYPE = 'D' AND <![CDATA[ SL.TOTAL < 0 ]]> THEN 0
			             WHEN SL.DC_TYPE = 'C' AND <![CDATA[ SL.TOTAL > 0 ]]> THEN 0
			             ELSE ABS(SL.TOTAL)
			        END) AS CREDIT
			     , 'Ending C/F' AS SLIP_DESC		        
		  FROM (
				SELECT V.GL_NO
					 , V.GL_TYPE
					 , SUM(V.DEBIT) AS DEBIT
					 , SUM(V.CREDIT) AS CREDIT
					 , V.P_OFC_CD
					 , V.CURR_CD
					 , 1 AS XCRT
					 , V.COM_TP
					 , V.COM_CD
					 , (CASE WHEN V.GL_TYPE = 'AS' THEN SUM(V.DEBIT) - SUM(V.CREDIT)
								WHEN V.GL_TYPE = 'LI' THEN SUM(V.CREDIT) - SUM(V.DEBIT)
								WHEN V.GL_TYPE = 'EQ' THEN SUM(V.CREDIT) - SUM(V.DEBIT)
						   END) AS TOTAL
					 , (CASE WHEN V.GL_TYPE = 'AS' THEN 'D'
							 WHEN V.GL_TYPE = 'LI' THEN 'C'
							 WHEN V.GL_TYPE = 'EQ' THEN 'C'
						END) AS DC_TYPE     
				  FROM VW_AC_GL_ACTUAL V
				 WHERE V.GL_TYPE IN ('AS','EQ','LI') 
				   AND NOT (V.TYPE_1 = 'EY' AND V.REF_SEQ IN ( '99998' ,'99999' ))
				   AND V.POST_DT BETWEEN #beginDate# AND #yearEndDate# 
				 GROUP BY V.GL_NO, V.GL_TYPE, V.P_OFC_CD, V.CURR_CD, V.COM_TP, V.COM_CD
				 ) SL
			 LEFT OUTER JOIN TB_GL_CD GC ON GC.GL_CD = SL.GL_NO
			 LEFT OUTER JOIN TB_TRDP  TP ON TP.TRDP_CD = SL.COM_CD
			 LEFT OUTER JOIN TB_BANK  BK ON BK.BANK_SEQ = SL.COM_CD
			 ) SL
		ORDER BY SL.P_OFC_CD, SL.CURR_CD, SL.GL_NO, SL.GL_TYPE	
    </select>  
    
    <!-- 1,2,3번대 B/F GL 잔액 List 조회   -->
    <select id="yearEndList123bf" parameterClass="java.util.HashMap" resultClass="SlipVO">
    	/* ============== AccSlpSlipSQL.XML : yearEndList123bf ============== */
		SELECT SL.GL_NO
		     , SL.GL_SUB
		     , SL.GL_TYPE
		     , SL.P_OFC_CD
		     , SL.CURR_CD
		     , SL.XCRT
		     , SL.COM_TP
		     , SL.COM_CD
		     , SL.COM_NM
		     , SL.DEBIT
		     , SL.CREDIT
		     , SL.SLIP_DESC
		     , SUM(SL.DEBIT) OVER(PARTITION BY SL.P_OFC_CD, SL.CURR_CD) AS G_DEBIT
		     , SUM(SL.CREDIT) OVER(PARTITION BY SL.P_OFC_CD, SL.CURR_CD) AS G_CREDIT 
		 FROM (   
			 SELECT SL.GL_NO
			     , GC.GL_SUB
			     , SL.GL_TYPE
			     , SL.P_OFC_CD
			     , SL.CURR_CD
			     , SL.XCRT
			     , SL.COM_TP
			     , SL.COM_CD
			     , (CASE WHEN SL.COM_TP = 'C' THEN TP.ENG_NM
			             WHEN SL.COM_TP = 'B' THEN BK.BANK_NM
			        END     
			       ) AS COM_NM
			     , (CASE WHEN SL.DC_TYPE = 'D' AND <![CDATA[ SL.TOTAL < 0 ]]> THEN 0
			             WHEN SL.DC_TYPE = 'C' AND <![CDATA[ SL.TOTAL > 0 ]]> THEN 0
			             ELSE ABS(SL.TOTAL)
			        END) AS DEBIT
			     , (CASE WHEN SL.DC_TYPE = 'D' AND <![CDATA[ SL.TOTAL > 0 ]]> THEN 0
			             WHEN SL.DC_TYPE = 'C' AND <![CDATA[ SL.TOTAL < 0 ]]> THEN 0
			             ELSE ABS(SL.TOTAL)
			        END) AS CREDIT
			     , 'Beginning B/F' AS SLIP_DESC
		  FROM (
				SELECT V.GL_NO
					 , V.GL_TYPE
					 , SUM(V.DEBIT) AS DEBIT
					 , SUM(V.CREDIT) AS CREDIT
					 , V.P_OFC_CD
					 , V.CURR_CD
					 , 1 AS XCRT
					 , V.COM_TP
					 , V.COM_CD
					 , (CASE WHEN V.GL_TYPE = 'AS' THEN SUM(V.DEBIT) - SUM(V.CREDIT)
								WHEN V.GL_TYPE = 'LI' THEN SUM(V.CREDIT) - SUM(V.DEBIT)
								WHEN V.GL_TYPE = 'EQ' THEN SUM(V.CREDIT) - SUM(V.DEBIT)
						   END) AS TOTAL
					 , (CASE WHEN V.GL_TYPE = 'AS' THEN 'D'
							 WHEN V.GL_TYPE = 'LI' THEN 'C'
							 WHEN V.GL_TYPE = 'EQ' THEN 'C'
						END) AS DC_TYPE     
				  FROM VW_AC_GL_ACTUAL V
				 WHERE V.GL_TYPE IN ('AS','EQ','LI') 
				   AND NOT (V.TYPE_1 = 'EY' AND V.REF_SEQ IN ( '99998' ,'99999' ))
				   AND V.POST_DT BETWEEN #beginDate# AND #yearEndDate# 
				 GROUP BY V.GL_NO, V.GL_TYPE, V.P_OFC_CD, V.CURR_CD, V.COM_TP, V.COM_CD 
				 ) SL
			 LEFT OUTER JOIN TB_GL_CD GC ON GC.GL_CD = SL.GL_NO
			 LEFT OUTER JOIN TB_TRDP  TP ON TP.TRDP_CD = SL.COM_CD
			 LEFT OUTER JOIN TB_BANK  BK ON BK.BANK_SEQ = SL.COM_CD
			 ) SL
		ORDER BY SL.P_OFC_CD, SL.CURR_CD, SL.GL_NO, SL.GL_TYPE	
    </select> 
    
    <!-- Cancel Year End Status Change Invoice -->
    <update id="updateCancelYearEndStatusInv" parameterClass="java.util.HashMap">
    /* ============== AccSlpSlipSQL.XML : updateCancelYearEndStatusInv ============== */
    	UPDATE TB_INV_DTL
   	   		  SET CLS_YN = 'N', CLS_DT = null	
   	    	 ,MODI_OFC_CD	=	#proc_ofccd#
   	    	 ,MODI_TMS		=   GETUTCDATE()
   	    	 ,MODI_USRID	=	#proc_usrid#
    	 WHERE CLS_DT = #s_last_ye_dt# 
    	   AND CLS_YN = 'Y' 
    </update>  
    
    <!-- Cancel Year End Status Change Deposit/Payment -->
    <update id="updateCancelYearEndStatusBnk" parameterClass="java.util.HashMap">
    /* ============== AccSlpSlipSQL.XML : updateCancelYearEndStatusBnk ============== */
    	UPDATE TB_JNR_MST
   	   		  SET CLS_YN = 'N', CLS_DT = null
   	    	 ,MODI_OFC_CD	=	#proc_ofccd#
   	    	 ,MODI_TMS		=   GETUTCDATE()
   	    	 ,MODI_USRID	=	#proc_usrid#
    	 WHERE CLS_DT = #s_last_ye_dt# 
    	   AND CLS_YN = 'Y' 
    </update>
    
    <!-- Cancel Year End Status Change Journal -->
    <update id="updateCancelYearEndStatusJnr" parameterClass="java.util.HashMap">
    /* ============== AccSlpSlipSQL.XML : updateCancelYearEndStatusJnr ============== */
    	UPDATE TB_SLIP_MST
   	   		  SET CLS_YN = 'N', CLS_DT = null
   	    	 ,MODI_OFC_CD	=	#proc_ofccd#
   	    	 ,MODI_TMS		=   GETUTCDATE()
   	    	 ,MODI_USRID	=	#proc_usrid#
    	 WHERE CLS_DT = #s_last_ye_dt# 
    	   AND CLS_YN = 'Y'  
    </update>
    
    <!-- Slip Detail Year End 삭제  -->
    <delete id="deleteYearEndSlipDtl" parameterClass="java.util.HashMap">
    	DELETE FROM TB_SLIP_DTL
    	 WHERE SLIP_NO IN (SELECT SLIP_NO 
    	                     FROM TB_SLIP_MST
				    	    WHERE SLIP_TP = 'EY' 
				    	      AND POST_DT = #s_last_ye_dt#
				    	      AND DT_SEQ IN (99998, 99999)
				    	   ) 
    </delete>
    
    <!-- Slip Master Year End 삭제   -->
    <delete id="deleteYearEndSlipMst" parameterClass="java.util.HashMap">
    	DELETE FROM TB_SLIP_MST
    	 WHERE SLIP_TP = 'EY' 
    	   AND POST_DT = #s_last_ye_dt#
    	   AND DT_SEQ IN (99998, 99999)  
    </delete>
    
    <!-- Slip Detail Year End 삭제  -->
    <delete id="deleteYearEndSlipDtl_2" parameterClass="java.util.HashMap">
    	DELETE FROM TB_SLIP_DTL
    	 WHERE SLIP_NO IN (SELECT SLIP_NO 
    	                     FROM TB_SLIP_MST
				    	    WHERE SLIP_TP = 'EY' 
				    	      AND POST_DT = CONVERT(VARCHAR, DATEADD(D, 1, #s_last_ye_dt#), 112)
				    	      AND DT_SEQ = 1
				    	   ) 
    </delete>
    
    <!-- Slip Master Year End 삭제   -->
    <delete id="deleteYearEndSlipMst_2" parameterClass="java.util.HashMap">
    	DELETE FROM TB_SLIP_MST
    	 WHERE SLIP_TP = 'EY' 
    	   AND POST_DT = CONVERT(VARCHAR, DATEADD(D, 1, #s_last_ye_dt#), 112) 
    	   AND DT_SEQ  = 1
    </delete>
    
    <!-- View Table 99998, 99999 Year End 삭제  -->
    <delete id="deleteYearEndViewTB9" parameterClass="java.util.HashMap">
    	DELETE FROM VW_AC_GL
    	 WHERE TYPE_1 = 'EY' 
    	   AND POST_DT = #s_last_ye_dt#
    	   AND REF_SEQ IN (99998, 99999)  
    </delete>
    
    <!-- View Table B/F(1) Year End 삭제  -->
    <delete id="deleteYearEndViewTB1" parameterClass="java.util.HashMap">
    	DELETE FROM VW_AC_GL
    	 WHERE TYPE_1 = 'EY' 
    	   AND POST_DT = CONVERT(VARCHAR, DATEADD(D, 1, #s_last_ye_dt#), 112) 
    	   AND REF_SEQ  = 1
    </delete>
    
    <select id="searchBlockHistory" parameterClass="java.util.HashMap" resultClass="BlockLogVO">
		SELECT A1.*
		  FROM ( SELECT ROW_NUMBER() OVER (ORDER BY RGST_TMS DESC) AS ROWNUM
				 	  ,BLCK_LOG_SEQ
				      ,BLCK_TP_CD
				      ,HIS_REF_NO
				      ,HIS_RMK
				      ,RESERVE_FIELD01
				      ,RESERVE_FIELD02
				      ,RESERVE_FIELD03
				      ,RGST_USRID
				      ,RGST_OFC_CD
				      ,RGST_TMS  
				 FROM TB_ACCT_BLOCK_LOG 
				WHERE 1=1
				<isNotEmpty property="s_block_opt">   
					<isEqual property="s_block_opt" compareValue="A">
						AND BLCK_TP_CD IN ('B', 'U')
					</isEqual>  
					<isEqual property="s_block_opt" compareValue="V">
						AND BLCK_TP_CD IN ('V')
					</isEqual>  
					<isEqual property="s_block_opt" compareValue="M">
						AND BLCK_TP_CD NOT IN ('B', 'U', 'V')
					</isEqual>                                     
		        </isNotEmpty>
		        ) A1
<![CDATA[ WHERE A1.ROWNUM > #beginIdx# AND A1.ROWNUM <= #topCnt#	]]>
	</select>
    
    <select id="searchBlockHistory_CNT" parameterClass="java.util.HashMap" resultClass="Integer">
		SELECT COUNT(1)
		 FROM TB_ACCT_BLOCK_LOG 
		WHERE 1=1
		<isNotEmpty property="s_block_opt">   
			<isEqual property="s_block_opt" compareValue="A">
				AND BLCK_TP_CD IN ('B', 'U')
			</isEqual>   
			<isEqual property="s_block_opt" compareValue="V">
				AND BLCK_TP_CD IN ('V')
			</isEqual>  
			<isEqual property="s_block_opt" compareValue="M">
				AND BLCK_TP_CD NOT IN ('B', 'U', 'V')
			</isEqual>                                     
        </isNotEmpty>
	</select>

	<!-- B/L -->
	<update id="updateBl_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* updateBl_Vat_Block_Dt */
    	UPDATE TB_INTG_BL_BLCK
	       SET BL_STS_CD = 'HF',
	    	   MODI_USRID = #proc_usrid#, 
    	       MODI_OFC_CD = #proc_ofccd#, 
    	       MODI_TMS = GETUTCDATE()
		 WHERE INTG_BL_SEQ IN (SELECT TB1.INTG_BL_SEQ														
								 FROM TB_INTG_BL TB1 ,TB_INTG_BL_BLCK TB2 
								WHERE TB1.INTG_BL_SEQ = TB2.INTG_BL_SEQ
								  AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
				    	   		  AND TB1.INTG_BL_SEQ IN (SELECT F.INTG_BL_SEQ
															FROM TB_JNR_MST M, TB_JNR_DTL D, TB_FRT F
														   WHERE M.JNR_NO = D.JNR_NO
															 AND D.INV_SEQ = F.INV_SEQ
															 AND M.CLR_DT like #s_clr_ym# + '%'
															 AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
															 AND ISNULL(M.DELT_FLG, 'N') = 'N'
															 AND ISNULL(D.DELT_FLG, 'N') = 'N'
															 AND ISNULL(F.DELT_FLG, 'N') = 'N'
															 AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y')
														   GROUP BY F.INTG_BL_SEQ)
				    	   		  AND TB2.BL_STS_CD != 'HF'
							  )
    </update>
    
    <insert id="insertBl_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/*insertBl_Vat_Block_Dt*/
    	INSERT INTO	TB_INTG_BL_BLCK(
			INTG_BL_SEQ,  BL_STS_CD, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, 	MODI_USRID,
			MODI_OFC_CD, MODI_TMS
		)	
		SELECT TB1.INTG_BL_SEQ,	'HF' AS BL_STS_CD,	TB1.RGST_USRID,
				TB1.RGST_OFC_CD, TB1.RGST_TMS,		TB1.MODI_USRID,
				TB1.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS
		  FROM TB_INTG_BL TB1
		 WHERE TB1.BL_STS_CD != 'HF'
		   AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
		   AND TB1.INTG_BL_SEQ NOT IN (SELECT INTG_BL_SEQ FROM TB_INTG_BL_BLCK)
    	   AND TB1.INTG_BL_SEQ IN (SELECT F.INTG_BL_SEQ
									 FROM TB_JNR_MST M, TB_JNR_DTL D, TB_FRT F
									WHERE M.JNR_NO = D.JNR_NO
									  AND D.INV_SEQ = F.INV_SEQ
									  AND M.CLR_DT like #s_clr_ym# + '%'
									  AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
									  AND ISNULL(M.DELT_FLG, 'N') = 'N'
									  AND ISNULL(D.DELT_FLG, 'N') = 'N'
									  AND ISNULL(F.DELT_FLG, 'N') = 'N'
									  AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y')
									GROUP BY F.INTG_BL_SEQ)
    </insert>
    
    <update id="updateOthBl_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* updateOthBl_Vat_Block_Dt */
    	 UPDATE TB_OTH_SALES_BLCK
    	    SET STS_CD = 'B',
    	    	MODI_USRID = #proc_usrid#, 
    	       	MODI_OFC_CD = #proc_ofccd#, 
    	       	MODI_TMS = GETUTCDATE()
		  WHERE OTH_SEQ IN (SELECT TB1.OTH_SEQ														
							  FROM TB_OTH_SALES TB1 ,TB_OTH_SALES_BLCK TB2 
							 WHERE TB1.OTH_SEQ = TB2.OTH_SEQ
							   AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
							   AND TB1.OTH_SEQ IN (SELECT F.OTH_SEQ
													 FROM TB_JNR_MST M, TB_JNR_DTL D, TB_FRT F
													WHERE M.JNR_NO = D.JNR_NO
													  AND D.INV_SEQ = F.INV_SEQ
													  AND M.CLR_DT like #s_clr_ym# + '%'
													  AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
													  AND ISNULL(M.DELT_FLG, 'N') = 'N'
													  AND ISNULL(D.DELT_FLG, 'N') = 'N'
													  AND ISNULL(F.DELT_FLG, 'N') = 'N'
													  AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y')
													 GROUP BY F.OTH_SEQ)												
							   AND TB2.STS_CD != 'B'
						   )			
    </update>
    
    <insert id="insertOthBl_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* insertOthBl_Vat_Block_Dt */
    	INSERT INTO	TB_OTH_SALES_BLCK(
			OTH_SEQ, STS_CD, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, MODI_USRID,
			MODI_OFC_CD, MODI_TMS
		) 
		SELECT TB1.OTH_SEQ, 'B' AS STS_CD, TB1.RGST_USRID,
		       TB1.RGST_OFC_CD, TB1.RGST_TMS, TB1.MODI_USRID,
			   TB1.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS
		  FROM TB_OTH_SALES TB1 LEFT OUTER JOIN TB_OTH_SALES_BLCK TB2 ON TB1.OTH_SEQ = TB2.OTH_SEQ
		 WHERE TB1.OTH_SEQ IN (SELECT F.OTH_SEQ
								 FROM TB_JNR_MST M, TB_JNR_DTL D, TB_FRT F
								WHERE M.JNR_NO = D.JNR_NO
								  AND D.INV_SEQ = F.INV_SEQ
								  AND M.CLR_DT like #s_clr_ym# + '%'
								  AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
								  AND ISNULL(M.DELT_FLG, 'N') = 'N'
								  AND ISNULL(D.DELT_FLG, 'N') = 'N'
								  AND ISNULL(F.DELT_FLG, 'N') = 'N'
								  AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y')
								 GROUP BY F.OTH_SEQ)
		   AND TB1.STS_CD != 'B'
		   AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
		   AND TB1.OTH_SEQ NOT IN (SELECT OTH_SEQ FROM TB_OTH_SALES_BLCK)
    </insert>
    
	<!-- Invoice -->
	<update id="updateFrt_Vat_Block_Dt" parameterClass="java.util.HashMap">
		/* updateFrt_Vat_Block_Dt */
    	UPDATE TB_FRT_BLCK
    	   SET CFM_FLG = 'Y',	
			   MODI_USRID = #proc_usrid#, 
    	       MODI_OFC_CD = #proc_ofccd#, 
    	       MODI_TMS = GETUTCDATE()
		 WHERE FRT_SEQ IN (SELECT TB1.FRT_SEQ														
							 FROM TB_FRT TB1 ,TB_FRT_BLCK TB2 
							WHERE TB1.FRT_SEQ = TB2.FRT_SEQ
							  AND ISNULL(TB2.CFM_FLG,'N') = 'N'
						   	  AND TB1.FRT_SEQ IN (SELECT F.FRT_SEQ
												    FROM TB_JNR_MST M, TB_JNR_DTL D, TB_FRT F
												   WHERE M.JNR_NO = D.JNR_NO
													 AND D.INV_SEQ = F.INV_SEQ
													 AND M.CLR_DT like #s_clr_ym# + '%'
													 AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
													 AND ISNULL(M.DELT_FLG, 'N') = 'N'
													 AND ISNULL(D.DELT_FLG, 'N') = 'N'
													 AND ISNULL(F.DELT_FLG, 'N') = 'N'
													 AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y'))	
						  )
    </update>
    
    <insert id="insertFrt_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* insertFrt_Vat_Block_Dt */
    	INSERT INTO	TB_FRT_BLCK(
			FRT_SEQ, CFM_FLG, RGST_USRID,
			RGST_OFC_CD, RGST_TMS, MODI_USRID,
			MODI_OFC_CD, MODI_TMS
		)	
		SELECT TB1.FRT_SEQ, 'Y' AS CFM_FLG,
			   TB1.RGST_USRID, TB1.RGST_OFC_CD,
			   TB1.RGST_TMS, TB1.MODI_USRID,
			   TB1.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS
		  FROM TB_FRT TB1
		 WHERE TB1.FRT_SEQ IN (SELECT F.FRT_SEQ
								 FROM TB_JNR_MST M, TB_JNR_DTL D, TB_FRT F
								WHERE M.JNR_NO = D.JNR_NO
								  AND D.INV_SEQ = F.INV_SEQ
								  AND M.CLR_DT like #s_clr_ym# + '%'
								  AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
								  AND ISNULL(M.DELT_FLG, 'N') = 'N'
								  AND ISNULL(D.DELT_FLG, 'N') = 'N'
								  AND ISNULL(F.DELT_FLG, 'N') = 'N'
								  AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y'))
		   AND ISNULL(TB1.CFM_FLG, 'N') = 'N'
		   AND TB1.FRT_SEQ NOT IN (SELECT FRT_SEQ FROM TB_FRT_BLCK)
    </insert>
    
    <update id="updateInv_Mst_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* "updateInv_Mst_Vat_Block_Dt" */
		UPDATE TB_INV_BLCK
   	   	   SET CLT_CMPL_FLG = 'Y',	
		   	   MODI_USRID = #proc_usrid#, 
    	       MODI_OFC_CD = #proc_ofccd#, 
    	       MODI_TMS = GETUTCDATE()
 		 WHERE INV_SEQ IN (SELECT RESULT.INV_SEQ
							 FROM (SELECT I.INV_SEQ
									 FROM TB_INV I ,TB_INV_DTL ID
									WHERE I.INV_SEQ = ID.INV_SEQ
									  AND ISNULL(I.DELT_FLG,'N') != 'Y'
									  AND ISNULL(ID.DELT_FLG,'N') != 'Y'
					    	   		  AND ID.INV_SEQ IN (SELECT D.INV_SEQ
														   FROM TB_JNR_MST M, TB_JNR_DTL D
														  WHERE M.JNR_NO = D.JNR_NO
														    AND M.CLR_DT like #s_clr_ym# + '%'
														    AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
														    AND ISNULL(M.DELT_FLG, 'N') = 'N'
														    AND ISNULL(D.DELT_FLG, 'N') = 'N'
														    AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y'))
								  ) RESULT INNER JOIN TB_INV_BLCK TB2 ON RESULT.INV_SEQ = TB2.INV_SEQ
							WHERE TB2.CLT_CMPL_FLG = 'N'
						  )
    </update>
    
    <insert id="insertInv_Mst_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/*insertInv_Mst_Vat_Block_Dt*/
    	INSERT INTO	TB_INV_BLCK(
			INV_SEQ, CLT_CMPL_FLG, RGST_USRID,
			RGST_OFC_CD,  RGST_TMS, MODI_USRID,
			MODI_OFC_CD,  MODI_TMS
		)
		SELECT I.INV_SEQ, 'Y'  AS CLT_CMPL_FLG, I.RGST_USRID, 
			   I.RGST_OFC_CD, I.RGST_TMS,	 I.MODI_USRID,
			   I.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS
		  FROM TB_INV I ,TB_INV_DTL ID
		 WHERE I.INV_SEQ = ID.INV_SEQ
		   AND ISNULL(I.DELT_FLG,'N') != 'Y'
		   AND ISNULL(ID.DELT_FLG,'N') != 'Y'
     	   AND ID.INV_SEQ IN (SELECT D.INV_SEQ
							    FROM TB_JNR_MST M, TB_JNR_DTL D
							   WHERE M.JNR_NO = D.JNR_NO
							     AND M.CLR_DT like #s_clr_ym# + '%'
							     AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
							     AND ISNULL(M.DELT_FLG, 'N') = 'N'
							     AND ISNULL(D.DELT_FLG, 'N') = 'N'
							     AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y'))
		   AND ISNULL(ID.CLT_CMPL_FLG,'N') != 'Y'
		   AND I.INV_SEQ NOT IN ( SELECT INV_SEQ FROM TB_INV_BLCK)
    </insert> 
    
    <update id="updateInv_Dtl_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* updateInv_Dtl_Vat_Block_Dt */
		UPDATE TB_INV_DTL_BLCK
   	   	   SET CLT_CMPL_FLG = 'Y', 
   	   	   	   BLOCK_DT = #s_block_dt#,
			   MODI_USRID = #proc_usrid#, 
    	       MODI_OFC_CD = #proc_ofccd#, 
    	       MODI_TMS = GETUTCDATE()
 		 WHERE INV_SEQ IN (SELECT RESULT.INV_SEQ
							 FROM (SELECT I.INV_SEQ
									 FROM TB_INV I ,TB_INV_DTL ID
									WHERE I.INV_SEQ = ID.INV_SEQ
									  AND ISNULL(I.DELT_FLG,'N') != 'Y'
									  AND ISNULL(ID.DELT_FLG,'N') != 'Y'
									  AND I.INV_SEQ IN (SELECT D.INV_SEQ
														  FROM TB_JNR_MST M, TB_JNR_DTL D
														 WHERE M.JNR_NO = D.JNR_NO
														   AND M.CLR_DT like #s_clr_ym# + '%'
														   AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
														   AND ISNULL(M.DELT_FLG, 'N') = 'N'
														   AND ISNULL(D.DELT_FLG, 'N') = 'N'
														   AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y'))
								  ) RESULT INNER JOIN TB_INV_DTL_BLCK TB2 ON RESULT.INV_SEQ = TB2.INV_SEQ
							WHERE TB2.CLT_CMPL_FLG = 'N'
						  )
    </update>
    
    <insert id="insertInv_Dtl_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* insertInv_Dtl_Vat_Block_Dt */
    	INSERT INTO	TB_INV_DTL_BLCK(
			INV_NO, INV_SEQ, CLT_CMPL_FLG,
			BLOCK_DT, RGST_USRID, RGST_OFC_CD,
			RGST_TMS, MODI_USRID, MODI_OFC_CD,
			MODI_TMS
		)
		SELECT ID.INV_NO, ID.INV_SEQ, 'Y' AS CLT_CMPL_FLG,
			   #s_block_dt#, ID.RGST_USRID, ID.RGST_OFC_CD,
			   ID.RGST_TMS, ID.MODI_USRID, ID.MODI_OFC_CD,
			   GETUTCDATE() AS MODI_TMS
		  FROM TB_INV I ,TB_INV_DTL ID
		 WHERE I.INV_SEQ = ID.INV_SEQ
		   AND ISNULL(I.DELT_FLG,'N') != 'Y'
		   AND ISNULL(ID.DELT_FLG,'N') != 'Y'
		   AND ISNULL(ID.CLT_CMPL_FLG,'N') = 'N'
		   AND I.INV_SEQ NOT IN (SELECT INV_SEQ FROM TB_INV_DTL_BLCK)
		   AND I.INV_SEQ IN (SELECT D.INV_SEQ
							   FROM TB_JNR_MST M, TB_JNR_DTL D
							  WHERE M.JNR_NO = D.JNR_NO
							    AND M.CLR_DT like #s_clr_ym# + '%'
							    AND ISNULL(M.CLT_CMPL_FLG, 'N') = 'N'
							    AND ISNULL(M.DELT_FLG, 'N') = 'N'
							    AND ISNULL(D.DELT_FLG, 'N') = 'N'
							    AND M.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y'))
    </insert> 
    
	<!-- Journal -->
	<update id="updateJnr_Vat_Jnr_Dt" parameterClass="java.util.HashMap">
		/*updateJnr_Vat_Jnr_Dt*/
    	UPDATE TB_JNR_MST
    	   SET JNR_YN = 'Y',
    	       JNR_DT = #s_block_dt#,
    	       MODI_USRID = #proc_usrid#, 
    	       MODI_OFC_CD = #proc_ofccd#, 
    	       MODI_TMS = GETUTCDATE()
    	 WHERE CLR_DT like #s_clr_ym# + '%'
		   AND ISNULL(CLT_CMPL_FLG, 'N') = 'N'
		   AND ISNULL(DELT_FLG, 'N') = 'N'
		   AND JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK WHERE CLT_CMPL_FLG = 'Y')
    </update>
    
	<update id="updateJnr_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* updateJnr_Vat_Block_Dt */
		UPDATE TB_JNR_MST_BLCK
    	   SET CLT_CMPL_FLG = 'Y', 
    	   	   BLOCK_DT = #s_block_dt#,	
			   MODI_TMS = GETUTCDATE()
		 WHERE JNR_NO IN (SELECT TB1.JNR_NO														
							FROM TB_JNR_MST TB1 ,TB_JNR_MST_BLCK TB2 
						   WHERE TB1.JNR_NO = TB2.JNR_NO
							 AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
		    	   			 AND TB1.CLR_DT like #s_clr_ym# + '%'
		    	   			 AND TB2.CLT_CMPL_FLG = 'N')
    </update>
    	
	<insert id="insertJnr_Vat_Block_Dt" parameterClass="java.util.HashMap">
    /*insertJnr_Vat_Block_Dt*/
    	INSERT INTO	TB_JNR_MST_BLCK(
			JNR_NO, P_OFC_CD, CLT_CMPL_FLG,
			BLOCK_DT, RGST_USRID, RGST_OFC_CD,
			RGST_TMS, MODI_USRID, MODI_OFC_CD,
			MODI_TMS
		)	
		SELECT TB1.JNR_NO, TB1.P_OFC_CD, 'Y' AS CLT_CMPL_FLG,
			   #s_block_dt#, TB1.RGST_USRID, TB1.RGST_OFC_CD,
			   TB1.RGST_TMS, TB1.MODI_USRID, TB1.MODI_OFC_CD,
			   GETUTCDATE() AS MODI_TMS
		  FROM TB_JNR_MST TB1 
		 WHERE TB1.CLR_DT like #s_clr_ym# + '%'
		   AND ISNULL(TB1.CLT_CMPL_FLG, 'N') = 'N'
		   AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
		   AND TB1.JNR_NO NOT IN (SELECT JNR_NO FROM TB_JNR_MST_BLCK)
    </insert>
    
	<!-- Slip -->
	<update id="updateSlip_Vat_Jnr_Dt" parameterClass="java.util.HashMap">
		/*updateSlip_Vat_Jnr_Dt*/
    	UPDATE TB_SLIP_MST
    	   SET JNR_YN = 'Y',
    	       JNR_DT = #s_block_dt#,
    	       MODI_USRID = #proc_usrid#, 
    	       MODI_OFC_CD = #proc_ofccd#, 
    	       MODI_TMS = GETUTCDATE()
    	 WHERE POST_DT like #s_clr_ym# + '%'
		   AND ISNULL(CLT_CMPL_FLG, 'N') = 'N'
		   AND ISNULL(DELT_FLG, 'N') = 'N'
		   AND SLIP_NO NOT IN (SELECT SLIP_NO FROM TB_SLIP_MST_BLCK WHERE CLT_CMPL_FLG = 'Y')
    </update>
    
    <update id="updateSlip_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/* updateSlip_Vat_Block_Dt */
		UPDATE TB_SLIP_MST_BLCK
    	   SET CLT_CMPL_FLG = 'Y', 
    	   	   BLOCK_DT = #s_block_dt#,	
			   MODI_USRID = #proc_usrid#, 
    	       MODI_OFC_CD = #proc_ofccd#, 
    	       MODI_TMS = GETUTCDATE()
		 WHERE SLIP_NO IN (SELECT TB1.SLIP_NO														
							 FROM TB_SLIP_MST TB1 ,TB_SLIP_MST_BLCK TB2 
							WHERE TB1.SLIP_NO = TB2.SLIP_NO
							  AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
	    	   				  AND TB1.POST_DT like #s_clr_ym# + '%'
	    	   				  AND TB2.CLT_CMPL_FLG = 'N')
    </update>
    
	<insert id="insertSlip_Vat_Block_Dt" parameterClass="java.util.HashMap">
    	/*insertSlip_Vat_Block_Dt*/
    	INSERT INTO	TB_SLIP_MST_BLCK(
			SLIP_NO, P_OFC_CD, CLT_CMPL_FLG, BLOCK_DT,
			RGST_USRID, RGST_OFC_CD, RGST_TMS,
			MODI_USRID, MODI_OFC_CD, MODI_TMS
		)
		SELECT TB1.SLIP_NO, TB1.P_OFC_CD, 'Y' AS CLT_CMPL_FLG, #s_block_dt#,
			   TB1.RGST_USRID, TB1.RGST_OFC_CD, TB1.RGST_TMS,							
			   TB1.MODI_USRID, TB1.MODI_OFC_CD, GETUTCDATE() AS MODI_TMS
		  FROM TB_SLIP_MST TB1 
		 WHERE TB1.POST_DT like #s_clr_ym# + '%'
		   AND ISNULL(TB1.CLT_CMPL_FLG, 'N') = 'N'
		   AND ISNULL(TB1.DELT_FLG, 'N') = 'N'
		   AND TB1.SLIP_NO NOT IN (SELECT SLIP_NO FROM TB_SLIP_MST_BLCK)
    </insert>
    
</sqlMap>